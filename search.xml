<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>发版与自动重启</title>
      <link href="/2024/10/22/%E5%8F%91%E7%89%88%E4%B8%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/"/>
      <url>/2024/10/22/%E5%8F%91%E7%89%88%E4%B8%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>平常我们直接 <code>java -jar xxx.jar</code>  启动项目, </p><p>创建run.sh 脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 定义变量</span><br><span class="line">NAME=&quot;你的进程名称&quot;    # 要管理的进程名称</span><br><span class="line">PROCESS=&quot;/path/to/deploy/jar/xxx.jar&quot;  # 进程的 JAR 文件路径</span><br><span class="line">TIMESTR=$(date &quot;+%Y%m%d%H%M%S&quot;)  # 当前时间戳</span><br><span class="line"></span><br><span class="line"># 打印进程名称</span><br><span class="line">echo $NAME</span><br><span class="line"></span><br><span class="line"># 查找进程 ID</span><br><span class="line">ID=$(ps -ef | grep &quot;$NAME&quot; | grep -v &quot;grep&quot; | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line"># 检查进程是否存在</span><br><span class="line">if [ -z &quot;$ID&quot; ]; then</span><br><span class="line">    echo &quot;process id is empty, process is not existed...&quot;</span><br><span class="line">    echo &quot;process will start...&quot;</span><br><span class="line">    nohup java -jar -Xmx5120m -Xms5120m -Xmn1706m -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M -XX:SurvivorRatio=8 $PROCESS &amp;</span><br><span class="line">    echo &quot;process has started...&quot;</span><br><span class="line">else</span><br><span class="line">    echo $ID</span><br><span class="line">    for id in $ID</span><br><span class="line">    do</span><br><span class="line">        kill -9 $id</span><br><span class="line">        echo &quot;killed $id&quot;</span><br><span class="line">    done</span><br><span class="line">    echo &quot;process will restart...&quot;</span><br><span class="line">    nohup java -jar -Xmx5120m -Xms5120m -Xmn1706m -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M -XX:SurvivorRatio=8 $PROCESS &amp;</span><br><span class="line">    echo &quot;process has restarted...&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置服务器重启 自动执行脚本</p><p>将脚本上传到服务器上后, 查看脚本权限, 用findshell的话, 直接右键 run.sh 选择文件权限, 勾选上全部的执行</p><p>看你的服务器支持什么, 我这里用的crontab</p><p><code>crontab -e</code> 编辑crontab 文件</p><p>在文件里最后一行添加如下</p><p><code>@reboot /path/to/your/script.sh</code></p><p>:wq 保存并退出</p><p><code>crontab -l</code>  检查文件</p><p> <code>sudo systemctl reboot</code>  重启服务器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring四十九讲杂项</title>
      <link href="/2024/09/19/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2%E6%9D%82%E9%A1%B9/"/>
      <url>/2024/09/19/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a href="https://player.bilibili.com/player.html?bvid=BV1P44y1N7QG&p=156&page=156&autoplay=0">bilibili</a></p><h1 id="43-FactoryBean"><a href="#43-FactoryBean" class="headerlink" title="43.FactoryBean"></a>43.FactoryBean</h1><ol><li>用于创建过程较为复杂的产品,如 SqlSessionFactory , 但 @Bean 注解替代</li><li>被 FactoryBean 创建的产品</li></ol><p>a. 被<strong>创建</strong>并添加容器, 但是通过日志发现没有经历 <strong>依赖注入</strong>、<strong>回调 Aware 接口</strong>、<strong>初始化阶段</strong>。</p><p>b. 初始化后流程会走, 产品可以被代理增强</p><p>c. 单例产品 不存储在 BeanFactory 的 singletonObjects 成员中,而是 factoryBeanObjectCache 中</p><p>d. 按照名字获取 bean 得到的是产品, 需要名字前加&amp;才能获取工厂对象</p><p><code>FactoryBean</code>是一个接口,可以实现该接口,并指定一个泛型,在重写的方法指定泛型类型对象的创建,然后将实现类交由 Spring 管理,最后 Spring 容器中会增加泛型类型的 Bean。</p><p>这个 Bean 并不是完全受 Spring 管理的,或者说是 部分受 Spring 管理。</p><p>首先定义 <code>Bean2</code>,交由 Spring 管理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 <code>bean1</code>,它没有交给 Spring 管理,但是注入了 <code>Bean2</code>、定义初始化方法、实现 <code>Aware</code> 接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">       log.debug(<span class="string">&quot;bean1 setBean2&quot;</span>+bean2);</span><br><span class="line">        <span class="built_in">this</span>.bean2 = bean2;&#125;</span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;<span class="keyword">return</span> bean2;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;setBeanFactory(&#123;&#125;)&quot;</span>, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 <code>Bean1FactoryBean</code>,实现 <code>FactoryBean</code>接口,指定泛型为 <code>Bean1</code>,将其交由 Spring 管理,Bean 的名称是 <code>bean1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component(&quot;Bean1FactoryBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1FactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Bean1&gt; &#123;</span><br><span class="line">    <span class="comment">//构造Bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Bean1</span> <span class="variable">bean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">         log.debug(<span class="string">&quot;create bean: &#123;&#125;&quot;</span>, bean1);</span><br><span class="line">        <span class="keyword">return</span> bean1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//决定了根据[类型]获取 或 依赖注入能否成功</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Bean1.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//决定getObject()方法被调用一次还是多次(是否单例)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBean.<span class="built_in">super</span>.isSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从容器获取 名称为 <code>Bean1FactoryBean</code> 的 Bean,发现类型不是写了 <code>@Component(&quot;Bean1FactoryBean&quot;)</code> 的 <code>Bean1FactoryBean</code></p><p>而是没有写 <code>@Component</code> 的 Bean1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a43</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(a43.class);</span><br><span class="line">        <span class="comment">// 根据工厂bean1FactoryBean的名称去容器里取,得到的是产品</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean1FactoryBean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;Bean1FactoryBean&quot;</span>);</span><br><span class="line">        System.out.println(bean1FactoryBean);</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">17:24:17.720 [main] INFO dai.dawang.sundy.a43FactoryBean.Bean1FactoryBean -- create bean: dai.dawang.sundy.a43FactoryBean.Bean1@20d525</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1@20d525</span><br></pre></td></tr></table></figure><p>Bean1 通过 <code>Bean1FactoryBean#getObject()</code>被<strong>创建</strong>并添加容器, 但是通过日志发现没有经历 <strong>依赖注入</strong>、<strong>回调Aware 接口</strong>、<strong>初始化阶段</strong>。</p><p>这个 Bean 没有经历 SpringBean 生命周期的任何阶段吗?</p><p>定义 <code>Bean1PostProcessor</code>,实现 <code>BeanPostProcessor</code> 接口,在 bean1 初始化前后打印日志:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Bean1PostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 观察被 FactoryBean创建的bean1 初始化前后是否打印日志</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1PostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.equals(<span class="string">&quot;Bean1FactoryBean&quot;</span>, beanName) &amp;&amp; bean <span class="keyword">instanceof</span> Bean1)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;Bean1PostProcessor.postProcessBeforeInitialization: &#123;&#125;&quot;</span>, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessBeforeInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.equals(<span class="string">&quot;Bean1FactoryBean&quot;</span>, beanName) &amp;&amp; bean <span class="keyword">instanceof</span> Bean1)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;Bean1PostProcessor.postProcessAfterInitialization: &#123;&#125;&quot;</span>, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessAfterInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>:<span class="number">07</span>:<span class="number">16.097</span> [main] INFO dai.dawang.sundy.a43FactoryBean.Bean1FactoryBean -- create bean: dai.dawang.sundy.a43FactoryBean.Bean1@3d34d211</span><br><span class="line"><span class="number">18</span>:<span class="number">07</span>:<span class="number">16.099</span> [main] INFO dai.dawang.sundy.a43FactoryBean.Bean1PostProcessor -- Bean1PostProcessor.postProcessAfterInitialization: Bean1FactoryBean</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1@3d34d211</span><br></pre></td></tr></table></figure><p>发现 bean1 进行了初始化后的增强逻辑, 但是没有进行初始化前的增强逻辑</p><p>创建代理对象的时机就是 <font style="background-color:#8CCF17;">初始化后</font> 和 <font style="background-color:#8CCF17;">依赖注入之前 </font>,所以 <code>FactoryBean</code>创建的 Bean <strong>可以进行代理增强 。</strong></p><hr><p>下面证明单例 和 产品 和工厂的获取:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a43</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(a43.class);</span><br><span class="line">        <span class="comment">// 根据工厂bean1FactoryBean的名称去容器里取,得到的是产品</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean1FactoryBean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;Bean1FactoryBean&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean1FactoryBean2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;Bean1FactoryBean&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean1FactoryBean3</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;Bean1FactoryBean&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean1FactoryBean4</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;Bean1FactoryBean&quot;</span>);</span><br><span class="line">        System.out.println(bean1FactoryBean);</span><br><span class="line">        System.out.println(bean1FactoryBean2);</span><br><span class="line">        System.out.println(bean1FactoryBean3);</span><br><span class="line">        System.out.println(bean1FactoryBean4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据类型获取bean1</span></span><br><span class="line">        System.out.println(context.getBean(Bean1.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(context.getBean(Bean1FactoryBean.class));</span><br><span class="line">        <span class="comment">//在名称前加&amp; 获取工厂bean</span></span><br><span class="line">        System.out.println(context.getBean(<span class="string">&quot;&amp;Bean1FactoryBean&quot;</span>));</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">11:20:19.941 [main] INFO dai.dawang.sundy.a43FactoryBean.Bean1FactoryBean -- create bean: dai.dawang.sundy.a43FactoryBean.Bean1@1190200a</span><br><span class="line">11:20:19.946 [main] INFO dai.dawang.sundy.a43FactoryBean.Bean1PostProcessor -- Bean1PostProcessor.postProcessAfterInitialization: Bean1FactoryBean</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1@1190200a</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1@1190200a</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1@1190200a</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1@1190200a</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1@1190200a</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1FactoryBean@445b295b</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1FactoryBean@445b295b</span><br></pre></td></tr></table></figure><h1 id="44-Indexed-的原理"><a href="#44-Indexed-的原理" class="headerlink" title="44.@Indexed 的原理"></a>44.@Indexed 的原理</h1><p>Spring 在进行组件扫描时,会遍历项目中依赖的所有 jar 包类路径下所有文件,找到 <code>@Component</code>及其衍生注解,</p><p>然后将它们组成 BeanDefinition 添加到容器中。</p><p>为了优化扫描速度,引入如下依赖,Spring 将扫描过程提前到编译期:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-indexer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在同一包路径下创建 a44:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A44</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">        <span class="comment">// 组件扫描核心类</span></span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(beanFactory);</span><br><span class="line">        scanner.scan(A44.class.getPackage().getName());</span><br><span class="line"></span><br><span class="line">        Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还记得 <code>&lt;font style=&quot;color:#000000;&quot;&gt;ClassPathBeanDefinitionScanner&lt;/font&gt;</code>的作用吗?</p><p><a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/ok0ut8l5dcd0u82r">黑马四十九讲容器与Bean</a> <strong>2.4 BeanDefinition</strong> 提到 这个类是通过扫描指定包路径下的<font style="color:#DF2A3F;"> @Component </font>及其派生注解来注册 Bean</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bean1</span><br><span class="line">bean2</span><br><span class="line">bean3</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br></pre></td></tr></table></figure><p>发现 bean1、bean2、bean3 正常被添加到容器。</p><p>在编译生成的 target 目录下 <code>class/META-INF/spring.components</code>文件有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.sundy.SundyApplication=org.springframework.stereotype.Component,org.springframework.boot.SpringBootConfiguration</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1FactoryBean=org.springframework.stereotype.Component</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean1PostProcessor=org.springframework.stereotype.Component</span><br><span class="line">dai.dawang.sundy.a43FactoryBean.Bean2=org.springframework.stereotype.Component</span><br><span class="line">dai.dawang.sundy.a44Indexed\u6CE8\u89E3\u539F\u7406.Bean1=org.springframework.stereotype.Component</span><br><span class="line">dai.dawang.sundy.a44Indexed\u6CE8\u89E3\u539F\u7406.Bean2=org.springframework.stereotype.Component</span><br><span class="line">dai.dawang.sundy.a44Indexed\u6CE8\u89E3\u539F\u7406.Bean3=org.springframework.stereotype.Component</span><br></pre></td></tr></table></figure><p>如果删除最后一条信息,再运行?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bean1</span><br><span class="line">bean2</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br></pre></td></tr></table></figure><p>此时只有 bean1、bean2 被添加到容器,也就是说会先以 <code>spring.components</code>文件信息为主。</p><p>那么 <code>spring.components</code>是什么呢 ? 在引入 <code>spring-context-indexer</code>依赖后,在编译期根据类是否被 <code>@Indexed</code>注解标记, 来生成 <code>spring.components</code>的内容。</p><p>而 <code>@Indexed</code> 就包含在 <code>@Component</code>注解中:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726805156799-2298a13a-472a-4caa-90f1-22394e6acccc.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>导入 <code>spring-context-indexer</code>依赖后, 在编译期根据 <code>@Indexed</code>生成 <code>class/META-INF/spring.components</code>文件。</p><p>Spring 扫描组件时,发现 <code>class/META-INF/spring.components</code>文件存在,以它为准加载 BeanDefinition, </p><p>如果没有发现就遍历 Jar 包类路径下所有 class 信息。</p><h1 id="45-Spring-代理进一步理解"><a href="#45-Spring-代理进一步理解" class="headerlink" title="45 . Spring 代理进一步理解"></a>45 . Spring 代理进一步理解</h1><p>在 Spring 的代理中 </p><p>依赖注入 和 初始化针对的是 目标对象</p><p>代理对象 和 目标对象 是两个对象,两者的成员变量不会共享。</p><p>确保项目导入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖注入和初始化针对的是目标对象"><a href="#依赖注入和初始化针对的是目标对象" class="headerlink" title="依赖注入和初始化针对的是目标对象"></a>依赖注入和初始化针对的是目标对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Bean2 bean2;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> initialized;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;setBean2(Bean2 bean2)&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.bean2 = bean2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Bean1 init&quot;</span>);</span><br><span class="line">        initialized = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bean2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增强Bean1所有方法</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* dai.dawang.sundy.a45Spring代理的特点.Bean1.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一 SpringBoot 主启动类，它与 Bean1、Bean2 和 MyAspect 在同一包路径下，确保它们能被自动添加到 Spring 容器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A45.class, args);</span><br><span class="line">        <span class="comment">//获取代理对象时发现 打印的 Bean1 init和setBean2(Bean2 bean2)时没有打印before...</span></span><br><span class="line">        <span class="type">Bean1</span> <span class="variable">proxy</span> <span class="operator">=</span> context.getBean(Bean1.class);</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.sundy.a45Spring代理的特点.Bean1    : setBean2(Bean2 bean2)</span><br><span class="line">dai.dawang.sundy.a45Spring代理的特点.Bean1    : Bean1 init</span><br></pre></td></tr></table></figure><p><code>Bean1</code>中的依赖注入和初始化被成功执行, 但 <strong>并没有被增强</strong> 。</p><p><code>Bean1</code>被增强了, 所以从 Spring 容器获取的对象是 代理对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A45.class, args);</span><br><span class="line">        <span class="comment">//获取代理对象时发现 打印的 Bean1 init和setBean2(Bean2 bean2)时没有打印before...</span></span><br><span class="line">        <span class="type">Bean1</span> <span class="variable">proxy</span> <span class="operator">=</span> context.getBean(Bean1.class);</span><br><span class="line">        <span class="comment">//通过代理对象去 依赖注入 和 初始化 发现 打印了 before...</span></span><br><span class="line">        proxy.setBean2(<span class="keyword">new</span> <span class="title class_">Bean2</span>());</span><br><span class="line">        proxy.init();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before....</span><br><span class="line">dai.dawang.sundy.a45Spring代理的特点.Bean1    : setBean2(Bean2 bean2)</span><br><span class="line">before....</span><br><span class="line">dai.dawang.sundy.a45Spring代理的特点.Bean1    : Bean1 init</span><br></pre></td></tr></table></figure><p>主动调用的 <code>setBean2()</code> 和 <code>init()</code>方法** 都被增强** 。</p><h2 id="代理对象与明白对象的成员变量不共享"><a href="#代理对象与明白对象的成员变量不共享" class="headerlink" title="代理对象与明白对象的成员变量不共享"></a>代理对象与明白对象的成员变量不共享</h2><p>直接访问 代理对象 和 目标对象 的成员变量信息, 而不是通过代理对象去获取目标对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A45</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A45.class, args);</span><br><span class="line">        <span class="comment">//获取代理对象时发现 打印的 Bean1 init和setBean2(Bean2 bean2)时没有打印before...</span></span><br><span class="line">        <span class="type">Bean1</span> <span class="variable">proxy</span> <span class="operator">=</span> context.getBean(Bean1.class);</span><br><span class="line">        <span class="comment">//通过代理对象去 依赖注入 和 初始化 发现 打印了 before...</span></span><br><span class="line">        proxy.setBean2(<span class="keyword">new</span> <span class="title class_">Bean2</span>());</span><br><span class="line">        proxy.init();</span><br><span class="line"></span><br><span class="line">        showProxyAndTarget(proxy);</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showProxyAndTarget</span><span class="params">(Bean1 proxy)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;代理中的成员变量&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\tinitialized= &quot;</span>+proxy.initialized);</span><br><span class="line">        System.out.println(<span class="string">&quot;\tbean2= &quot;</span>+proxy.bean2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目标对象(原始对象) 是不存于容器的,单例池只有 代理对象</span></span><br><span class="line">        <span class="comment">//可以把 代理对象 转为 Advised接口后 获取目标对象</span></span><br><span class="line">        <span class="keyword">if</span> (proxy <span class="keyword">instanceof</span> Advised advised)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;目标中的成员变量&quot;</span>);</span><br><span class="line">            <span class="type">Bean1</span> <span class="variable">target</span> <span class="operator">=</span> (Bean1) advised.getTargetSource().getTarget();</span><br><span class="line">            System.out.println(target);</span><br><span class="line">            System.out.println(<span class="string">&quot;\tinitialized= &quot;</span>+target.initialized);</span><br><span class="line">            System.out.println(<span class="string">&quot;\tbean2= &quot;</span>+target.bean2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;代理中的成员变量</span><br><span class="line">initialized= <span class="literal">false</span></span><br><span class="line">bean2= <span class="literal">null</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;目标中的成员变量</span><br><span class="line">dai.dawang.sundy.a45Spring代理的特点.Bean1@7ae0cc89</span><br><span class="line">initialized= <span class="literal">true</span></span><br><span class="line">bean2= dai.dawang.sundy.a45Spring代理的特点.Bean2<span class="meta">@de7e193</span></span><br></pre></td></tr></table></figure><p>由于 依赖注入 和 初始化 只针对 目标对象,因此代理对象中的成员变量的值都是初始值。</p><p>在实际应用过程,不会直接去访问成员变量,而是通过方法去访问:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A45</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A45.class, args);</span><br><span class="line">        <span class="comment">//获取代理对象时发现 打印的 Bean1 init和setBean2(Bean2 bean2)时没有打印before...</span></span><br><span class="line">        <span class="type">Bean1</span> <span class="variable">proxy</span> <span class="operator">=</span> context.getBean(Bean1.class);</span><br><span class="line">        <span class="comment">//通过代理对象去 依赖注入 和 初始化 发现 打印了 before...</span></span><br><span class="line">        proxy.setBean2(<span class="keyword">new</span> <span class="title class_">Bean2</span>());</span><br><span class="line">        proxy.init();</span><br><span class="line"></span><br><span class="line">        showProxyAndTarget(proxy);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;直接调用代理对象方法&quot;</span>);</span><br><span class="line">        System.out.println(proxy.getBean2());</span><br><span class="line">        System.out.println(proxy.isInitialized());</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showProxyAndTarget</span><span class="params">(Bean1 proxy)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;代理中的成员变量&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\tinitialized= &quot;</span>+proxy.initialized);</span><br><span class="line">        System.out.println(<span class="string">&quot;\tbean2= &quot;</span>+proxy.bean2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目标对象(原始对象) 是不存于容器的,单例池只有 代理对象</span></span><br><span class="line">        <span class="comment">//可以把 代理对象 转为 Advised接口后 获取目标对象</span></span><br><span class="line">        <span class="keyword">if</span> (proxy <span class="keyword">instanceof</span> Advised advised)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;目标中的成员变量&quot;</span>);</span><br><span class="line">            <span class="type">Bean1</span> <span class="variable">target</span> <span class="operator">=</span> (Bean1) advised.getTargetSource().getTarget();</span><br><span class="line">            System.out.println(target);</span><br><span class="line">            System.out.println(<span class="string">&quot;\tinitialized= &quot;</span>+target.initialized);</span><br><span class="line">            System.out.println(<span class="string">&quot;\tbean2= &quot;</span>+target.bean2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;代理中的成员变量</span><br><span class="line">initialized= <span class="literal">false</span></span><br><span class="line">bean2= <span class="literal">null</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;目标中的成员变量</span><br><span class="line">dai.dawang.sundy.a45Spring代理的特点.Bean1@7ae0cc89</span><br><span class="line">initialized= <span class="literal">true</span></span><br><span class="line">bean2= dai.dawang.sundy.a45Spring代理的特点.Bean2<span class="meta">@de7e193</span></span><br><span class="line">直接调用代理对象方法</span><br><span class="line">before....</span><br><span class="line">dai.dawang.sundy.a45Spring代理的特点.Bean2<span class="meta">@de7e193</span></span><br><span class="line">before....</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>通过方法去访问 代理对象 的成员变量 时, 方法是会被增强的, 代理对象中的方法会去调用 目标对象的方法, 从而读取出增强的值。</p><h2 id="只会对能被重写的方法进行增强"><a href="#只会对能被重写的方法进行增强" class="headerlink" title="只会对能被重写的方法进行增强"></a>只会对能被重写的方法进行增强</h2><p>在 Bean1 里添加如下几个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1() 成员方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2() final 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m3() static 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m4() private 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// static、final、private 修饰的方法不会被增强</span></span><br><span class="line">    proxy.m1();</span><br><span class="line">    proxy.m2();</span><br><span class="line">    Bean1.m3();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">m4</span> <span class="operator">=</span> Bean1.class.getDeclaredMethod(<span class="string">&quot;m4&quot;</span>);</span><br><span class="line">    m4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    m4.invoke(proxy);</span><br><span class="line"></span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before</span><br><span class="line"><span class="title function_">m1</span><span class="params">()</span> 成员方法</span><br><span class="line">m2() <span class="keyword">final</span> 方法</span><br><span class="line">m3() <span class="keyword">static</span> 方法</span><br><span class="line">m4() <span class="keyword">private</span> 方法</span><br></pre></td></tr></table></figure><p>能被重写的成员方法成功被增强，但被 final 修饰的、被 static 修饰的方法和私有方法由于无法被重写，因此它们不能被增强。如果想增强这些方法，可以使用 AspectJ 编译器增强或者 Agent 类加载。</p><h1 id="46-Value-注入底层"><a href="#46-Value-注入底层" class="headerlink" title="46 . @Value 注入底层"></a>46 . @Value 注入底层</h1><h2 id="解析-Value"><a href="#解析-Value" class="headerlink" title="解析@Value"></a>解析@Value</h2><p>在第四讲<a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/ok0ut8l5dcd0u82r">黑马四十九讲容器与Bean</a>** 4.2@Autowired@Value后置处理器 **中给工厂设置了 <code> &lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;ContextAnnotationAutowireCandidateResolver&lt;/font&gt;</code>类,来深入了解一下吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;JAVA_HOME&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String home;</span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 JAVA_HOME 由系统环境变量填充,18 为整型。</p><p>解析 <code>@Value</code>需要两步:</p><ol><li>获取 <code>@Value</code>注解中的值</li><li>解析属性值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A46</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个新的AnnotationConfigApplicationContext，从给定的组件类中派生bean定义，并自动刷新上下文。</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> componentClasses 一个或多个组件类，例如<span class="doctag">@Configuration</span>类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A46.class);        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">        <span class="type">ContextAnnotationAutowireCandidateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>();</span><br><span class="line">        beanFactory.setAutowireCandidateResolver(resolver);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">home</span> <span class="operator">=</span> Bean1.class.getDeclaredField(<span class="string">&quot;home&quot;</span>);</span><br><span class="line">        text1(home, resolver, context);</span><br><span class="line">        <span class="comment">// text2(Bean1.class.getDeclaredField(&quot;age&quot;), resolver, context);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">text1</span><span class="params">(Field field, ContextAnnotationAutowireCandidateResolver resolver, AnnotationConfigApplicationContext context)</span> &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dependencyDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(field, Boolean.FALSE);</span><br><span class="line">        <span class="comment">//获取@Value的内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resolver.getSuggestedValue(dependencyDescriptor).toString();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//解析$&#123;&#125;</span></span><br><span class="line">        value= context.getEnvironment().resolvePlaceholders(value);</span><br><span class="line"></span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;JAVA_HOME&#125;</span><br><span class="line">D:\software\work\jdk\jdk8\jdk</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">text2</span><span class="params">(Field field, ContextAnnotationAutowireCandidateResolver resolver, AnnotationConfigApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="type">DependencyDescriptor</span> <span class="variable">dependencyDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(field, Boolean.FALSE);</span><br><span class="line">    <span class="comment">//获取@Value的内容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resolver.getSuggestedValue(dependencyDescriptor).toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;@Value 的 value 属性值: &quot;</span> + value);</span><br><span class="line">    <span class="comment">//解析$&#123;&#125;</span></span><br><span class="line">    value= context.getEnvironment().resolvePlaceholders(value);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;解析得到的值: &quot;</span> + value);</span><br><span class="line">    System.out.println(<span class="string">&quot;解析得到的值的类型: &quot;</span> + value.getClass());</span><br><span class="line">    <span class="comment">//此处 Spring中有两套转换接口,TypeConverter是底层的只做类型转换不做数据绑定的,而PropertyEditor是做数据绑定的（23讲未完成）</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">age</span> <span class="operator">=</span> context.getBeanFactory().getTypeConverter().convertIfNecessary(value, dependencyDescriptor.getDependencyType());</span><br><span class="line">    System.out.println(<span class="string">&quot;转换后的类型: &quot;</span> + age.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span> 的 value 属性值: <span class="number">18</span></span><br><span class="line">解析得到的值: <span class="number">18</span></span><br><span class="line">解析得到的值的类型: <span class="keyword">class</span> <span class="title class_">java</span>.lang.String</span><br><span class="line">转换后的类型: <span class="keyword">class</span> <span class="title class_">java</span>.lang.Integer</span><br></pre></td></tr></table></figure><h2 id="EL表达式的解析"><a href="#EL表达式的解析" class="headerlink" title="EL表达式的解析"></a>EL表达式的解析</h2><p><code>@Value</code> 里面还可以写 EL表达式: <code>@Value(&quot;#&#123;@bean3&#125;&quot;)</code>,表示根据名称找到 bean3 的 bean 同 <code>@Autowired</code></p><p>EL 表达式全称:SpringEL ,简称:SpEL, 用于 <code>#&#123;&#125;</code> 之间</p><p>新建如下几个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;@bean3&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Bean3 bean3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;bean3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;&#x27;hello, &#x27; + &#x27;$&#123;JAVA_HOME&#125;&#x27;&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果继续使用 test2() 方法解析 Bean2 中的 @Value 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// --snip--</span></span><br><span class="line">   text2(Bean2.class.getDeclaredField(<span class="string">&quot;bean3&quot;</span>), resolver, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会出现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Value 的 value 属性值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值的类型: class java.lang.String</span><br><span class="line">Failed to convert value of type &#x27;java.lang.String&#x27; to required type &#x27;dai.dawang.sundy.a46Value注解的原理.A46$Bean3&#x27;; Cannot convert value of type &#x27;java.lang.String&#x27; to required type &#x27;dai.dawang.sundy.a46Value注解的原理.A46$Bean3&#x27;: no matching editors or conversion strategy found</span><br></pre></td></tr></table></figure><p>是最后一步类型转换出错, 无法将 <code>String</code>转换为 <code>A46$Bean3</code>。</p><p>为了解析成功,需要在转换前解析 EL 表达式 <code>#&#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">//text2(Bean2.class.getDeclaredField(&quot;bean3&quot;), resolver, context);</span></span><br><span class="line">    test3(context, resolver, Bean2.class.getDeclaredField(<span class="string">&quot;bean3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    text3(Bean4.class.getDeclaredField(<span class="string">&quot;value&quot;</span>), resolver, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取<span class="doctag">@Value</span>中EL表达式的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resolver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">text3</span><span class="params">(Field field, ContextAnnotationAutowireCandidateResolver resolver, AnnotationConfigApplicationContext context)</span> &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dependencyDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(field, Boolean.FALSE);</span><br><span class="line">        <span class="comment">//获取@Value的内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resolver.getSuggestedValue(dependencyDescriptor).toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;@Value 的 value 属性值: &quot;</span> + value);</span><br><span class="line">        <span class="comment">//解析$&#123;&#125;</span></span><br><span class="line">        value= context.getEnvironment().resolvePlaceholders(value);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析得到的值: &quot;</span> + value);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析得到的值的类型: &quot;</span> + value.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">        <span class="comment">//解析#&#123;&#125;,解析EL表达式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean3</span> <span class="operator">=</span> beanFactory.getBeanExpressionResolver().evaluate(value, <span class="keyword">new</span> <span class="title class_">BeanExpressionContext</span>(beanFactory, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型转换</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> beanFactory.getTypeConverter().convertIfNecessary(bean3,dependencyDescriptor.getDependencyType() );</span><br><span class="line">        System.out.println(<span class="string">&quot;转换后的类型: &quot;</span> + result.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Value 的 value 属性值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值的类型: class java.lang.String</span><br><span class="line">转换后的类型: class dai.dawang.sundy.a46Value注解的原理.A46$Bean3</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">@Value 的 value 属性值: #&#123;&#x27;hello, &#x27; + &#x27;$&#123;JAVA_HOME&#125;&#x27;&#125;</span><br><span class="line">解析得到的值: #&#123;&#x27;hello, &#x27; + &#x27;D:\software\work\jdk\jdk8\jdk&#x27;&#125;</span><br><span class="line">解析得到的值的类型: class java.lang.String</span><br><span class="line">转换后的类型: class java.lang.String</span><br></pre></td></tr></table></figure><h1 id="47-Autowired-注入底层"><a href="#47-Autowired-注入底层" class="headerlink" title="47 .  @Autowired 注入底层"></a>47 .  @Autowired 注入底层</h1><p><code>@Autowired</code>注解可以注入 </p><ul><li>成员变量注入</li><li>参数类型注入</li><li>结果包装为 <code>Optional</code></li><li>结果包装为 <code>ObjectProvider</code></li><li>对 <code>@Lazy</code> 的处理</li></ul><p>创建如下 bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Bean2&gt; bean3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;Bean2&gt; bean4;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;bean2&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备好环境:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A47_1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">@Autowired</span>不同类型注入的原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A47_1</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_1.class);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h2><h3 id="按成员变量类注入"><a href="#按成员变量类注入" class="headerlink" title="按成员变量类注入"></a>按成员变量类注入</h3><p>实现来解析 </p><ul><li>成员变量注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> Bean2 bean2</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_1.class);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.按成员变量的类型注入</span></span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dependencyDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Bean1.class.getDeclaredField(<span class="string">&quot;bean2&quot;</span>), Boolean.FALSE);</span><br><span class="line">        System.out.println(beanFactory.doResolveDependency(dependencyDescriptor, <span class="string">&quot;bean1&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.sundy.a47Autowired注解原理.A47_1$Bean2@33990a0c</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="按参数类型注入"><a href="#按参数类型注入" class="headerlink" title="按参数类型注入"></a>按参数类型注入</h3><p>解析</p><ul><li>参数类型注入</li></ul><p>参数类型注入是方法,所以需要获取 <code>Method</code>类,构造 <code>DependencyDescriptor</code>时需要调用 方法或构造函数参数创建新的描述符的构造方法 ,使用到 <code>MethodParameter</code>参数,。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">        <span class="comment">//2.按参数类型注入</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setBean2</span> <span class="operator">=</span> Bean1.class.getDeclaredMethod(<span class="string">&quot;setBean2&quot;</span>, Bean2.class);</span><br><span class="line">        dependencyDescriptor = <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(<span class="keyword">new</span> <span class="title class_">MethodParameter</span>(setBean2, <span class="number">0</span>), Boolean.FALSE);</span><br><span class="line">        System.out.println(beanFactory.doResolveDependency(dependencyDescriptor, <span class="string">&quot;bean2&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.sundy.a47Autowired注解原理.A47_1$Bean2@33990a0c</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="包装为-Optional"><a href="#包装为-Optional" class="headerlink" title="包装为 Optional&lt;Bean2&gt;"></a>包装为 <code>Optional&lt;Bean2&gt;</code></h3><p>解析</p><ul><li>结果包装为 <code>Optional</code></li></ul><p>由于真正的类型是 <code>Optional</code> 的泛型 <code>Bean2</code>,需要调用 <code> dependencyDescriptor#increaseNestingLevel()</code>方法 获取嵌套内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Optional&lt;Bean2&gt; bean3;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">        <span class="comment">// 3. 结果包装为 Optional&lt;Bean2&gt;</span></span><br><span class="line">        dependencyDescriptor = <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Bean1.class.getDeclaredField(<span class="string">&quot;bean3&quot;</span>), Boolean.FALSE);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.equals(Optional.class, dependencyDescriptor.getDependencyType())) &#123;</span><br><span class="line">            dependencyDescriptor.increaseNestingLevel();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> beanFactory.doResolveDependency(dependencyDescriptor, <span class="string">&quot;bean3&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(Optional.ofNullable(result));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional[dai.dawang.sundy.a47Autowired注解原理.A47_1$Bean2@33990a0c]</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>注入 <code>Optional</code>对象直接使用 <code>@Autowired(require=false)</code>的作用是一样的,</p><p>当容器不存在目标 bean 对象时,不会抛出 <code>NoSuchBeanDefinitionException</code>异常。</p><h3 id="包装为-ObjectFactory"><a href="#包装为-ObjectFactory" class="headerlink" title="包装为 ObjectFactory&lt;Bean2&gt;"></a>包装为 <code>ObjectFactory&lt;Bean2&gt;</code></h3><p>解析</p><ul><li>结果包装为 <code>ObjectFactory</code></li></ul><p>注入  <code>ObjectFactory&lt;Bean2&gt;</code>类型的对象与注入与 <code>Optional&lt;Bean2&gt;</code> 类型的对象类似，只不过 <code>ObjectFactory</code> 提供了<font style="color:#DF2A3F;"> 延迟注入</font> 的能力。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1727748203919-4d8d0c7b-cf2a-4185-922c-09ce5424c871.png"></p><p>源码的注释上说明了 <code>ObjectFactory</code>与 <code>FactoryBean</code>的区别</p><ol><li>接口定义:</li></ol><ul><li><code>FactoryBean</code>提供三个方法<font style="background-color:rgba(255, 255, 255, 0);">getObject()、getObjectType()、isSingleton()</font></li><li><font style="background-color:rgba(255, 255, 255, 0);"></font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;ObjectFactory&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">只有一个方法getObject()</font></li></ul><ol start="2"><li>使用创建</li></ol><ul><li><code>FactoryBean</code>用于复杂的 bean 创建</li><li><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;ObjectFactory&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">用于简单的对象创建和依赖注入</font></li></ul><ol start="3"><li>Spring 集成</li></ol><ul><li><code>FactoryBean</code>是 Spring 框架的一部分,广泛用于 Bean 的管理与创建</li><li><code>ObjectFactory</code>用于依赖注入,特别在自定义的工厂类只</li></ul><p><code>ObjectFactory</code>有个子类 <code>ObjectProvider</code>, 提供了安全注入功能,当容器不存在目标 Bean 时,不会抛出 <code>NoSuchBeanDefinitionException</code>异常。</p><p><code>ObjectProvider#getIfAvailable()</code>方法获取不存在的 Bean 时,不会抛出异常,而是返回 null。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1727748927406-619ed6c6-4831-4119-8018-0c04b04f9528.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1727749056638-ad1a2bce-a44a-4413-9429-e1d45afa590a.png"></p><p>当然 <code>ObjectFactory</code> 的子类 <code>ObjectProvider</code> 也提供了 <font style="color:#DF2A3F;"> 延迟注入</font> 的能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ObjectFactory&lt;Bean2&gt; bean4;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">        <span class="comment">// 4. 结果包装为 ObjectProvider,ObjectFactory</span></span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Bean1.class.getDeclaredField(<span class="string">&quot;bean4&quot;</span>), Boolean.FALSE);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.equals(ObjectFactory.class, dd.getDependencyType())) &#123;</span><br><span class="line">            dd.increaseNestingLevel();</span><br><span class="line">            <span class="type">ObjectFactory</span> <span class="variable">objectFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                    <span class="keyword">return</span> beanFactory.doResolveDependency(dd, <span class="string">&quot;bean4&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            System.out.println(objectFactory.getObject());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.sundy.a47Autowired注解原理.A47_1$Bean2@33990a0c</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="对-Lazy-的处理"><a href="#对-Lazy-的处理" class="headerlink" title="对@Lazy 的处理"></a>对@Lazy 的处理</h3><ul><li>对 <code>@Lazy</code> 的处理</li></ul><p><code>@Lazy</code>注解可以加在方法上,也可以加在成员变量上</p><p>作用是: 创建一个代理对象,访问代理对象的方法时 才会获取 真实的 Target 对象</p><p>目的是: 延迟 Target 对象的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">private</span> Bean2 bean2;</span><br></pre></td></tr></table></figure><p>将 <code>@Lazy</code> 添加到 Bean2 上后,注入的对象就不在是 Bean2 ,而是由 <code>@Lazy</code> 创建的代理对象。</p><p>所以不能使用 <code>DefaultListableBeanFactory</code>的 <code>doResolveDependency()</code> 方法来获取注入的对象。</p><p><code>ContextAnnotationAutowireCandidateResolver</code>不仅可以解析 <code>@Value</code>注解 还可以解析<code>@Lazy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">// 5. 对 @Lazy 的处理</span></span><br><span class="line">    dependencyDescriptor = <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Bean1.class.getDeclaredField(<span class="string">&quot;bean2&quot;</span>), Boolean.FALSE);</span><br><span class="line">    <span class="type">ContextAnnotationAutowireCandidateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>();</span><br><span class="line">    resolver.setBeanFactory(beanFactory);</span><br><span class="line">    <span class="comment">// 根据 @Lazy 创建代理对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> resolver.getLazyResolutionProxyIfNecessary(dependencyDescriptor, <span class="string">&quot;bean1&quot;</span>);</span><br><span class="line">    System.out.println(proxy);</span><br><span class="line">    System.out.println(proxy.getClass());</span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.sundy.a47Autowired注解原理.A47_1$Bean2@33990a0c</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dai</span>.dawang.sundy.a47Autowired注解原理.A47_1$Bean2$$SpringCGLIB$$<span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>发现控制台打印的类型 已经是被 <code>CGLIB</code>增强后的对象</p><h3 id="类型注入总结resolveDependency"><a href="#类型注入总结resolveDependency" class="headerlink" title="类型注入总结resolveDependency()"></a>类型注入总结resolveDependency()</h3><p><code>Optional</code> 类型、<code>ObjectFactory</code> 类型、<code>ObjectProvider</code> 类型、JSR-330 提供的类型的注入逻辑可在 <code>DefaultListableBeanFactory#resolveDependency()</code> 方法中看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveDependency</span><span class="params">(DependencyDescriptor descriptor,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Nullable</span> String requestingBeanName,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Nullable</span> Set&lt;String&gt; autowiredBeanNames,</span></span><br><span class="line"><span class="params">                                <span class="meta">@Nullable</span> TypeConverter typeConverter)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    descriptor.initParameterNameDiscovery(getParameterNameDiscoverer());</span><br><span class="line">    <span class="keyword">if</span> (Optional.class == descriptor.getDependencyType()) &#123;</span><br><span class="line">        <span class="comment">// 对 Optional 的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ObjectFactory.class == descriptor.getDependencyType() ||</span><br><span class="line">            ObjectProvider.class == descriptor.getDependencyType()) &#123;</span><br><span class="line">        <span class="comment">// 对 ObjectFactory、ObjectProvider 的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (javaxInjectProviderClass == descriptor.getDependencyType()) &#123;</span><br><span class="line">        <span class="comment">// 对 JSR-330 提供的类型的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="doResolveDependency-方法原理"><a href="#doResolveDependency-方法原理" class="headerlink" title="doResolveDependency 方法原理"></a>doResolveDependency 方法原理</h2><p>通过上面的例子发现, 都需要进入 <code>beanFactory#doResolveDependency()</code>方法,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Service[] serviceArray;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;Service&gt; serviceList;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ConfigurableApplicationContext applicationContext;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="meta">@Qualifier(&quot;service2&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Service service;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Dao&lt;Teacher&gt; dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Dao</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component(&quot;dao1&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Dao1</span> <span class="keyword">implements</span> <span class="title class_">Dao</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component(&quot;dao2&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Dao2</span> <span class="keyword">implements</span> <span class="title class_">Dao</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component(&quot;service1&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service1</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component(&quot;service2&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service2</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component(&quot;service3&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service3</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A47_2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过A47_1各个类型的注入方式, 发现底层都是进入了beanfactory#doResolveDependency()方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A47_2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_2.class);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A47_2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_2.class);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">        testArray(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doResolveDependency方法底层解析 数组类型的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArray</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Target.class.getDeclaredField(<span class="string">&quot;serviceArray&quot;</span>), Boolean.FALSE);</span><br><span class="line">        <span class="comment">//getDependencyType()确定包装参数/字段的声明（非泛型）类型</span></span><br><span class="line">        <span class="keyword">if</span> (dd1.getDependencyType().isArray()) &#123;</span><br><span class="line">            <span class="comment">//获取数组中元素的类型</span></span><br><span class="line">            Class&lt;?&gt; componentType = dd1.getDependencyType().getComponentType();</span><br><span class="line">            System.out.println(<span class="string">&quot;componentType&quot;</span> + componentType);</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">            <span class="comment">//包括祖先在内的类型的bean名称</span></span><br><span class="line">            String[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, componentType);</span><br><span class="line"></span><br><span class="line">            ArrayList&lt;Object&gt; beans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;name: &quot;</span> + name);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> dd1.resolveCandidate(name, componentType, beanFactory);</span><br><span class="line">                beans.add(bean);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">            <span class="comment">//将集合转换为数组</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">array</span> <span class="operator">=</span> beanFactory.getTypeConverter().convertIfNecessary(beans, dd1.getDependencyType());</span><br><span class="line">            System.out.println(array);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentTypeinterface dai.dawang.sundy.a47Autowired注解原理.A47_2$Service</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">name: service3</span><br><span class="line">name: service2</span><br><span class="line">name: service1</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">[Ldai.dawang.sundy.a47Autowired注解原理.A47_2$Service;@28f3b248</span><br></pre></td></tr></table></figure><p>相关源码可在 <code>DefaultListableBeanFactory#resolveMultipleBeans()</code> 方法中看到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">resolveMultipleBeans</span><span class="params">(DependencyDescriptor descriptor, </span></span><br><span class="line"><span class="params">                                    <span class="meta">@Nullable</span> String beanName,</span></span><br><span class="line"><span class="params">                                    <span class="meta">@Nullable</span> Set&lt;String&gt; autowiredBeanNames, </span></span><br><span class="line"><span class="params">                                    <span class="meta">@Nullable</span> TypeConverter typeConverter)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; type = descriptor.getDependencyType();</span><br><span class="line">    <span class="keyword">if</span> (descriptor <span class="keyword">instanceof</span> StreamDependencyDescriptor) &#123;</span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type.isArray()) &#123;</span><br><span class="line">        <span class="comment">// 就是这里的判断</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Collection.class == type || Set.class == type || List.class == type) &#123;</span><br><span class="line">        <span class="comment">// --snip-- </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Map.class == type) &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List-类型"><a href="#List-类型" class="headerlink" title="List 类型"></a>List 类型</h3><p>注入 <code>List&lt;Service&gt;</code>类型数据的逻辑与注入 <code>Service[]</code>类型数据的逻辑类似,</p><p>只不过容器中寻找目标 Bean 不在通过数组元素类型,而是通过 List 的泛型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A47_2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_2.class);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line"><span class="comment">//        testArray(beanFactory);</span></span><br><span class="line">        testList(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doResolveDependency方法底层解析 集合类型的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Target.class.getDeclaredField(<span class="string">&quot;serviceList&quot;</span>), Boolean.FALSE);</span><br><span class="line">        <span class="comment">//getResolvableType()为包装好的参数/字段构建一个ResolvableType对象</span></span><br><span class="line">        <span class="comment">//获取泛型参数类型</span></span><br><span class="line">        Class&lt;?&gt; resolve = dd2.getResolvableType().getGeneric(<span class="number">0</span>).resolve();</span><br><span class="line"></span><br><span class="line">        String[] strings = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, resolve);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; beans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;string: &quot;</span> + string);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> dd2.resolveCandidate(string, resolve, beanFactory);</span><br><span class="line">            beans.add(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(beans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string: service3</span><br><span class="line">string: service2</span><br><span class="line">string: service1</span><br><span class="line">[dai.dawang.sundy.a47Autowired注解原理.A47_2$Service3@44821a96, dai.dawang.sundy.a47Autowired注解原理.A47_2$Service2<span class="meta">@a3d8174</span>, dai.dawang.sundy.a47Autowired注解原理.A47_2$Service1@1ba9117e]</span><br></pre></td></tr></table></figure><p>相关源码在 <code>DefaultListableBeanFactory#resolveMultipleBeans()</code> 方法中看到可以看到:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">resolveMultipleBeans</span><span class="params">(DependencyDescriptor descriptor, </span></span><br><span class="line"><span class="params">                                    <span class="meta">@Nullable</span> String beanName,</span></span><br><span class="line"><span class="params">                                    <span class="meta">@Nullable</span> Set&lt;String&gt; autowiredBeanNames, </span></span><br><span class="line"><span class="params">                                    <span class="meta">@Nullable</span> TypeConverter typeConverter)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; type = descriptor.getDependencyType();</span><br><span class="line">    <span class="keyword">if</span> (descriptor <span class="keyword">instanceof</span> StreamDependencyDescriptor) &#123;</span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type.isArray()) &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Collection.class == type || Set.class == type || List.class == type) &#123;</span><br><span class="line">        <span class="comment">// 就是这里的判断</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Map.class == type) &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊类型-ConfigurableApplicationContext"><a href="#特殊类型-ConfigurableApplicationContext" class="headerlink" title="特殊类型 ConfigurableApplicationContext"></a>特殊类型 ConfigurableApplicationContext</h3><p><a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/ok0ut8l5dcd0u82r">黑马四十九讲容器与Bean</a>的** 1.1 ****<font style="background-color:rgba(255, 255, 255, 0);">什么是 BeanFactory </font>**<font style="background-color:rgba(255, 255, 255, 0);">中, 说明了 Spring 容器中所有的</font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">单例 Bean 对象</font><font style="background-color:rgba(255, 255, 255, 0);">都在</font></p><p><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;DefaultListableBeanFactory&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">的父类 </font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;DefaultSingletonBeanRegistry&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">的成员变量 </font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;singletonObjects&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);"> 在:</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1727768017254-384c3462-ad7f-4c0a-9bbd-e5c2fd888737.png"></p><p>类似的 <code>ApplicationContext</code>、<code>Beanfactory</code>对象是放在 <code>DefaultListableBeanFactory</code>的 <code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;resolvableDependencies&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">:</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1727768355438-66521ed5-b0b3-408a-9aa3-a09d7d32830c.png"></p><p>这些<font style="color:#DF2A3F;">特殊对象</font>是在调用 <code>ApplicationContext</code>的 <code>refresh()</code>方法时添加到 <code>resolvableDependencies</code>成员变量中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line"><span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class="line"><span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class="line">beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="built_in">this</span>);</span><br><span class="line">beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="built_in">this</span>);</span><br><span class="line">beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在此注入诸如 <code>ConfigurableApplicationContext</code>特殊类型的对象时, 不能直接使用 <code>getBean()</code>获取,而是从 <code>resolvableDependencies</code>集合中获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A47_2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException ,IllegalAccessException&#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_2.class);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line"><span class="comment">//        testArray(beanFactory);</span></span><br><span class="line"><span class="comment">//        testList(beanFactory);</span></span><br><span class="line">        testApplicationContext(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doResolveDependency方法底层解析 特殊类型的获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGenericParadigm</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Target.class.getDeclaredField(<span class="string">&quot;dao&quot;</span>), Boolean.FALSE);</span><br><span class="line">        <span class="comment">//包括祖先在内的类型的bean名称</span></span><br><span class="line">        String[] strings = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, dd.getDependencyType());</span><br><span class="line">        <span class="comment">//想不到吧, 我ContextAnnotationAutowireCandidateResolver又回来了, 标记3</span></span><br><span class="line">        <span class="type">ContextAnnotationAutowireCandidateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>();</span><br><span class="line">        resolver.setBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;string: &quot; + string);</span></span><br><span class="line">            <span class="comment">//获取包含父BeanDefinition合并后的BeanDefinition</span></span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanFactory.getMergedBeanDefinition(string);</span><br><span class="line">            <span class="comment">//判断某个BeanDefinition 是否为候选者</span></span><br><span class="line">            <span class="keyword">if</span> (resolver.isAutowireCandidate(<span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDefinition, string),dd)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;beanName: &quot;</span> + string);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.support.DefaultListableBeanFactory@3d121db3: defining beans</span><br><span class="line">[org.springframework.context.annotation.internalConfigurationAnnotationProcessor,</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor,</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor,</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor,</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory,</span><br><span class="line">a47_2,service3,service2,service1,dao2,dao1]; </span><br><span class="line">root of factory hierarchy</span><br></pre></td></tr></table></figure><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><p>容器中 <code>Dao</code>类型的 Bean 有多个,而依赖注入的是 <code>Dao&lt;Teacher&gt;</code>类型的对象, 所以需要判断容器中的 Bean 对象泛型类型是否为指定类型。</p><p>可以使用 <code>ContextAnnotionAutowireCandidateResolver</code>的 <code>isAutowireCandidate()</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doResolveDependency方法底层解析 泛型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGenericParadigm</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Target.class.getDeclaredField(<span class="string">&quot;dao&quot;</span>), Boolean.FALSE);</span><br><span class="line">        <span class="comment">//包括祖先在内的类型的bean名称</span></span><br><span class="line">        String[] strings = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, dd.getDependencyType());</span><br><span class="line">        <span class="comment">//想不到吧, 我ContextAnnotationAutowireCandidateResolver又回来了, 标记3</span></span><br><span class="line">        <span class="type">ContextAnnotationAutowireCandidateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>();</span><br><span class="line">        resolver.setBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;string: &quot; + string);</span></span><br><span class="line">            <span class="comment">//获取包含父BeanDefinition合并后的BeanDefinition</span></span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanFactory.getMergedBeanDefinition(string);</span><br><span class="line">            <span class="comment">//判断某个BeanDefinition 是否为候选者</span></span><br><span class="line">            <span class="keyword">if</span> (resolver.isAutowireCandidate(<span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDefinition, string),dd)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;beanName: &quot;</span> + string);</span><br><span class="line">                <span class="comment">//解析依赖关系，根据候选者名称和类型选择合适的Bean实例</span></span><br><span class="line">                System.out.println(dd.resolveCandidate(string, dd.getDependencyType(), beanFactory));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beanName: dao2</span><br><span class="line">dai.dawang.sundy.a47Autowired注解原理.A47_2$Dao2@5403f35f</span><br></pre></td></tr></table></figure><h3 id="解析-Qualifier-注解"><a href="#解析-Qualifier-注解" class="headerlink" title="解析@Qualifier 注解"></a>解析@Qualifier 注解</h3><p>当容器中存在多个相同类型的 Bean 对象, 在依赖注入时可以使用 <code>@Qualifier</code>注解指定需要注入的 Bean 对象名称, </p><p>判断逻辑同样使用 <code>ContextAnnotationAutowireCandidateResolver</code>的 <code>isAutowireCandidate</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doResolveDependency方法底层解析 <span class="doctag">@Qualifier</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testQualifier</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> NoSuchFieldException&#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Target.class.getDeclaredField(<span class="string">&quot;service&quot;</span>), Boolean.FALSE);</span><br><span class="line">        String[] strings = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, dd.getDependencyType());</span><br><span class="line"></span><br><span class="line">        <span class="type">ContextAnnotationAutowireCandidateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>();</span><br><span class="line">        resolver.setBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;string: &quot; + string);</span></span><br><span class="line">            <span class="comment">//判断某个BeanDefinition 是否为候选者                                                                            @Qualifier(&quot;service2&quot;)</span></span><br><span class="line">            <span class="keyword">if</span> (resolver.isAutowireCandidate(<span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanFactory.getMergedBeanDefinition(string),string), dd)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;string: &quot;</span> + string);</span><br><span class="line">                <span class="comment">//解析依赖关系，根据候选者名称和类型选择合适的Bean实例</span></span><br><span class="line">                System.out.println(dd.resolveCandidate(string, dd.getDependencyType(), beanFactory));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tstring: service2</span><br><span class="line">dai.dawang.sundy.a47Autowired注解原理.A47_2$Service2@be35cd9</span><br></pre></td></tr></table></figure><h3 id="解析-Primary-注解"><a href="#解析-Primary-注解" class="headerlink" title="解析@Primary 注解"></a>解析@Primary 注解</h3><p>当容器中有多个相同类型的 Bean 对象时, 在执行依赖注入时除了可以使用 <code>@Qualifier</code>注解外,</p><p>还可以在被注入的 Bean 对象所在的类上添加 <code>@Primary</code>注解, 指定依赖注入时使用的主要 Bean 对象。</p><p>如果 Bean 对象所在的类被 <code>@Primary</code>注解标记,在构造 <code>BeanDefinition</code>时会记录这个信息。</p><p>通常情况, <code>@Primary</code>注解只有一个作用在相同类型的 Bean 上,存在多个时, Spring 会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target1</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;service1&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service1</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Component(&quot;service2&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service2</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;service3&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service3</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_3.class);</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">    testPrimary(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPrimary</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> NoSuchFieldException&#123;</span><br><span class="line">    <span class="type">DependencyDescriptor</span> <span class="variable">dd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Target1.class.getDeclaredField(<span class="string">&quot;service&quot;</span>), Boolean.FALSE);</span><br><span class="line">    String[] strings = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, dd1.getDependencyType());</span><br><span class="line">    <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory.getMergedBeanDefinition(string).isPrimary()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;string: &quot;</span> + string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string: service2</span><br></pre></td></tr></table></figure><h3 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h3><p>当容器存在多个相同类型的 Bean 对象时, 除了使用 <code>@Qualifier</code>或 <code>@Primary</code>注解外,</p><p><code>@Autowired</code>注解还支持按照 成员变量名称进行匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target2</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service service3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;service1&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service1</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Component(&quot;service2&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service2</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;service3&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Service3</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A47_3.class);</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">    <span class="comment">//testPrimary(beanFactory);</span></span><br><span class="line">    testDefault(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDefault</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">    <span class="type">DependencyDescriptor</span> <span class="variable">dd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(Target2.class.getDeclaredField(<span class="string">&quot;service3&quot;</span>), Boolean.FALSE);</span><br><span class="line">    String[] strings = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, dd2.getDependencyType());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.equals(string, dd2.getDependencyName()))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;string: &quot;</span> + string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string: service3</span><br></pre></td></tr></table></figure><h1 id="48-事件-监听器"><a href="#48-事件-监听器" class="headerlink" title="48 . 事件 - 监听器"></a>48 . 事件 - 监听器</h1><h2 id="48-1-监听器的实现"><a href="#48-1-监听器的实现" class="headerlink" title="48 .1 监听器的实现"></a>48 .1 监听器的实现</h2><h3 id="实现-ApplicationListener-类方式"><a href="#实现-ApplicationListener-类方式" class="headerlink" title="实现 ApplicationListener 类方式"></a>实现 ApplicationListener 类方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A48_1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 监听器的实现 implements ApplicationListener&lt;Event&gt;方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/10/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A48_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A48_1.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        bean.doBusiness();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Event</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(MyService source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;执行业务逻辑&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>));</span><br><span class="line">            <span class="comment">//            log.info(&quot;发送短信&quot;);</span></span><br><span class="line">            <span class="comment">//            log.info(&quot;发送邮件&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;Event&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;Event&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;发送邮件成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">42</span>:<span class="number">23.975</span> [main] INFO dai.dawang.sundy.a48监听器.A48_1 -- 执行业务逻辑</span><br><span class="line"><span class="number">10</span>:<span class="number">42</span>:<span class="number">23.984</span> [main] INFO dai.dawang.sundy.a48监听器.A48_1 -- 发送邮件成功</span><br><span class="line"><span class="number">10</span>:<span class="number">42</span>:<span class="number">23.984</span> [main] INFO dai.dawang.sundy.a48监听器.A48_1 -- 短信发送成功</span><br></pre></td></tr></table></figure><h3 id="EventListener-注解方式"><a href="#EventListener-注解方式" class="headerlink" title="@EventListener 注解方式"></a>@EventListener 注解方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A48_2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 监听器的实现 <span class="doctag">@EventListener</span>方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/10/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A48_2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A48_2.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        bean.doBusiness();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Event</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(MyService source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;执行业务逻辑&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>));</span><br><span class="line"><span class="comment">//            log.info(&quot;发送短信&quot;);</span></span><br><span class="line"><span class="comment">//            log.info(&quot;发送邮件&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsEventListener</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailEventListener</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;发送邮件成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">34</span>:<span class="number">46.602</span> [main] INFO dai.dawang.sundy.a48监听器.A48_2 -- 执行业务逻辑</span><br><span class="line"><span class="number">10</span>:<span class="number">34</span>:<span class="number">48.767</span> [main] INFO dai.dawang.sundy.a48监听器.A48_2 -- 发送邮件成功</span><br><span class="line"><span class="number">10</span>:<span class="number">34</span>:<span class="number">48.767</span> [main] INFO dai.dawang.sundy.a48监听器.A48_2 -- 短信发送成功</span><br></pre></td></tr></table></figure><h3 id="线程池异步方法"><a href="#线程池异步方法" class="headerlink" title="线程池异步方法"></a>线程池异步方法</h3><p><code>ApplicationEventPublisher</code> 底层是用了 <code>SimpleApplicationEventMulticaster</code>来发布事件,</p><p> <code>SimpleApplicationEventMulticaster</code> 默认是单线程 即 不异步,</p><p>配置一个新线程池就可以多线程异步发送事件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1728189947175-f2003bfa-e0ce-4abb-97f6-ac5b7efdf356.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A48_3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 监听器的实现 线程池异步实现</span></span><br><span class="line"><span class="comment"> * ApplicationEventPublisher底层是用了ApplicationEventMulticaster</span></span><br><span class="line"><span class="comment"> * ApplicationEventMulticaster默认是单线程,配置一个新线程池就可以多线程异步发送事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/10/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A48_3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A48_3.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        bean.doBusiness();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Event</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(MyService source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;主线&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;Event&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailEventListener</span>&#123;</span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;邮箱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个线程池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">executor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>, TimeUnit.MINUTES,<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bean的名字必须是 applicationEventMulticaster 才能走线程池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(ThreadPoolExecutor executor)</span>&#123;</span><br><span class="line">        <span class="type">SimpleApplicationEventMulticaster</span> <span class="variable">multicaster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>();</span><br><span class="line">        <span class="comment">//使用线程池异步发送事件</span></span><br><span class="line">        multicaster.setTaskExecutor(executor);</span><br><span class="line">        <span class="keyword">return</span> multicaster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">39.670</span> [main] INFO dai.dawang.sundy.a48监听器.A48_3 -- 主线</span><br><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">39.675</span> [pool-<span class="number">1</span>-thread-<span class="number">1</span>] INFO dai.dawang.sundy.a48监听器.A48_3 -- 短信</span><br><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">39.675</span> [pool-<span class="number">1</span>-thread-<span class="number">2</span>] INFO dai.dawang.sundy.a48监听器.A48_3 -- 邮箱</span><br></pre></td></tr></table></figure><h3 id="Async-实现异步事件"><a href="#Async-实现异步事件" class="headerlink" title="@Async 实现异步事件"></a>@Async 实现异步事件</h3><p>在监听器 上添加 <code>@Async</code>注解 与 <code>@EnableAsync</code>  可实现异步事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listener</span><span class="params">(MyEvent myEvent)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listener</span><span class="params">(MyEvent myEvent)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAsync</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestAsync.class);</span><br><span class="line">        context.getBean(MyService.class).doBusiness();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">executor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">3</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用 <code>@EnableAsync</code>注解时,指定 <code>proxyTargetClass</code>属性值为<code>true</code>, 采用 CGLib 动态代理,</p><p>避免 监听器类实现接口 而监听器方法又未在基类声明导致默认的 JDK 动态代理失败。</p><h2 id="48-2-EventListener-注解的原理"><a href="#48-2-EventListener-注解的原理" class="headerlink" title="48.2 EventListener 注解的原理"></a>48.2 EventListener 注解的原理</h2><p>自定义 @MyListener 注解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dai.dawang.sundy.a48监听器;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.SimpleApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EventListener注解原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/10/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventListener</span>注解原理 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(EventListener注解原理.class);</span><br><span class="line">        <span class="type">EmailListener</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(EmailListener.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : EmailListener.class.getMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyListener.class)) &#123;</span><br><span class="line">                ApplicationListener&lt;Event&gt; applicationListener = event -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        method.invoke(bean, event);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">//给容器添加监听器</span></span><br><span class="line">                context.addApplicationListener(applicationListener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.getBean(MyService.class).doBusiness();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Event</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(MyService source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;主线&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;Event&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信监听器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailListener</span> &#123;</span><br><span class="line">        <span class="meta">@MyListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123; <span class="comment">// 修改这里</span></span><br><span class="line">            log.info(<span class="string">&quot;邮箱监听器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">executor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">        <span class="type">SimpleApplicationEventMulticaster</span> <span class="variable">multicaster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>();</span><br><span class="line">        multicaster.setTaskExecutor(executor);</span><br><span class="line">        <span class="keyword">return</span> multicaster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> MyListener &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11:51:04.572 [main] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 主线</span><br><span class="line">11:51:04.582 [pool-1-thread-1] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 短信监听器</span><br><span class="line">11:51:04.582 [pool-1-thread-2] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 邮箱监听器</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式的类型转换问题"><a href="#Lambda-表达式的类型转换问题" class="headerlink" title="Lambda 表达式的类型转换问题"></a>Lambda 表达式的类型转换问题</h3><p>如下两个 Lambda 有什么不同呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// --snip--</span></span><br><span class="line">             <span class="comment">//直接定义为ApplicationListener&lt;Event&gt;</span></span><br><span class="line">             ApplicationListener&lt;Event&gt; applicationListener = event -&gt; &#123;</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                     method.invoke(bean, event);</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;;</span><br><span class="line">     <span class="comment">// --snip--</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12:09:53.612 [main] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 主线</span><br><span class="line">12:09:53.621 [pool-1-thread-1] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 短信监听器</span><br><span class="line">12:09:53.621 [pool-1-thread-2] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 邮箱监听器</span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">//强转为ApplicationListener</span></span><br><span class="line">    ApplicationListener&lt;Event&gt; applicationListener = (ApplicationListener)event -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method.invoke(bean, event);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">12:10:31.654 [main] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 主线</span><br><span class="line">12:10:31.663 [pool-1-thread-2] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 邮箱监听器</span><br><span class="line">12:10:31.663 [pool-1-thread-1] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 短信监听器</span><br><span class="line">Exception in thread &quot;pool-1-thread-3&quot; java.lang.RuntimeException: java.lang.IllegalArgumentException: argument type mismatch</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不用Lambda</span></span><br><span class="line">    ApplicationListener&lt;Event&gt; applicationListener = <span class="keyword">new</span> <span class="title class_">ApplicationListener</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                  method.invoke(bean, event);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                 &#125;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">12:07:30.756 [main] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 主线</span><br><span class="line">12:07:30.764 [main] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 短信监听器</span><br><span class="line">12:07:30.764 [main] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 邮箱监听器</span><br><span class="line">12:07:30.764 [main] WARN org.springframework.context.annotation.AnnotationConfigApplicationContext -- Exception thrown from ApplicationListener handling ContextClosedEvent</span><br><span class="line">java.lang.RuntimeException: java.lang.IllegalArgumentException:  method.invoke(bean, event);</span><br></pre></td></tr></table></figure><p>出现错误的根本原因是 <code>context.close();</code>时也会发送事件, 而关闭容器的事件被我们自定义的</p><p><code>ApplicationListener</code>捕抓到后, 传入了 <code> method.invoke(bean, event);</code>参数,</p><p>所以出现 <code> method.invoke(bean, event);</code>异常。</p><p>解决方法如上直接表明我们自定义的 <code>ApplicationListener</code>类型是 <code>Event</code></p><p>或者像老师<a href="https://player.bilibili.com/player.html?bvid=BV1P44y1N7QG&p=171&page=171&autoplay=0">P171里讲的</a>方法一样处理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不用Lambda</span></span><br><span class="line">    ApplicationListener&lt;Event&gt; applicationListener = <span class="keyword">new</span> <span class="title class_">ApplicationListener</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; parameterType = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (parameterType.isAssignableFrom(event.getClass())) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(bean, event);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完善自定义-MyListener-注解"><a href="#完善自定义-MyListener-注解" class="headerlink" title="完善自定义 MyListener 注解"></a>完善自定义 MyListener 注解</h3><h4 id="SmartInitializingSingleton类"><a href="#SmartInitializingSingleton类" class="headerlink" title="SmartInitializingSingleton类"></a><code>SmartInitializingSingleton</code>类</h4><p><code>SmartInitializingSingleton</code>接口是 所有的单例初始化后回调 <code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;afterSingletonsInstantiated()&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">方法</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1728190097468-c545e4f3-9cfa-4f66-b308-7347af41e19a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dai.dawang.sundy.a48监听器;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.SimpleApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EventListener注解原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/10/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventListener</span>注解原理 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(EventListener注解原理.class);</span><br><span class="line"></span><br><span class="line">        context.getBean(MyService.class).doBusiness();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SmartInitializingSingleton <span class="title function_">smartInitializingSingleton</span><span class="params">(AnnotationConfigApplicationContext context)</span>&#123;</span><br><span class="line">        <span class="comment">// Spring 中所有单例 Bean 初始化完成后调用此处理器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmartInitializingSingleton</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSingletonsInstantiated</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(beanDefinitionName);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (Method method : bean.getClass().getMethods()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (method.isAnnotationPresent(MyListener.class)) &#123;</span><br><span class="line"></span><br><span class="line">                            ApplicationListener&lt;Event&gt; applicationListener = <span class="keyword">new</span> <span class="title class_">ApplicationListener</span>() &#123;</span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">                                     System.out.println(event);</span><br><span class="line"></span><br><span class="line">                                    Class&lt;?&gt; parameterType = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                                    <span class="keyword">if</span> (parameterType.isAssignableFrom(event.getClass())) &#123;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            method.invoke(bean, event);</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;;</span><br><span class="line"></span><br><span class="line">                            context.addApplicationListener(applicationListener);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Event</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(MyService source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;主线&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;Event&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信监听器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailListener</span> &#123;</span><br><span class="line">        <span class="meta">@MyListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123; <span class="comment">// 修改这里</span></span><br><span class="line">            log.info(<span class="string">&quot;邮箱监听器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">executor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">        <span class="type">SimpleApplicationEventMulticaster</span> <span class="variable">multicaster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>();</span><br><span class="line">        multicaster.setTaskExecutor(executor);</span><br><span class="line">        <span class="keyword">return</span> multicaster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> MyListener &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">12:58:31.536 [main] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 主线</span><br><span class="line">dai.dawang.sundy.a48监听器.EventListener注解原理$Event[source=dai.dawang.sundy.a48监听器.EventListener注解原理$MyService@212d2122]</span><br><span class="line">12:58:31.541 [pool-1-thread-2] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 短信监听器</span><br><span class="line">12:58:31.542 [pool-1-thread-3] INFO dai.dawang.sundy.a48监听器.EventListener注解原理 -- 邮箱监听器</span><br><span class="line">org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@35fb3008, started on Sun Oct 06 12:58:31 CST 2024]</span><br><span class="line">org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.annotation.AnnotationConfigApplicationContext@35fb3008, started on Sun Oct 06 12:58:31 CST 2024]</span><br></pre></td></tr></table></figure><h2 id="48-3-监听器执行顺序"><a href="#48-3-监听器执行顺序" class="headerlink" title="48.3 监听器执行顺序"></a>48.3 监听器执行顺序</h2><p>当一个事件有多个对应监听器时, 监听器执行顺序是不确认的。</p><p>可以重写 <code>SmartApplicationListener#getOrder()</code> 方法指定优先级。</p><p>也可以使用 <code>@Order</code>注解指定优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: 监听器执行顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/10/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> class 监听器执行顺序 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(监听器执行顺序.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        bean.doBusiness();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;主线&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">MyEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService1</span> &#123;</span><br><span class="line">        <span class="meta">@Order(2)</span></span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listener</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信服务1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService1</span> &#123;</span><br><span class="line">        <span class="meta">@Order(1)</span></span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listener</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;邮件服务1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsService2</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyEvent&gt;, Ordered &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信服务2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailService2</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyEvent&gt;, Ordered &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyEvent event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;邮件服务2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">29</span>:<span class="number">32.913</span> [main] INFO dai.dawang.sundy.a48监听器.监听器执行顺序 -- 主线</span><br><span class="line"><span class="number">16</span>:<span class="number">29</span>:<span class="number">32.917</span> [main] INFO dai.dawang.sundy.a48监听器.监听器执行顺序 -- 邮件服务<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">29</span>:<span class="number">32.917</span> [main] INFO dai.dawang.sundy.a48监听器.监听器执行顺序 -- 短信服务<span class="number">1</span></span><br><span class="line"><span class="number">16</span>:<span class="number">29</span>:<span class="number">32.917</span> [main] INFO dai.dawang.sundy.a48监听器.监听器执行顺序 -- 短信服务<span class="number">2</span></span><br><span class="line"><span class="number">16</span>:<span class="number">29</span>:<span class="number">32.917</span> [main] INFO dai.dawang.sundy.a48监听器.监听器执行顺序 -- 邮件服务<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="48-4-带泛型的事件"><a href="#48-4-带泛型的事件" class="headerlink" title="48.4 带泛型的事件"></a>48.4 带泛型的事件</h2><p>创建一个事件类 ,接收一个泛型参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MutationEvent</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2718823625228147843L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T source;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MutationEvent</span><span class="params">(T data, String type)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(data);</span><br><span class="line">        <span class="built_in">this</span>.source = data;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ChineseHamburger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MutationEventListener</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePizza</span><span class="params">(MutationEvent&lt;Pizza&gt; event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到 Pizza...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;类型是: &quot;</span> + event.getType());</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> event.getSource();</span><br><span class="line">        System.out.println(<span class="string">&quot;Pizza 名称为: &quot;</span> + pizza.getName() </span><br><span class="line">                           + <span class="string">&quot;, 价格为: &quot;</span> + pizza.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleChineseHamburger</span><span class="params">(MutationEvent&lt;ChineseHamburger&gt; event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到肉夹馍...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;类型是: &quot;</span> + event.getType());</span><br><span class="line">        <span class="type">ChineseHamburger</span> <span class="variable">hamburger</span> <span class="operator">=</span> event.getSource();</span><br><span class="line">        System.out.println(<span class="string">&quot;肉夹馍的价格是: &quot;</span> + hamburger.getPrice() </span><br><span class="line">                           + <span class="string">&quot;, 大小是: &quot;</span> + hamburger.getSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试发布 MutationEvent<Pizza> 类型的事件，看看监听器是否能监听到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">    context.registerBean(MutationEventListener.class);</span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pizza</span>(<span class="string">&quot;NewYorkPizza&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    context.publishEvent(<span class="keyword">new</span> <span class="title class_">MutationEvent</span>&lt;&gt;(pizza, <span class="string">&quot;ONE&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛出 <code>ClassCastException</code>异常, 无法将Pizza 转换成 ChineseHamburger，事件监听失败。</p><p>需要实现 <code>ResolvableTypeProvider</code>接口,解决泛型擦除的问题</p><p>如果未实现 <code>ResolvableTypeProvider</code>接口, </p><ul><li>但是实现了 <code>ApplicationEvent</code>接口, 尽管监听器方法和发布事件时都指定了泛型参数信息, 但所有的监听器方法都执行, 还是会抛出 <code>ClassCastException</code>异常。</li><li>同时未实现 <code>ApplicationEvent</code>接口,  就算发送的泛型事件的内部对象类型 与 监听器指定泛型事件内部对象类型一样, 也不会监听成功</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MutationEvent</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> <span class="keyword">implements</span> <span class="title class_">ResolvableTypeProvider</span> &#123;</span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResolvableType <span class="title function_">getResolvableType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResolvableType.forClassWithGenerics(getClass(),</span><br><span class="line">                ResolvableType.forInstance(<span class="built_in">this</span>.source));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">监听到 Pizza...</span><br><span class="line">类型是: ONE</span><br><span class="line">Pizza 名称为: NewYorkPizza, 价格为: 25.0</span><br></pre></td></tr></table></figure><p>再发布泛型参数类型 的事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ChineseHamburger</span> <span class="variable">hamburger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChineseHamburger</span>(<span class="number">18</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line">    context.publishEvent(<span class="keyword">new</span> <span class="title class_">MutationEvent</span>&lt;&gt;(hamburger, <span class="string">&quot;TWO&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">监听到 Pizza...</span><br><span class="line">类型是: ONE</span><br><span class="line">Pizza 名称为: NewYorkPizza, 价格为: 25.0</span><br><span class="line">监听到肉夹馍...</span><br><span class="line">类型是: TWO</span><br><span class="line">肉夹馍的价格是: 18.0, 大小是: M</span><br></pre></td></tr></table></figure><h1 id="49-事件-发布器"><a href="#49-事件-发布器" class="headerlink" title="49 . 事件 - 发布器"></a>49 . 事件 - 发布器</h1><h2 id="49-1-自定义事件发布"><a href="#49-1-自定义事件发布" class="headerlink" title="49.1 自定义事件发布"></a>49.1 自定义事件发布</h2><p><code>SmartInitializingSingleton</code>的基类 <code>ApplicationEventMulticaster</code>有两个方法</p><ul><li><code>addApplicationListenerBean()</code>收集监听器, 找到所有实现了 ApplicationListener 接口的 Bean</li><li><code>multicastEvent</code>发布事件,  <code>ApplicationEventPublisher#publishEvent()</code> 方法内部就是调用 <code>multicastEvent</code></li></ul><p>监听器收集时, 需要获取监听器支持的事件类型, 将原始的监听器封装为支持事件类型检查的监听器, 发布事件时使用线程池支持异步发送。</p><p>发布事件时,遍历容器所有监听器,当监听器支持的事件类型 与 发布事件的类型一致时才发布事件。</p><p>而用@ApplicationListener 注解与 实现 ApplicationListener 接口也是有区别的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a49</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(a49.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        bean.doBusiness();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">class</span> <span class="title class_">Event</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(MyService source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusiness</span><span class="params">()</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;执行业务逻辑&quot;</span>);</span><br><span class="line">            publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现ApplicationListener方式</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SmsEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;Event&gt;&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@EventListener注解方式</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmailEventListener</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@EventListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;发送邮件成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(AnnotationConfigApplicationContext executor)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractApplicationEventMulticaster</span>()&#123;</span><br><span class="line">            <span class="comment">//收集监听器</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListenerBean</span><span class="params">(String listenerBeanName)</span> &#123;</span><br><span class="line">               System.out.println(listenerBeanName);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//发布事件</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;自定义事件发布器&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空实现</span></span><br><span class="line">     <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationEventMulticaster</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventMulticaster</span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListenerBean</span><span class="params">(String listenerBeanName)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListenerBean</span><span class="params">(String listenerBeanName)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListeners</span><span class="params">(Predicate&lt;ApplicationListener&lt;?&gt;&gt; predicate)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListenerBeans</span><span class="params">(Predicate&lt;String&gt; predicate)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllListeners</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event, ResolvableType eventType)</span> &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.sundy.a49发布器.a49$SmsEventListener</span><br><span class="line">09:<span class="number">57</span>:<span class="number">12.991</span> [main] INFO dai.dawang.sundy.a49发布器.a49 -- 执行业务逻辑</span><br></pre></td></tr></table></figure><h2 id="49-2-非-ApplicationEvent-事件"><a href="#49-2-非-ApplicationEvent-事件" class="headerlink" title="49.2 非 ApplicationEvent 事件"></a>49.2 非 ApplicationEvent 事件</h2><p>如果发送的事件不是 <code>ApplicationEvent</code>类型时 , Spring 会将其包装为 <code>PayloadApplicationEvent</code>并用泛型技术解析事件对象的原始类型。</p><p>包装为 <code>PayloadApplicationEvent</code>类型的逻辑无需实现, 直接使用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEventPublisher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestEventPublisher.class);</span><br><span class="line">        <span class="comment">//发送3个事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">        context.publishEvent(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> <span class="title class_">Bean1</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApplicationEventMulticaster <span class="title function_">applicationEventMulticaster</span><span class="params">(ConfigurableApplicationContext context, ThreadPoolTaskExecutor executor)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A49</span>.AbstractApplicationEventMulticaster() &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;GenericApplicationListener&gt; listeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            listeners.add(<span class="keyword">new</span> <span class="title class_">GenericApplicationListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (event <span class="keyword">instanceof</span> PayloadApplicationEvent) &#123;</span><br><span class="line">                        PayloadApplicationEvent&lt;?&gt; payloadApplicationEvent = </span><br><span class="line">                            (PayloadApplicationEvent&lt;?&gt;) event;</span><br><span class="line">                        System.out.println(<span class="string">&quot;被发送不是ApplicationEvent类型的事件为: &quot;</span>);</span><br><span class="line">                        System.out.println(payloadApplicationEvent.getPayload());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsEventType</span><span class="params">(ResolvableType eventType)</span> &#123;</span><br><span class="line">                    System.out.println(eventType);</span><br><span class="line">                    <span class="comment">// eventType --&gt; PayloadApplicationEvent&lt;Object&gt;</span></span><br><span class="line">                    <span class="comment">// eventType --&gt; PayloadApplicationEvent&lt;String&gt;</span></span><br><span class="line">                    <span class="keyword">return</span> (Inter.class.isAssignableFrom(eventType.getGeneric().toClass()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">            multicastEvent(event, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent event, ResolvableType eventType)</span> &#123;</span><br><span class="line">            listeners.stream().filter(applicationListener -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (eventType == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (applicationListener <span class="keyword">instanceof</span> GenericApplicationListener) &#123;</span><br><span class="line">                    <span class="type">GenericApplicationListener</span> <span class="variable">listener</span> <span class="operator">=</span> </span><br><span class="line">                        (GenericApplicationListener) applicationListener;</span><br><span class="line">                    <span class="keyword">return</span> listener.supportsEventType(eventType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;).forEach(listener -&gt; listener.onApplicationEvent(event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">executor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">3</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.event.ContextRefreshedEvent</span><br><span class="line">org.springframework.context.PayloadApplicationEvent&lt;java.lang.Object&gt;</span><br><span class="line">org.springframework.context.PayloadApplicationEvent&lt;java.lang.String&gt;</span><br><span class="line">org.springframework.context.PayloadApplicationEvent&lt;dai.dawang.sundy.a49发布器.TestEventPublisher$Bean1&gt;</span><br><span class="line">被发送不是ApplicationEvent类型的事件为: </span><br><span class="line">dai.dawang.sundy.a49发布器.TestEventPublisher$Bean1@242b836</span><br></pre></td></tr></table></figure><p>看到ContextRefreshedEvent 事件 就是 创建 <code>AnnotationConfigApplicationContext</code>时 容器初始化 发送的事件, </p><p>后面 3 行是我们在 main() 方法里发送的 3 个事件。</p><p><a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/zqprqa6z7edv6xxb#fVkym">在之前的文章里我们介绍了SpringBoot启动的流程</a> : 39.boot 启动流程 。在调用 start()方法时会发送 starting 事件、running 事件 与 failed 事件。</p><p>Spring 容器相关事件还有如下事件:</p><table><thead><tr><th align="center">事件类型</th><th>触发时机</th></tr></thead><tbody><tr><td align="center">ContextRefreshedEvent</td><td>在调用 ConfigurableApplicationContext 接口中的 refresh() 方法时触发</td></tr><tr><td align="center">ContextStartedEvent</td><td>在调用 ConfigurableApplicationContext 的 start() 方法时触发</td></tr><tr><td align="center">ContextStoppedEvent</td><td>在调用 ConfigurableApplicationContext 的 stop() 方法时触发</td></tr><tr><td align="center">ContextClosedEvent</td><td>当 ApplicationContext 被关闭时触发该事件，也就是调用 close() 方法触发</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring四十九讲Springboot</title>
      <link href="/2024/09/07/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2Springboot/"/>
      <url>/2024/09/07/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2Springboot/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a href="https://player.bilibili.com/player.html?bvid=BV1P44y1N7QG&p=120&page=120&autoplay=0">bilibili黑马四十九讲SpringBoot</a></p><h1 id="37-Boot-骨架项目"><a href="#37-Boot-骨架项目" class="headerlink" title="37.Boot 骨架项目"></a>37.Boot 骨架项目</h1><p>使用 IDEA 创建 SpringBoot 项目时，会创建出 .mvn 目录、HELP.md、mvnw 和 mvnw.cmd 等不必要的文件。</p><p><a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/ichft4exr7fpb3vg">Windows 下的Docker</a> 这篇文章里介绍了如何在 windows 下安装 WSL。</p><p>进入 WSL，并输入</p><p><code>curl -G [https://start.spring.io/pom.xml](https://start.spring.io/pom.xml) -d dependencies=web,mysql,mybatis -o pom.xml</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725523991159-c6d61622-5aaf-48ec-9c0d-c16afd7058f1.png"></p><p>查看当前目录：<code>pwd</code></p><p>手动指定路径并复制文件：</p><p> <code>cp /home/daidawang/pom.xml /mnt/c/Users/zhangzhiwei/Documents/demo</code></p><p>   <img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725524241814-bad6b082-036f-4508-9e7c-bf50a450d89c.png"></p><p>进入指定路径： <code>cd C:\Users\zhangzhiwei\Documents\demo</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725526887238-888d75a2-abd7-4a75-8676-878f5b315da3.png"></p><p>配置 idea 环境变量：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725525207686-7a3ccd54-bed2-48d9-8fe4-ce25b9af94c2.png"></p><p>将 IDEA64 变量添加到 PATH</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725525810215-3ae0d249-b255-49e3-bb5b-23905efc808d.png"></p><p>输入 <code>idea .\pom.xml</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725526952234-8caecc1e-b057-4d07-924d-17cb253c8cb8.png"></p><p>idea 根据 pom 创建项目：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725527019866-6f82da71-f1e3-486d-8fd7-eeb8162cfcb8.png">  </p><h1 id="38-构建-spring-war-项目"><a href="#38-构建-spring-war-项目" class="headerlink" title="38.构建 spring war 项目"></a>38.构建 spring war 项目</h1><h1 id="39-boot-启动流程"><a href="#39-boot-启动流程" class="headerlink" title="39.boot 启动流程"></a>39.boot 启动流程</h1><p>SpringBoot 的主启动类类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>SpringApplication#run()</code> 方法是核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> run(<span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终使用 <code>new</code> 关键字构造了 <code>SpringApplication</code> 对象,然后调用了下面非静态的 <code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, primarySources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个新的SpringApplication实例。</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="built_in">this</span>.bootstrapRegistryInitializers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">        getSpringFactoriesInstances(BootstrapRegistryInitializer.class));</span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="39-1-SpringApplication-构造分析"><a href="#39-1-SpringApplication-构造分析" class="headerlink" title="39.1 SpringApplication 构造分析"></a>39.1 SpringApplication 构造分析</h2><p>构造 SpringApplication 对象时做了如下几件事：</p><ol><li>获取 BeanDefinition 对象。根据各种来源 添加 BeanDefinition（xml、配置类等）</li><li>推断应用类型。</li><li>添加 ApplicationContext 初始化器</li><li>添加事件监听器</li><li>主类推断 。得到当前方法运行的所在类</li></ol><h3 id="获取-BeanDefinition-源"><a href="#获取-BeanDefinition-源" class="headerlink" title="获取 BeanDefinition 源"></a>获取 BeanDefinition 源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A39_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(A39_1.class);</span><br><span class="line">        application.setSources(Set.of(<span class="string">&quot;classpath:b01.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> application.run(args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resourceDescription</span> <span class="operator">=</span> context.getBeanFactory().getBeanDefinition(beanDefinitionName).getResourceDescription();</span><br><span class="line">            System.out.println(<span class="string">&quot;名称： &quot;</span>+beanDefinitionName +<span class="string">&quot; 资源来源： &quot;</span>+resourceDescription);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Web application could not be started as there was no org.springframework.boot.web.servlet.server.ServletWebServerFactory bean defined in the context.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Check your application&#x27;s dependencies for a supported servlet web server.</span><br><span class="line">Check the configured web application type.</span><br></pre></td></tr></table></figure><p>这是因为添加了 <code>spring-boot-starter-web</code> 依赖，但 Spring 容器中并没有 <code>SerletWebServerFactory</code> 类型的 Bean。向容器添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">servletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcatServletWebServerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">    tomcatServletWebServerFactory.setPort(<span class="number">8081</span>);</span><br><span class="line">    <span class="keyword">return</span> tomcatServletWebServerFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name: org.springframework.context.annotation.internalConfigurationAnnotationProcessor 来源: null</span><br><span class="line">name: org.springframework.context.annotation.internalAutowiredAnnotationProcessor 来源: null</span><br><span class="line">name: org.springframework.context.annotation.internalCommonAnnotationProcessor 来源: null</span><br><span class="line">name: org.springframework.context.event.internalEventListenerProcessor 来源: null</span><br><span class="line">name: org.springframework.context.event.internalEventListenerFactory 来源: null</span><br><span class="line">name: a39_1 来源: null</span><br><span class="line">name: org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory 来源: null</span><br><span class="line">name: bean2 来源: indi.mofan.a39.A39_1</span><br><span class="line">name: servletWebServerFactory 来源: indi.mofan.a39.A39_1</span><br></pre></td></tr></table></figure><p>来源为 <code>null</code>的 Bean 是 Spring 提供的 内置 Bean</p><p>使用 XML 配置文件添加 Bean，并利用 setSources() 方法设置创建 ApplicationContext 的其他来源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">SpringApplication</span> <span class="variable">spring</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(A39_1.class);</span><br><span class="line">    spring.setSources(Collections.singleton(<span class="string">&quot;classpath:b01.xml&quot;</span>));</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 b01.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.boot.A39_1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次运行多出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">名称： bean1 资源来源： class path resource [b01.xml]</span><br></pre></td></tr></table></figure><h3 id="推断应用类型"><a href="#推断应用类型" class="headerlink" title="推断应用类型"></a>推断应用类型</h3><p>应用类型的推断在构造方法中可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip-- </span></span><br><span class="line"><span class="comment">// 推断应用类型</span></span><br><span class="line">    <span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推断逻辑由 <code>WebApplicationType</code> 枚举中的 <code>deduceFromClasspath()</code> 方法完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> WebApplicationType <span class="title function_">deduceFromClasspath</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ClassUtils.isPresent() 判断类路径下是否存在某个类</span></span><br><span class="line">    <span class="keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="literal">null</span>) &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="comment">// 响应式 Web 应用</span></span><br><span class="line">        <span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="comment">// 非 Web 应用</span></span><br><span class="line">            <span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Web 应用</span></span><br><span class="line">    <span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用反射调用 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Method</span> <span class="variable">deduceFromClasspath</span> <span class="operator">=</span> WebApplicationType.class.getDeclaredMethod(<span class="string">&quot;deduceFromClasspath&quot;</span>);</span><br><span class="line">    deduceFromClasspath.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\t应用类型为: &quot;</span> + deduceFromClasspath.invoke(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">应用类型为: SERVLET</span><br></pre></td></tr></table></figure><h3 id="添加-ApplicationContext-初始化器"><a href="#添加-ApplicationContext-初始化器" class="headerlink" title="添加 ApplicationContext 初始化器"></a>添加 ApplicationContext 初始化器</h3><p>调用 <code>SpringApplication#run()</code> 方法时会创建 <code>ApplicationContext</code>，最后调用 <code>ApplicationContext#refresh()</code> 方法完成初始化。</p><p>在创建与初始化完成之间的一些拓展功能就由 <code>ApplicationContext</code> 初始化器完成。</p><p>在 <code>SpringApplication</code> 的构造方法中，添加的初始化器信息从配置文件中读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">// 从配置文件中读取初始化器</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以调用 SpringApplication 对象的 addInitializers() 方法添加自定义初始化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    spring.addInitializers(applicationContext -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext <span class="keyword">instanceof</span> GenericApplicationContext) &#123;</span><br><span class="line">            <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (GenericApplicationContext) applicationContext;</span><br><span class="line">            context.registerBean(<span class="string">&quot;bean3&quot;</span>, Bean3.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建并初始化 Spring 容器</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> spring.run(args);</span><br><span class="line">    Arrays.stream(context.getBeanDefinitionNames()).forEach(i -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + i +</span><br><span class="line">                           <span class="string">&quot; 来源: &quot;</span> + context.getBeanFactory().getBeanDefinition(i).getResourceDescription());</span><br><span class="line">    &#125;);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: bean3 来源: null</span><br></pre></td></tr></table></figure><h3 id="添加事件监听器"><a href="#添加事件监听器" class="headerlink" title="添加事件监听器"></a>添加事件监听器</h3><p>与添加 <code>ApplicationContext</code> 初始化器一样，在 <code>SpringApplication</code> 的构造方法中，添加的事件监听器信息从配置文件中读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">// 从配置文件中读取事件监听器</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以调用 SpringApplication 对象的 addListeners() 方法添加自定义事件监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">// 输出所有事件信息</span></span><br><span class="line">    spring.addListeners(event -&gt; System.out.println(<span class="string">&quot;\t事件为: &quot;</span> + event));</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 事件类型为: class org.springframework.boot.context.event.ApplicationStartingEvent</span><br><span class="line">事件类型为: class org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent</span><br><span class="line">事件类型为: class org.springframework.boot.context.event.ApplicationContextInitializedEvent</span><br><span class="line">事件类型为: class org.springframework.boot.context.event.ApplicationPreparedEvent</span><br><span class="line">事件类型为: class org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent</span><br><span class="line">事件类型为: class org.springframework.context.event.ContextRefreshedEvent</span><br><span class="line">事件类型为: class org.springframework.boot.context.event.ApplicationStartedEvent</span><br><span class="line">事件类型为: class org.springframework.boot.availability.AvailabilityChangeEvent</span><br><span class="line">事件类型为: class org.springframework.boot.context.event.ApplicationReadyEvent</span><br><span class="line">事件类型为: class org.springframework.boot.availability.AvailabilityChangeEvent</span><br><span class="line">事件类型为: class org.springframework.boot.availability.AvailabilityChangeEvent</span><br><span class="line">事件类型为: class org.springframework.context.event.ContextClosedEvent</span><br></pre></td></tr></table></figure><h3 id="主类推断"><a href="#主类推断" class="headerlink" title="主类推断"></a>主类推断</h3><p>主类推断在构造方法中可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">// 主类推断</span></span><br><span class="line">    <span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推断逻辑由 <code>deduceMainApplicationClass()</code> 方法完成，利用反射调用该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Method</span> <span class="variable">deduceMainApplicationClass</span> <span class="operator">=</span> SpringApplication.class.getDeclaredMethod(<span class="string">&quot;deduceMainApplicationClass&quot;</span>);</span><br><span class="line">    deduceMainApplicationClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\t主类是: &quot;</span> + deduceMainApplicationClass.invoke(spring));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主类推断为: class com.example.boot.A39_1</span><br></pre></td></tr></table></figure><h2 id="39-2-SpringApplication-run-分析"><a href="#39-2-SpringApplication-run-分析" class="headerlink" title="39.2 SpringApplication run 分析"></a>39.2 SpringApplication run 分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> run(<span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法 <code>new SpringApplication(primarySources)</code>已经讲完，接下来看 <code>run()</code> 方法</p><h3 id="第一步-得到-SpringApplicationRunListeners"><a href="#第一步-得到-SpringApplicationRunListeners" class="headerlink" title="第一步 得到 SpringApplicationRunListeners"></a>第一步 得到 SpringApplicationRunListeners</h3><p>事件发布器</p><p>在执行 <code>run()</code> 方法时，先获取到 <code>SpringApplicationRunListeners</code>,它是事件发布器组合，</p><p>作用是：在 Spring Boot 启动各个阶段发布事件。</p><p><code>SpringApplicationRunListeners</code> 中使用 <code>SpringApplicationRunListener</code> 来描述单个事件发布器，</p><p><code>SpringApplicationRunListener</code> 是一个接口，它有且仅有一个实现类 <code>EventPublishingRunListener</code>。</p><p>事件发布器都是在配置文件中读取，从 <code>META-INFO/spring.factories</code> 中读取，该文件中有这样一句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br></pre></td></tr></table></figure><p>从 <code>META-INFO/spring.factories</code>配置文件读取事件发布器信息，并发布各种事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A39run方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A39</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        <span class="comment">//添加事件监听器</span></span><br><span class="line">        app.addListeners(e-&gt; System.out.println(e.getClass()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取事件发布器SpringApplicationRunListener的实现类名</span></span><br><span class="line">        List&lt;String&gt; names = SpringFactoriesLoader.loadFactoryNames</span><br><span class="line">                (SpringApplicationRunListener.class, A39.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(name);</span><br><span class="line"></span><br><span class="line">            Constructor&lt;?&gt; constructor = clazz.getConstructor(SpringApplication.class, String[].class);</span><br><span class="line">            <span class="type">SpringApplicationRunListener</span> <span class="variable">publisher</span> <span class="operator">=</span> (SpringApplicationRunListener) constructor.newInstance(app, args);</span><br><span class="line">            <span class="comment">//发布事件</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//springboot启动</span></span><br><span class="line">            <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>();</span><br><span class="line">            publisher.starting(bootstrapContext);</span><br><span class="line">            <span class="comment">//环境信息准备完毕</span></span><br><span class="line">            publisher.environmentPrepared(bootstrapContext, <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>());</span><br><span class="line">            <span class="comment">//在spring容器创建，并调用初始化器之后，发送下面事件</span></span><br><span class="line">            <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">            publisher.contextPrepared(context);</span><br><span class="line">            <span class="comment">//所有BeanDefinition加载完毕</span></span><br><span class="line">            publisher.contextLoaded(context);</span><br><span class="line">            <span class="comment">//spring容器初始化完成(refresh方法调用完毕)</span></span><br><span class="line">            context.refresh();</span><br><span class="line">            publisher.started(context,<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//spring启动完毕</span></span><br><span class="line">            publisher.ready(context,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动失败</span></span><br><span class="line">            publisher.failed(context, <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;启动失败&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 SpringBoot 启动过程中，总共发布 7 种事件。</p><p>运行 main() 方法后，控制台打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br><span class="line">class org.springframework.boot.context.event.ApplicationStartingEvent</span><br><span class="line">class org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent</span><br><span class="line">class org.springframework.boot.context.event.ApplicationContextInitializedEvent</span><br><span class="line">class org.springframework.boot.context.event.ApplicationPreparedEvent</span><br><span class="line">class org.springframework.context.event.ContextRefreshedEvent</span><br><span class="line">class org.springframework.boot.context.event.ApplicationStartedEvent</span><br><span class="line">class org.springframework.boot.availability.AvailabilityChangeEvent</span><br><span class="line">class org.springframework.boot.context.event.ApplicationReadyEvent</span><br><span class="line">class org.springframework.boot.availability.AvailabilityChangeEvent</span><br><span class="line">class org.springframework.boot.context.event.ApplicationFailedEvent</span><br></pre></td></tr></table></figure><p>但打印出的事件种类并不止 7 种，这是因为包含了其他事件发布器发布的事件，</p><p><code>EventPublishingRunListener</code> 发布的事件的全限定类名包含 <code>boot.context.event</code>，</p><p>根据这个条件重新计算，恰好 7 个。</p><h3 id="第八到十一步-完成-Spring-容器创建"><a href="#第八到十一步-完成-Spring-容器创建" class="headerlink" title="第八到十一步 完成 Spring 容器创建"></a>第八到十一步 完成 Spring 容器创建</h3><ul><li>第八步：创建容器。在构造 <code>SpringApplication </code> 时推断出应用类型，使用应用类型直接创建</li><li>第九步：准备容器。回调最终构造 <code>SpringApplication</code>时添加的初始化器</li><li>第十步：加载 Bean 定义。从配置类、xml 配置文件读取 BeanDefintion，或者扫描某包路径下的 BeanDefintion 对象</li><li>第十一步：调用 <code>Application #refresh()</code> 方法，完成 Spring 容器的创建。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A39_3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        application.addInitializers(applicationContext -&gt; System.out.println(<span class="string">&quot;执行初始化器增强...&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. 封装启动 args&quot;</span>);</span><br><span class="line">        <span class="type">DefaultApplicationArguments</span> <span class="variable">arguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 8. 创建容器&quot;</span>);</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> createApplicationContext(WebApplicationType.SERVLET);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 9. 准备容器&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ApplicationContextInitializer initializer : application.getInitializers()) &#123;</span><br><span class="line">            initializer.initialize(context);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10. 加载 bean 定义&quot;</span>);</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotatedBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(context.getDefaultListableBeanFactory());</span><br><span class="line">        reader.register(Config.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">XmlBeanDefinitionReader</span> <span class="variable">xmlBeanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">        xmlBeanDefinitionReader.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;b03.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">classPathBeanDefinitionScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(beanFactory);</span><br><span class="line">        classPathBeanDefinitionScanner.scan(<span class="string">&quot;com.example.boot.sub&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 11. refresh 容器&quot;</span>);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name: &quot;</span>+beanDefinitionName+<span class="string">&quot; 来源： &quot;</span>+</span><br><span class="line">                               beanFactory.getBeanDefinition(beanDefinitionName).getResourceDescription());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 12. 执行 runner&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GenericApplicationContext <span class="title function_">createApplicationContext</span><span class="params">(WebApplicationType type)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                context = <span class="keyword">new</span> <span class="title class_">AnnotationConfigReactiveWebServerApplicationContext</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SERVLET:</span><br><span class="line">                context = <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebApplicationContext</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NONE:</span><br><span class="line">                context = <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean5</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean6</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        Bean5 <span class="title function_">bean5</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean5</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> ServletWebServerFactory <span class="title function_">servletWebServerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">TomcatServletWebServerFactory</span> <span class="variable">webServerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">            webServerFactory.setPort(<span class="number">8081</span>);</span><br><span class="line">            <span class="keyword">return</span> webServerFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>b03.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.boot.A39_3.Bean4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="background-color:rgba(255, 255, 255, 0);">com.example.boot.sub 包下的 Bean：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean7</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. 封装启动 args</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 8. 创建容器</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 9. 准备容器</span><br><span class="line">执行初始化器增强...</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10. 加载 bean 定义</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 11. refresh 容器</span><br><span class="line">name: org.springframework.context.annotation.internalConfigurationAnnotationProcessor 来源： null</span><br><span class="line">name: org.springframework.context.annotation.internalAutowiredAnnotationProcessor 来源： null</span><br><span class="line">name: org.springframework.context.annotation.internalCommonAnnotationProcessor 来源： null</span><br><span class="line">name: org.springframework.context.event.internalEventListenerProcessor 来源： null</span><br><span class="line">name: org.springframework.context.event.internalEventListenerFactory 来源： null</span><br><span class="line">name: a39_3.Config 来源： null</span><br><span class="line">name: bean4 来源： class path resource [b03.xml]</span><br><span class="line">name: bean7 来源： file [D:\workspace\advanced-spring\boot\target\classes\com\example\boot\sub\Bean7.class]</span><br><span class="line">name: org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory 来源： null</span><br><span class="line">name: bean5 来源： com.example.boot.A39_3$Config</span><br><span class="line">name: servletWebServerFactory 来源： com.example.boot.A39_3$Config</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 12. 执行 runner</span><br></pre></td></tr></table></figure><h3 id="第二步-封装启动-args"><a href="#第二步-封装启动-args" class="headerlink" title="第二步 封装启动 args"></a>第二步 封装启动 args</h3><p>调用 <code>DefaultApplicationArguments</code>的构造方法,传入 args :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. 封装启动 args&quot;</span>);</span><br><span class="line">    <span class="type">DefaultApplicationArguments</span> <span class="variable">arguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第十二步-执行-Runner"><a href="#第十二步-执行-Runner" class="headerlink" title="第十二步 执行 Runner"></a>第十二步 执行 Runner</h3><p>在 SpringBoot 启动成功后，可以执行一些 <code>Runner</code>，进行预处理和测试</p><p><code>Runner</code> 分为：CommandLineRunner , ApplicationRunner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们都是 函数式接口，内部抽象方法长得也像，</p><ul><li>CommandLineRunner 直接接受启动参数</li><li>ApplicationRunner 接收封装后的 ApplicationArguments，即** 第二步** 封装得对象</li></ul><p>在配置类<font style="color:#bcbec4;background-color:#1e1f22;">Config</font>中添加这两种类型的 Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ApplicationRunner <span class="title function_">applicationRunner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplicationRunner</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ApplicationRunner........&quot;</span>+Arrays.toString(args.getSourceArgs()));</span><br><span class="line">            System.out.println(args.getOptionNames());</span><br><span class="line">            System.out.println(args.getOptionValues(args.getOptionNames().iterator().next()));</span><br><span class="line">            System.out.println(args.getNonOptionArgs());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;CommandLineRunner........&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. 封装启动 args&quot;</span>);</span><br><span class="line">    <span class="type">DefaultApplicationArguments</span> <span class="variable">arguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 12. 执行 runner&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (CommandLineRunner runner : context.getBeansOfType(CommandLineRunner.class).values()) &#123;</span><br><span class="line">        runner.run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ApplicationRunner runner : context.getBeansOfType(ApplicationRunner.class).values()) &#123;</span><br><span class="line">        runner.run(arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行 main 方法时,添加程序参数 <code>--server.port=8080 debug</code>:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725707280868-6f4e17ae-cebc-4bd9-a1f9-b69e861557a2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 12. 执行 runner</span><br><span class="line">ApplicationRunner........[--server.port=8081, DEBUG]</span><br><span class="line">[server.port]</span><br><span class="line">[8081]</span><br><span class="line">[DEBUG]</span><br><span class="line">CommandLineRunner........[--server.port=8081, DEBUG]</span><br></pre></td></tr></table></figure><h3 id="第三步-准备-Environment-添加命令行参数"><a href="#第三步-准备-Environment-添加命令行参数" class="headerlink" title="第三步 准备 Environment 添加命令行参数"></a>第三步 准备 Environment 添加命令行参数</h3><p><code>Environment</code>环境对象,是对配置信息的抽象</p><p>配置信息来源可以是:系统环境变量、properties 配置文件、yaml 配置文件等.</p><p>SpringBoot 提供了名为 <code>ApplicationEnvironment</code> 的类表示环境对象</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725709933750-0e843721-ebeb-4395-b573-468ce6e491ca.png"></p><p>默认情况下,创建的 <code>ApplictionEnvironment</code>对象中配置信息的来源只有两个:</p><ul><li>系统属性</li><li>系统变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Step3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        env.getPropertySources().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;    </span><br></pre></td></tr></table></figure><blockquote><p>针对相同名称的配置信息,按照来源的先后顺序获取.</p></blockquote><h4 id="获取虚拟机参数"><a href="#获取虚拟机参数" class="headerlink" title="获取虚拟机参数"></a>获取虚拟机参数</h4><p>获取 JAVA_HOME 的配置信息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;JAVA_HOME&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\software\work\jdk\jdk8\jdk</span><br></pre></td></tr></table></figure><p>由于 <code>PropertiesPropertySource</code> 中并不存在名为 JAVA_HOME 的配置信息</p><p>所以从 <code>SystemEnvironmentPropertySource</code> 中获取 JAVA_HOME 的配置信息。</p><h4 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h4><p>在 IDEA 的 Run&#x2F;Debug Configurations 中的 VM options 添加 <code>-DJAVA_HOME=abc</code>，</p><p>使得 <code>PropertiesPropertySource</code> 中存在名为 JAVA_HOME 的配置信息：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725710609081-edc15d6b-b332-4e53-89a5-d258a1084526.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></table></figure><h4 id="获取properties-配置文件信息"><a href="#获取properties-配置文件信息" class="headerlink" title="获取properties 配置文件信息"></a>获取properties 配置文件信息</h4><p>如果要从配置文件 <code>application.properties</code> 中读取配置信息，可以添加配置信息的来源。配置文件的优先级最低，添加来源时调用 <code>addLast()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">    env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;application.properties&quot;</span>)));</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;author.name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author.name</span>=<span class="string">daidawang</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">ResourcePropertySource &#123;name=&#x27;class path resource [application.properties]&#x27;&#125;</span><br><span class="line">abc</span><br><span class="line">daidawang</span><br></pre></td></tr></table></figure><h4 id="获取系统环境变量"><a href="#获取系统环境变量" class="headerlink" title="获取系统环境变量"></a>获取系统环境变量</h4><p>在 SpringBoot 中,这里 **<font style="color:#DF2A3F;">只 </font>**添加 <code>SimpleCommandLinePropertSource</code></p><p>并且它的优先级最高，使用 <code>addFirst()</code> 方法添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">    env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;application.properties&quot;</span>)));</span><br><span class="line">    env.getPropertySources().addFirst(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(args));</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;author.name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加程序参数 <code>--author.name=呆大王 </code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1725711123730-cf4a0277-248a-4bdc-8632-54e1c12d2b92.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SimpleCommandLinePropertySource &#123;name=&#x27;commandLineArgs&#x27;&#125;</span><br><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">ResourcePropertySource &#123;name=&#x27;class path resource [application.properties]&#x27;&#125;</span><br><span class="line">abc</span><br><span class="line">呆大王</span><br></pre></td></tr></table></figure><h3 id="第四步-添加-ConfigurationPropertySources"><a href="#第四步-添加-ConfigurationPropertySources" class="headerlink" title="第四步 添加 ConfigurationPropertySources"></a>第四步 添加 ConfigurationPropertySources</h3><p>创建 step4.properties 文件,内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.first-name=dai</span><br><span class="line">user.middle_name=da</span><br><span class="line">user.lastName=wang</span><br></pre></td></tr></table></figure><p>读取文件内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">    env.getPropertySources().addLast(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>(<span class="string">&quot;step4&quot;</span>, <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;step4.properties&quot;</span>))</span><br><span class="line">    );</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;user.first-name&quot;</span>));</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;user.middle-name&quot;</span>));</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;user.last-name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>step4.properties 文件中配置信息的 key 是 user.middle_name，但在读取时，使用的是 user.middle-name；还有 user.lastName 的 key，但读取时使用 user.last-name。能读取成功吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">ResourcePropertySource &#123;name=&#x27;step4&#x27;&#125;</span><br><span class="line">George</span><br><span class="line">null</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>显然是不行的，为了能读取成功，需要实现 <strong>松散绑定</strong>，添加 <code>ConfigurationPropertySources</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    ConfigurationPropertySources.attach(env);</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConfigurationPropertySourcesPropertySource &#123;name=&#x27;configurationProperties&#x27;&#125;</span><br><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">ResourcePropertySource &#123;name=&#x27;step4&#x27;&#125;</span><br><span class="line">dai</span><br><span class="line">da</span><br><span class="line">wang</span><br></pre></td></tr></table></figure><h3 id="第五步-使用EnvironmentPostProcessorApplicationListener-进行环境对象后置处理"><a href="#第五步-使用EnvironmentPostProcessorApplicationListener-进行环境对象后置处理" class="headerlink" title="第五步 使用EnvironmentPostProcessorApplicationListener 进行环境对象后置处理"></a>第五步 使用EnvironmentPostProcessorApplicationListener 进行环境对象后置处理</h3><p>在第三步中 只 添加 <code>SimpleCommandLinePropertySource</code> 读取系统属性和系统变量，</p><p>而 读取 properties、YAML 配置文件的源就是在第五步中添加的。</p><p>完成这样功能需要使用到 <code>EnvironmentPostProcessor</code>，其具体实现是 <code>ConfigDataEnvironmentPostProcessor</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">    <span class="type">ApplicationEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强前&quot;</span>);</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line">    <span class="type">ConfigDataEnvironmentPostProcessor</span> <span class="variable">processor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigDataEnvironmentPostProcessor</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DeferredLogs</span>(), <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>()</span><br><span class="line">    );</span><br><span class="line">    processor1.postProcessEnvironment(env, app);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强后&quot;</span>);</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;author.name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">RandomValuePropertySourceEnvironmentPostProcessor</span> <span class="variable">processor2</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RandomValuePropertySourceEnvironmentPostProcessor</span>(<span class="keyword">new</span> <span class="title class_">DeferredLog</span>());</span><br><span class="line">    processor2.postProcessEnvironment(env, app);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强前</span><br><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强后</span><br><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">OriginTrackedMapPropertySource &#123;name=&#x27;Config resource &#x27;class path resource [application.properties]&#x27; via location &#x27;optional:classpath:/&#x27;&#x27;&#125;</span><br><span class="line">&quot;daidawang&quot;</span><br></pre></td></tr></table></figure><p><code>EnvironmentPostProcessor</code> 还有一个有趣的实现：<code>RandomValuePropertySourceEnvironmentPostProcessor</code>，该实现提供了随机值的生成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 再次增强后&quot;</span>);</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;random.string&quot;</span>));</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;random.int&quot;</span>));</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;random.uuid&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 再次增强后</span><br><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">RandomValuePropertySource &#123;name=&#x27;random&#x27;&#125;</span><br><span class="line">OriginTrackedMapPropertySource &#123;name=&#x27;Config resource &#x27;class path resource [application.properties]&#x27; via location &#x27;optional:classpath:/&#x27;&#x27;&#125;</span><br><span class="line">5ef4038a709215938cbd3e1c031f66dd</span><br><span class="line">1481116109</span><br><span class="line">18548e0b-8bad-458b-b38e-bf793aa24ced</span><br></pre></td></tr></table></figure><p>在 SpringBoot 中实现不是上述代码的方式添加后置处理器的,</p><p>同样会从 <code>META-INF/spring.factories</code> 配置文件读取并初始化处理器:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Environment Post Processors</span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</span><br><span class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.env.RandomValuePropertySourceEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.reactor.DebugAgentEnvironmentPostProcessor</span><br></pre></td></tr></table></figure><p>SpringBoot 读取 <code>META-INF/spring.factories</code> 配置文件初始化环境后置处理器,再执行处理逻辑由</p><p>EnvironmentPostProcessorApplicationListener 完成.</p><p>它是事件监听器,同样在<code>META-INF/spring.factories</code> 配置文件中读取并初始化:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessorApplicationListener\</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要想该监听器成功监听到事件,需要第五步发布一个事件,而事件的发布由第一步获取的事件发布器完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">    app.addListeners(<span class="keyword">new</span> <span class="title class_">EnvironmentPostProcessorApplicationListener</span>());</span><br><span class="line">    <span class="type">ApplicationEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; names = SpringFactoriesLoader.loadFactoryNames(EnvironmentPostProcessor.class, Step5.class.getClassLoader());</span><br><span class="line">    names.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="type">EventPublishingRunListener</span> <span class="variable">publisher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventPublishingRunListener</span>(app, args);</span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强前&quot;</span>);</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line">    publisher.environmentPrepared(<span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>(), env);</span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强后&quot;</span>);</span><br><span class="line">    env.getPropertySources().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor</span><br><span class="line">org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor</span><br><span class="line">org.springframework.boot.env.RandomValuePropertySourceEnvironmentPostProcessor</span><br><span class="line">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor</span><br><span class="line">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor</span><br><span class="line">org.springframework.boot.reactor.DebugAgentEnvironmentPostProcessor</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationPropertiesEnvironmentPostProcessor</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强前</span><br><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 增强后</span><br><span class="line">PropertiesPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;</span><br><span class="line">OriginAwareSystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;</span><br><span class="line">RandomValuePropertySource &#123;name=&#x27;random&#x27;&#125;</span><br><span class="line">OriginTrackedMapPropertySource &#123;name=&#x27;Config resource &#x27;class path resource [application.properties]&#x27; via location &#x27;optional:classpath:/&#x27;&#x27;&#125;</span><br></pre></td></tr></table></figure><p>配置文件 EnvironmentPostProcessor 实现有很多,但是上述打印的信息生效的不多,是否生效于项目的依赖配置无关.</p><h3 id="第六步-绑定配置信息到-SpringApplication"><a href="#第六步-绑定配置信息到-SpringApplication" class="headerlink" title="第六步 绑定配置信息到 SpringApplication"></a>第六步 绑定配置信息到 SpringApplication</h3><h4 id="ConfigurationProperties-注解的原理"><a href="#ConfigurationProperties-注解的原理" class="headerlink" title="@ConfigurationProperties 注解的原理"></a>@ConfigurationProperties 注解的原理</h4><p>使用 <code>@ConfigurationProperties</code>  注解可以指定一个前缀，SpringBoot 将根据指定的前缀和属性名称在配置文件中寻找对应的信息并完成注入，其底层是利用 <code>Binder</code> 实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A39ConfigurationProperties</span>原理 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ApplicationEnvironment</span> <span class="variable">applicationEnvironment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        applicationEnvironment.getPropertySources()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>(<span class="string">&quot;step4&quot;</span>,<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;step4.properties&quot;</span>)));</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Binder.get(applicationEnvironment).bind(<span class="string">&quot;user&quot;</span>, User.class).get();</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        Binder.get(applicationEnvironment).bind(<span class="string">&quot;user&quot;</span>, Bindable.ofInstance(user1));</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String lastName;</span><br><span class="line">        <span class="keyword">private</span> String middleName;</span><br><span class="line">        <span class="keyword">private</span> String firstName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>step4.properties : </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user.first-name</span>=<span class="string">dai</span></span><br><span class="line"><span class="attr">user.middle_name</span>=<span class="string">da</span></span><br><span class="line"><span class="attr">user.lastName</span>=<span class="string">wang</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A39ConfigurationProperties原理.User(lastName=wang, middleName=da, firstName=dai)</span><br><span class="line">A39ConfigurationProperties原理.User(lastName=wang, middleName=da, firstName=dai)</span><br></pre></td></tr></table></figure><h4 id="绑定配置信息到-SpringApplication"><a href="#绑定配置信息到-SpringApplication" class="headerlink" title="绑定配置信息到 SpringApplication"></a>绑定配置信息到 SpringApplication</h4><p>在第六步中，绑定 <code>spring.main</code> 前缀的配置信息到 <code>SpringApplication</code> 对象也是利用了 <code>Binder</code>。</p><p>假设 <code>step6.properties</code> 配置文件的信息如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="attr">spring.main.lazy-initialization</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A39run方法6步 绑定spring.main 前缀的配置信息到 SpringApplication 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 读取配置文件并绑定到SpringApplication</span></span><br><span class="line"><span class="comment"> *              通过<span class="doctag">@ConfigurationProperties</span> 的原理Binder 将配置文件中的属性绑定到 SpringApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A39run</span>方法<span class="number">6</span>步 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ApplicationEnvironment</span> <span class="variable">applicationEnvironment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        applicationEnvironment.getPropertySources()</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ResourcePropertySource</span>(<span class="string">&quot;step6&quot;</span>,<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;step6.properties&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">SpringApplication</span>&gt; clazz = application.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bannerMode</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;bannerMode&quot;</span>);</span><br><span class="line">        bannerMode.setAccessible(Boolean.TRUE);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">lazyInitialization</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;lazyInitialization&quot;</span>);</span><br><span class="line">        lazyInitialization.setAccessible(Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定前</span></span><br><span class="line">        System.out.println(bannerMode.get(application));</span><br><span class="line">        System.out.println(lazyInitialization.get(application));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定</span></span><br><span class="line">        Binder.get(applicationEnvironment).bind(<span class="string">&quot;spring.main&quot;</span>, Bindable.ofInstance(application));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定后</span></span><br><span class="line">        System.out.println(bannerMode.get(application));</span><br><span class="line">        System.out.println(lazyInitialization.get(application));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONSOLE</span><br><span class="line">false</span><br><span class="line">OFF</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="第七步-打印-Banner"><a href="#第七步-打印-Banner" class="headerlink" title="第七步 打印 Banner"></a>第七步 打印 Banner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A39run方法7步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A39run</span>方法<span class="number">7</span>步 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationEnvironment</span> <span class="variable">applicationEnvironment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">        <span class="type">SpringApplicationBannerPrinter</span> <span class="variable">springApplicationBannerPrinter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBannerPrinter</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SpringBootBanner</span>()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"> printer.print(env, A39run方法<span class="number">7</span>步.class, System.out);  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外还可以自定义文字和图片 Banner，文字 Banner 的文件类型需要是 txt，图片 Banner 的文件类型需要是 gif。</p><p>文字:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试文字 banner</span></span><br><span class="line">    env.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">MapPropertySource</span>(</span><br><span class="line">        <span class="string">&quot;custom&quot;</span>,</span><br><span class="line">        Collections.singletonMap(<span class="string">&quot;spring.banner.location&quot;</span>, <span class="string">&quot;banner1.txt&quot;</span>)</span><br><span class="line">    ));</span><br><span class="line">    printer.print(env, A39run方法<span class="number">7</span>步.class, System.out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文字 Banner 可以从 <a href="https://www.lddgo.net/string/text-to-ascii-art">网站</a> 上自定义.</p><p>获取 Spring 或 SpringBoot 的版本号可以使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;SpringBoot: &quot;</span> + SpringBootVersion.getVersion());</span><br><span class="line">System.out.println(<span class="string">&quot;Spring: &quot;</span> + SpringVersion.getVersion());</span><br></pre></td></tr></table></figure><h3 id="步骤总结"><a href="#步骤总结" class="headerlink" title="步骤总结"></a>步骤总结</h3><ol><li>得到 SpringApplicationRunListeners 事件发布器</li></ol><ul><li>发布 starting 事件 1️⃣</li></ul><ol start="2"><li>将 main 方法的参数 封装<font style="background-color:rgba(255, 255, 255, 0);">ApplicationArguments 对象(此对象将参数分为两类a选项参数 –开头.可添加到命令行 b非选项参数)</font></li><li>准备 environment 并添加选项参数(命令行参数)</li><li>松绑定 , ConfigurationPropertySources 处理</li></ol><ul><li>发布 environmentPrepared 事件 ,表示environment已经准备 2️⃣</li></ul><ol start="5"><li>通过spring.factories 里找到事件监听器 EnvironmentPostProcessorApplicationListener , 调用<font style="background-color:rgba(255, 255, 255, 0);">environmentPrepared 方法增强environment,例如随机数的源和读取 application.properties 的源</font></li><li>绑定 spring.main 前缀的 key 到 SpringApplication 对象</li><li>打印 Banner</li><li>创建容器</li><li>准备容器,应用初始化器增强 ApplicationContext</li></ol><ul><li>发布 contextPrepared 事件,表示容器创建好并调用初始化器 3️⃣</li></ul><ol start="10"><li>获取所有 BeanDefinition 源(xml、配置类、组件扫描) , 加载<font style="background-color:rgba(255, 255, 255, 0);"> BeanDefinition 到 ApplicationContext 容器</font></li></ol><ul><li>发布 contextLoaded 事件4️⃣</li></ul><ol start="11"><li>refresh 容器,调用 Bean 工厂后置处理器 、bean 后置处理器、初始化单例 bean</li></ol><ul><li>发布 started 事件,表示 ApplicationContext 准备好了 5️⃣</li></ul><ol start="12"><li>调用实现 ApplicationRunner 或者 CommandLineRunner 的 bean</li></ol><ul><li>发布 running 事件 6️⃣</li><li>这其中有异常，发布 Application Failed 事件 7️⃣</li></ul><p>步骤对应的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> createBootstrapContext();</span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    <span class="comment">//1.得到 SpringApplicationRunListeners 事件发布器</span></span><br><span class="line">    <span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">    <span class="comment">//发布 starting 事件 1️⃣</span></span><br><span class="line">    listeners.starting(bootstrapContext, <span class="built_in">this</span>.mainApplicationClass);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//2.将 main 方法的参数 封装ApplicationArguments 对象(此对象将参数分为两类a选项参数 --开头.可添加到命令行 b非选项参数)</span></span><br><span class="line">        <span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">        <span class="comment">//进入prepareEnvironment方法</span></span><br><span class="line">        <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">//7.打印 Banner</span></span><br><span class="line">        <span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">        <span class="comment">//8.创建容器</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        context.setApplicationStartup(<span class="built_in">this</span>.applicationStartup);</span><br><span class="line">        <span class="comment">//进入prepareContext</span></span><br><span class="line">        prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">//11.refresh 容器,调用 Bean 工厂后置处理器 、bean 后置处理器、初始化单例 bean</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">timeTakenToStartup</span> <span class="operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//发布 started 事件</span></span><br><span class="line">        listeners.started(context, timeTakenToStartup);</span><br><span class="line">        <span class="comment">//12.调用实现 ApplicationRunner 或者 CommandLineRunner 的 bean</span></span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">timeTakenToReady</span> <span class="operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">        <span class="comment">//发布 running 事件</span></span><br><span class="line">        listeners.ready(context, timeTakenToReady);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="comment">//这其中有异常，发布 Application Failed 事件</span></span><br><span class="line">        handleRunFailure(context, ex, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ConfigurableEnvironment <span class="title function_">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span><br><span class="line"><span class="params">                                                       DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> &#123;</span><br><span class="line">        <span class="comment">// Create and configure the environment</span></span><br><span class="line">        <span class="comment">//3.准备 environment</span></span><br><span class="line">        <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> getOrCreateEnvironment();</span><br><span class="line">        <span class="comment">// 并添加选项参数(命令行参数)</span></span><br><span class="line">        configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">        <span class="comment">//4.松绑定</span></span><br><span class="line">        ConfigurationPropertySources.attach(environment);</span><br><span class="line">        <span class="comment">//发布 environmentPrepared 事件 ,表示environment已经准备</span></span><br><span class="line">        <span class="comment">//5.通过spring.factories 里找到事件监听器 EnvironmentPostProcessorApplicationListener ,</span></span><br><span class="line">        <span class="comment">//调用environmentPrepared 方法增强environment,例如随机数的源和读取 application.properties 的源</span></span><br><span class="line">        listeners.environmentPrepared(bootstrapContext, environment);</span><br><span class="line">        DefaultPropertiesPropertySource.moveToEnd(environment);</span><br><span class="line">        Assert.state(!environment.containsProperty(<span class="string">&quot;spring.main.environment-prefix&quot;</span>),</span><br><span class="line">                <span class="string">&quot;Environment prefix cannot be set via properties.&quot;</span>);</span><br><span class="line">        <span class="comment">//6.绑定 spring.main 前缀的 key 到 SpringApplication 对象</span></span><br><span class="line">        bindToSpringApplication(environment);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">            <span class="type">EnvironmentConverter</span> <span class="variable">environmentConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentConverter</span>(getClassLoader());</span><br><span class="line">            environment = environmentConverter.convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">        &#125;</span><br><span class="line">        ConfigurationPropertySources.attach(environment);</span><br><span class="line">        <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">prepareContext</span><span class="params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span></span><br><span class="line"><span class="params">                            ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span><br><span class="line"><span class="params">                            ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;</span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">//9.准备容器,应用初始化器增强 ApplicationContext</span></span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    bootstrapContext.close(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">        logStartupInfo(context.getParent() == <span class="literal">null</span>);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">    <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">    beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="literal">null</span>) &#123;</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> AbstractAutowireCapableBeanFactory) &#123;</span><br><span class="line">        ((AbstractAutowireCapableBeanFactory) beanFactory).setAllowCircularReferences(<span class="built_in">this</span>.allowCircularReferences);</span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">            ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">                    .setAllowBeanDefinitionOverriding(<span class="built_in">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.lazyInitialization) &#123;</span><br><span class="line">        context.addBeanFactoryPostProcessor(<span class="keyword">new</span> <span class="title class_">LazyInitializationBeanFactoryPostProcessor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    context.addBeanFactoryPostProcessor(<span class="keyword">new</span> <span class="title class_">SpringApplication</span>.PropertySourceOrderingBeanFactoryPostProcessor(context));</span><br><span class="line">    <span class="comment">// Load the sources</span></span><br><span class="line">    <span class="comment">//10.获取所有 BeanDefinition 源(xml、配置类、组件扫描) , 加载 BeanDefinition 到 ApplicationContext 容器</span></span><br><span class="line">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">    Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">    load(context, sources.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">//发布 contextLoaded 事件</span></span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="40-Tomcat-内嵌容器"><a href="#40-Tomcat-内嵌容器" class="headerlink" title="40.Tomcat 内嵌容器"></a>40.Tomcat 内嵌容器</h1><h1 id="41-自动配置"><a href="#41-自动配置" class="headerlink" title="41.自动配置"></a>41.自动配置</h1><h2 id="41-1-自动配置原理"><a href="#41-1-自动配置原理" class="headerlink" title="41.1 自动配置原理"></a>41.1 自动配置原理</h2><p>创建以下类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 模拟第三方配置类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration1</span>&#123;</span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@ToString</span></span><br><span class="line">   <span class="meta">@NoArgsConstructor</span></span><br><span class="line">   <span class="meta">@AllArgsConstructor</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> String name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 模拟第三方配置类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration2</span> &#123;</span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中 <code>AutoConfiguration1</code> 和 <code>AutoConfiguration2</code> 用来模拟第三方配置类，注意它们并没有被 <code>@Configuration</code> 注解标记，因此在未进行其他操作时，不会被添加到 Spring 容器中。</p><p>然后编写自己的配置类，使用 <code>@Import</code> 注解将第三方配置类添加到 Spring 容器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//bean1和bean2可以通过@Import注解注入</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfiguration1.class,AutoConfiguration2.class&#125;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">    context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(beanDefinitionName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myAutoConfiguration</span><br><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor</span><br><span class="line">org.springframework.boot.A41自动装配.A41$AutoConfiguration1</span><br><span class="line">bean1</span><br><span class="line">org.springframework.boot.A41自动装配.A41$AutoConfiguration2</span><br><span class="line">bean2</span><br></pre></td></tr></table></figure><h4 id="Improt-的-ImportSelector"><a href="#Improt-的-ImportSelector" class="headerlink" title="@Improt 的 ImportSelector"></a>@Improt 的 ImportSelector</h4><p>如果有多个第三方配置类，难不成到一个个地导入？</p><p>点击进入 <code>@Import</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726192002777-7d7b0023-ec46-446e-9ebe-87b291e0ea2b.png"></p><p>可以使用 <code>ImportSelector</code>,获取需要自动装配的 Bean 的全限定类名数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//bean1和bean2可以通过@Import注解注入</span></span><br><span class="line"><span class="comment">//@Import(&#123;AutoConfiguration1.class,AutoConfiguration2.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">//将类名写死在代码里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            AutoConfiguration1.class.getName(),AutoConfiguration2.class.getName()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 selectImports() 方法返回的全限定类名可以从文件中读取，就更方便了。</p><p>在当前项目的类路径下创建 <code>META-INF/spring.factories</code> 文件，约定一个 key，对应的 value 即为需要指定装配的 Bean：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内部类作为 key 时，最后以 $ 符号分割</span></span><br><span class="line"><span class="comment"># 每行的结尾用\表示和下一行 的内容 拼接为同一行</span></span><br><span class="line"><span class="attr">org.springframework.boot.A41自动装配.A41$MyImportSelector</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.A41自动装配.A41.AutoConfiguration1,\</span></span><br><span class="line"><span class="string">org.springframework.boot.A41自动装配.A41.AutoConfiguration2</span></span><br></pre></td></tr></table></figure><p>修改 <code>ImportSelector</code> 的实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="comment">//将类名写死在代码里</span></span><br><span class="line"><span class="comment">//            return new String[]&#123;AutoConfiguration1.class.getName(),AutoConfiguration2.class.getName()&#125;;</span></span><br><span class="line">            List&lt;String&gt; names = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">                MyImportSelector.class, <span class="literal">null</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">return</span> names.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 main() 方法后，控制台打印出同样的结果。</p><p><code>SpringFactoriesLoader.loadFactoryNames() </code> 不仅只扫描当前项目类型路径下</p><p>的 <code>META-INF/spring.factories</code> 文件，</p><p>而是会扫描包括 Jar 包里类路径下的 <code>META-INF/spring.factories</code> 文件。</p><p>针对 SpringBoot 来说,自动装配的 Bean 使用以下语句加载:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="SpringBoot2-7-及其以后版本的自动装配"><a href="#SpringBoot2-7-及其以后版本的自动装配" class="headerlink" title="SpringBoot2.7 及其以后版本的自动装配"></a>SpringBoot2.7 及其以后版本的自动装配</h3><p>在 SpringBoot2.7 及其以后版本,SpringBoot 不在读取 <code>META-INF/spring.factories</code>文件中的 key</p><p>为 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>的 values 来实现自动装配.</p><p>为了更贴合 SPI 机制,SpringBoot 将读取 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中的内容,</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726219690754-f4ccd77b-22c7-4e85-85fc-9645c20154c8.png"></p><p>该文件每一行都表示需要自动装配的 Bean 的全限定类名,可以使用 <code>#</code>作为注释,其加载方式使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader());</span><br></pre></td></tr></table></figure><p>其中 <code>AutoConfiguration</code>是一个注解,全限定类名为 <code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;org.springframework.boot.autoconfigure.AutoConfiguration&lt;/font&gt;</code>   </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726220034951-613620d6-1b3c-45d0-9642-2bdf17363b35.png"></p><p>也就是说可以自定义注解,创建自定义 <code>META-INF/spring/full-qualified-annotation-name.imports</code>文件,</p><p>在文件里声明需要自动装配的类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dai.dawang.a41;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyAutoConfiguration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAutoConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A41</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 META-INF&#x2F;spring&#x2F;indi.mofan.a41.MyAutoConfiguration.imports 文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dai.dawang.a41.A41$Bean3</span></span><br></pre></td></tr></table></figure><p>修改 selectImports() 方法实现逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本项目配置类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//bean1和bean2可以通过两种方式注入</span></span><br><span class="line"><span class="comment">//方式一 @Import注解注入</span></span><br><span class="line"><span class="comment">//@Import(&#123;AutoConfiguration1.class,AutoConfiguration2.class&#125;)</span></span><br><span class="line"><span class="comment">//方式二 通过实现ImportSelector接口,MyImportSelector实现ImportSelector</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;本项目&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">//将类名写死在代码里</span></span><br><span class="line">        <span class="comment">//            return new String[]&#123;AutoConfiguration1.class.getName(),AutoConfiguration2.class.getName()&#125;;</span></span><br><span class="line">        List&lt;String&gt; names = SpringFactoriesLoader.loadFactoryNames(MyImportSelector.class, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, <span class="literal">null</span>).stream().forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//读取新自动装配文件</span></span><br><span class="line">        <span class="type">ImportCandidates</span> <span class="variable">load</span> <span class="operator">=</span> ImportCandidates.load(MyAutoConfiguration.class, MyAutoConfiguration.class.getClassLoader());</span><br><span class="line">        <span class="comment">//这里的namse是不可变的,</span></span><br><span class="line">        <span class="comment">//SpringFactoriesLoader.loadFactoryNames源码里有 return Collections.unmodifiableMap(result);</span></span><br><span class="line">        <span class="comment">//返回一个不可变的集合 ,所以需要转换为可变数组</span></span><br><span class="line">        names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(names);</span><br><span class="line">        load.forEach(names::add);</span><br><span class="line">        <span class="keyword">return</span> names.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main() 方法后，Spring 容器中的 Bean 多了 一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dai.dawang.a41.A41$Bean3</span><br></pre></td></tr></table></figure><h4 id="补充-Import-的-Improt-的-ImportBeanDefinitionRegistrar"><a href="#补充-Import-的-Improt-的-ImportBeanDefinitionRegistrar" class="headerlink" title="补充 @Import 的@Improt 的 ImportBeanDefinitionRegistrar"></a>补充 @Import 的@Improt 的 ImportBeanDefinitionRegistrar</h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726293250257-08010284-f90b-4821-acc2-bdf2991503e0.png"></p><p>我们刚刚了解的 <code>@Import</code> 的 <code>ImportSelector</code> 属性和 实现类 <code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;DeferredImportSelector&lt;/font&gt;</code></p><h3 id="定义了冲突的-Bean"><a href="#定义了冲突的-Bean" class="headerlink" title="定义了冲突的 Bean"></a>定义了冲突的 Bean</h3><p>第三方装配了 Bean1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟第三方配置类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration1</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;第三方&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户又自行定义了 Bean1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本项目配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//bean1和bean2可以通过两种方式注入</span></span><br><span class="line"><span class="comment">//方式一 @Import注解注入</span></span><br><span class="line"><span class="comment">//@Import(&#123;AutoConfiguration1.class,AutoConfiguration2.class&#125;)</span></span><br><span class="line"><span class="comment">//方式二 通过实现ImportSelector接口</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;本项目&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试的 main() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>, Config.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="comment">//将默认 允许覆盖 设置为 不允许</span></span><br><span class="line"><span class="comment">//    context.getDefaultListableBeanFactory().setAllowBeanDefinitionOverriding(false);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三方 和 本地 配置同时注册bean1</span></span><br><span class="line">        System.out.println(context.getBean(<span class="string">&quot;bean1&quot;</span>, Bean1.class));</span><br><span class="line">        <span class="comment">//发现打印A41.Bean1(name=本项目)</span></span><br><span class="line">        <span class="comment">//是因为:在加载myAutoConfiguration类时, @Import优先于 @Bean,所以先加载第三方才加载本地,后者覆盖前者，使得用户自定义的 Bean 生效</span></span><br><span class="line">        <span class="comment">//在DefaultListableBeanFactory里 private boolean allowBeanDefinitionOverriding = true; 表示默认 允许覆盖</span></span><br><span class="line"></span><br><span class="line">        Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A41.Bean1(name=本项目)</span><br></pre></td></tr></table></figure><p>用户自行定义的 Bean 生效了，这是因为：<code>@Import</code> 导入的 Bean 先于配置类中 <code>@Bean</code> 定义的 Bean 执行，<font style="background-color:#117CEE;">后者覆盖前者</font>，使得用户自定义的 Bean 生效。</p><p>但在 SpringBoot 中不是这样的，当后续添加的 Bean 想覆盖先前添加的 Bean，会出现错误。模拟 SpringBoot 的设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    <span class="comment">// 默认是 true，SpringBoot 修改为 false，使得无法进行覆盖</span></span><br><span class="line">    context.getDefaultListableBeanFactory().setAllowBeanDefinitionOverriding(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name <span class="string">&#x27;bean1&#x27;</span> defined in dai.dawang.a41.A41$Config: Cannot register bean definition [Root bean: class [<span class="literal">null</span>]; scope=; <span class="keyword">abstract</span>=<span class="literal">false</span>; lazyInit=<span class="literal">null</span>; autowireMode=<span class="number">3</span>; dependencyCheck=<span class="number">0</span>; autowireCandidate=<span class="literal">true</span>; primary=<span class="literal">false</span>; factoryBeanName=config; factoryMethodName=bean1; initMethodNames=<span class="literal">null</span>; destroyMethodNames=[(inferred)]; defined in dai.dawang.a41.A41$Config] <span class="keyword">for</span> bean <span class="string">&#x27;bean1&#x27;</span> since there is already [Root bean: class [<span class="literal">null</span>]; scope=; <span class="keyword">abstract</span>=<span class="literal">false</span>; lazyInit=<span class="literal">null</span>; autowireMode=<span class="number">3</span>; dependencyCheck=<span class="number">0</span>; autowireCandidate=<span class="literal">true</span>; primary=<span class="literal">false</span>; factoryBeanName=dai.dawang.a41.A41$AutoConfiguration1; factoryMethodName=bean1; initMethodNames=<span class="literal">null</span>; destroyMethodNames=[(inferred)]; defined in <span class="keyword">class</span> <span class="title class_">path</span> resource [dai/dawang/a41/A41$AutoConfiguration1.class]] bound.</span><br></pre></td></tr></table></figure><p>那这样是合理的吗？</p><p>显然不是。比如 SpringBoot 默认的数据连接池是 Hikari，如果用户想换成 Druid，岂不是做不到？</p><p>实际情况下是能做到的，这又是怎么做到的呢？</p><p>首先需要使用户的配置类中定义的 Bean 先于 <code>@Import</code> 导入的 Bean 添加到 Spring 容器中，</p><p>只需将选择器 <code>MyImportSelector</code> 实现的 <code>ImportSelector</code> 接口更换成其子接口 <code>DeferredImportSelector</code> 即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name <span class="string">&#x27;bean1&#x27;</span> defined in <span class="keyword">class</span> <span class="title class_">path</span> resource [dai/dawang/a41/A41$AutoConfiguration1.class]: Cannot register bean definition [Root bean: class [<span class="literal">null</span>]; scope=; <span class="keyword">abstract</span>=<span class="literal">false</span>; lazyInit=<span class="literal">null</span>; autowireMode=<span class="number">3</span>; dependencyCheck=<span class="number">0</span>; autowireCandidate=<span class="literal">true</span>; primary=<span class="literal">false</span>; factoryBeanName=dai.dawang.a41.A41$AutoConfiguration1; factoryMethodName=bean1; initMethodNames=<span class="literal">null</span>; destroyMethodNames=[(inferred)]; defined in <span class="keyword">class</span> <span class="title class_">path</span> resource [dai/dawang/a41/A41$AutoConfiguration1.class]] <span class="keyword">for</span> bean <span class="string">&#x27;bean1&#x27;</span> since there is already [Root bean: class [<span class="literal">null</span>]; scope=; <span class="keyword">abstract</span>=<span class="literal">false</span>; lazyInit=<span class="literal">null</span>; autowireMode=<span class="number">3</span>; dependencyCheck=<span class="number">0</span>; autowireCandidate=<span class="literal">true</span>; primary=<span class="literal">false</span>; factoryBeanName=config; factoryMethodName=bean1; initMethodNames=<span class="literal">null</span>; destroyMethodNames=[(inferred)]; defined in dai.dawang.a41.A41$Config] bound.</span><br></pre></td></tr></table></figure><p>尽管还是出现了异常，但异常信息中显示的是在配置类定义的 Bean 已存在，第三方装配的 Bean 无法再添加，这表明 Bean 的添加顺序修改成功。</p><p>最后在第三方定义的 Bean 上添加 <code>@ConditionalOnMissingBean</code> 注解，表示容器中存在同名的 Bean 时忽略该 Bean 的添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟第三方配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration1</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span><span class="comment">//仅当BeanFactory中没有满足指定要求的bean时才匹配的条件</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;第三方&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A41.Bean1(name=本项目)</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><font style="background-color:rgba(255, 255, 255, 0);">那么 </font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;ImportBeanDefinitionRegistrar&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">属性如何使用呢?</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ImportBeanDefinitionRegistrar属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Import注解如何使用 ImportBeanDefinitionRegistrar属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>属性 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();</span></span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        <span class="comment">// AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span></span><br><span class="line"></span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>, Config.class);</span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">        System.out.println(context.getBean(User.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">            <span class="comment">// 构建 BeanDefinition</span></span><br><span class="line">            <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(User.class)</span><br><span class="line">                    .addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;daidawang&quot;</span>)</span><br><span class="line">                    .addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">24</span>)</span><br><span class="line">                    .getBeanDefinition();</span><br><span class="line">            <span class="comment">// 注册构建好的 BeanDefinition</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;user&quot;</span>, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor</span><br><span class="line">config</span><br><span class="line">user</span><br><span class="line">ImportBeanDefinitionRegistrar属性.User(name=daidawng, age=<span class="number">24</span>)</span><br></pre></td></tr></table></figure><h2 id="41-2-Aop-自动配置"><a href="#41-2-Aop-自动配置" class="headerlink" title="41.2 Aop 自动配置"></a>41.2 Aop 自动配置</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;AopAutoConfiguration&lt;/font&gt;</code>类完成 AOP 自动装配, </p><p><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;AopAutoConfiguration&lt;/font&gt;</code>类通过<code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;@Conditionalxxx&lt;/font&gt;</code>注解的判断后,</p><p>都会往 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;BeanDefinition注册表:  BeanDefinitionRegistry &lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>里添加<font style="color:#DF2A3F;"> </font><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;AnnotationAwareAspectJAutoProxyCreator&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>的 Bean 完成AOP 自动装配。</p><p>确保当前模块导入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AopAuto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: aop自动配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopAuto</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        <span class="comment">//在给定的注册表中注册所有相关的注释后处理器。</span></span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(</span><br><span class="line">                context.getDefaultListableBeanFactory()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;AopAutoConfiguration.class.getName()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">dai.dawang.a41.aop自动配置.AopAuto$Config</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration</span><br><span class="line">org.springframework.aop.config.internalAutoProxyCreator</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</span><br></pre></td></tr></table></figure><p>打印内容以 ai.dawang.a41.aop自动配置.AopAuto$Config </p><p>为分割线，上方是添加的一些后置处理器 ,下方是 AOP 自动装配添加的 Bean</p><p>点击进入 <code>AopAutoConfiguration</code> </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726288237993-3b23504b-9c9f-4573-9ae5-255b783e62a4.png"></p><p>类上添加注解 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;@ConditionOnProperty&lt;/font&gt;</code>的配置信息: 如果文件中存在 前缀 为 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;spring.aop&lt;/font&gt;</code> ,名称 为 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;auto&lt;/font&gt;</code>的 key,且对应的 value 是 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;true&lt;/font&gt;</code>时,配置类 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;AopAutoConfiguration&lt;/font&gt;</code>生效, 属性 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;matchIfMissing&lt;/font&gt;</code>表示:如果配置文件中未显式配置,该配置类依然生效。</p><p>不使用配置文件,使用 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;StandardEnvironment&lt;/font&gt;</code>指定 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;spring.aop.auto&lt;/font&gt;</code>的值为 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;false&lt;/font&gt;</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">       <span class="comment">//ApplicationEnvironment是StandardEnvironment的子类</span></span><br><span class="line">       <span class="type">StandardEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">       <span class="comment">//添加一个 简单命令行属性资源, 主要参数是main方法的参数args ,及选项参数需要以--开头</span></span><br><span class="line">       <span class="comment">//AopAutoConfiguration类上注解@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;auto&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line">       environment.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(<span class="string">&quot;--spring.aop.auto=false&quot;</span>));</span><br><span class="line">       context.setEnvironment(environment);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//--snip--</span></span><br><span class="line">&#125;&#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">dai.dawang.a41.aop自动配置.AopAuto$Config</span><br></pre></td></tr></table></figure><p>如果 <code>spring.aop.auto</code> 的值是 <code>true</code>，又会成功添加上 AOP 自动装配的 Bean。</p><p>再看 <code>AopAutoConfiguration</code>的内部类;</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726289352925-362f6ab5-150a-4f35-abdf-452d5692ba10.png"></p><p>其内部存在两个类：<code>AspectJAutoProxyingConfiguration</code> 和 <code>ClassProxyingConfiguration</code>。</p><p>使用了 <code>@ConditionalOnClass</code> 注解判断 Advice.class 存在时，<code>AspectJAutoProxyingConfiguration</code> 生效；</p><p>使用 <code>@ConditionalOnMissingClass</code> 注解判断 org.aspectj.weaver.Advice 不存在时，<code>ClassProxyingConfiguration</code> 生效。</p><p>由于先前导入了 <code>spring-boot-starter-aop</code> 依赖，Advice.class 是存在的，<code>AspectJAutoProxyingConfiguration</code> 将生效。</p><p><code>AspectJAutoProxyingConfiguration</code> 内部又有两个配置类：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726289459223-c570b37d-0e90-430d-b845-9dcd3d86a05e.png"></p><p>这两个配置类通过使用 <code>@ConditionalOnProperty</code> 注解判断配置文件中是否存在 <code>spring.aop.proxy-target-class</code> 配置来让对应的配置类生效。</p><p>由于并未显式配置，因此 <code>CglibAutoProxyConfiguration</code> 将生效。</p><p>无论哪个配置类生效，它们都被 <code>@EnableAspectJAutoProxy</code> 标记，这个注解相当于是添加了些配置的 <code>@Import</code> 注解：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726289542954-b6ecce77-4cd3-4e76-9f97-c758939a9e79.png"></p><p>所以 <code>@EnableAspectJAutoProxy</code> 作用是向 Spring 容器中添加 AspectJAutoProxyRegistrar 类型的 Bean。</p><p><code>AspectJAutoProxyRegistrar</code> 实现了 <code>ImportBeanDefinitionRegistrar</code> 接口，可以使用编程的方式来注册一些 Bean：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726289752110-5a664e40-7173-4cb5-86ac-4761658b7324.png"></p><p><code>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary()</code> 方法是注册 Bean 的主要逻辑：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726289811029-8cebc3b9-3ffe-4579-a3b9-b79d19e0ba72.png"></p><p>最终注册了 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;AnnotationAwareAspectJAutoProxyCreator&lt;/font&gt;</code>。</p><p>使用打印的内容 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;org.springframework.aop.config.internalAutoProxyCreator&lt;/font&gt;</code>作为名称，获取 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;AnnotationAwareAspectJAutoProxyCreator&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>类型的 Bean，并查看<code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;proxyTargetClass&lt;/font&gt;</code>属性的值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    <span class="comment">//ApplicationEnvironment是StandardEnvironment的子类</span></span><br><span class="line">    <span class="type">StandardEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">    <span class="comment">//添加一个 简单命令行属性资源, 主要参数是main方法的参数args ,及选项参数需要以--开头</span></span><br><span class="line">    <span class="comment">//AopAutoConfiguration类上注解@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;auto&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line">    environment.getPropertySources().addLast(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(<span class="string">&quot;--spring.aop.auto=true&quot;</span>));</span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在给定的注册表中注册所有相关的注释后处理器。</span></span><br><span class="line">    AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line"></span><br><span class="line">    context.registerBean(Config.class);</span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@EnableAspectJAutoProxy</span>(proxyTargetClass = true) 的作用是:</span></span><br><span class="line"><span class="comment">     * 根据给定的<span class="doctag">@EnableAspectJ</span> AutoProxy注释，在当前BeanDefinition注册表中适当注册AnnotationAwareAspectJAutoProxyCreator。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 证明是:</span></span><br><span class="line"><span class="comment">     * 点击进入AopAutoConfiguration，点击进入<span class="doctag">@EnableAspectJAutoProxy</span>(proxyTargetClass = true)</span></span><br><span class="line"><span class="comment">     * 点击进入<span class="doctag">@Import</span>(AspectJAutoProxyRegistrar.class)，</span></span><br><span class="line"><span class="comment">     * 点击进入opConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span></span><br><span class="line"><span class="comment">     * 点击进入return registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry, (Object)null);</span></span><br><span class="line"><span class="comment">     * 看到return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);</span></span><br><span class="line"><span class="comment">     * 注意参数AnnotationAwareAspectJAutoProxyCreator类</span></span><br><span class="line"><span class="comment">     * AnnotationAwareAspectJAutoProxyCreator是BeanPostProcessor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">AnnotationAwareAspectJAutoProxyCreator</span> <span class="variable">creator</span> <span class="operator">=</span> context.getBean(</span><br><span class="line">            <span class="string">&quot;org.springframework.aop.config.internalAutoProxyCreator&quot;</span>, AnnotationAwareAspectJAutoProxyCreator.class);</span><br><span class="line">    System.out.println(creator.isProxyTargetClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>还记得 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;proxyTargetClass&lt;/font&gt;</code>属性是做什么的吗?</p><p>请参考 :  <a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/mbbgndf2venlqh94">黑马四十九讲AOP</a> 6.3 .spring 根据什么信息选择不同的代理？ 章节</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726290507744-f9c07f25-77ad-48e8-8718-956ddb88cb39.png"></p><h2 id="41-3-数据库相关的自动配置"><a href="#41-3-数据库相关的自动配置" class="headerlink" title="41.3 数据库相关的自动配置"></a>41.3 数据库相关的自动配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DataSource-自动配置"><a href="#DataSource-自动配置" class="headerlink" title="DataSource 自动配置"></a>DataSource 自动配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DataSourceAuto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 数据库相关的自动配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAuto</span> &#123;</span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                    <span class="comment">// 数据源自动配置类</span></span><br><span class="line">                    DataSourceAutoConfiguration.class.getName(),</span><br><span class="line">                    <span class="comment">// mybatis自动配置类</span></span><br><span class="line">                    MybatisAutoConfiguration.class.getName(),</span><br><span class="line">                    <span class="comment">// 事务自动配置类(事务回滚,提交)</span></span><br><span class="line">                    DataSourceTransactionManagerAutoConfiguration.class.getName(),</span><br><span class="line">                    <span class="comment">// 事务自动配置类(事务切面,切点,事务控制)</span></span><br><span class="line">                    TransactionAutoConfiguration.class.getName()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DataSourceAuto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 数据库相关的自动配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAuto</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">        environment.getPropertySources().addLast(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(</span><br><span class="line">                        <span class="string">&quot;--spring.datasource.url=jdbc:mysql://localhost:3306/test&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;--spring.datasource.username=root&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;--spring.datasource.password=root&quot;</span></span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        context.setEnvironment(environment);</span><br><span class="line"></span><br><span class="line">        context.refresh();</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resourceDescription</span> <span class="operator">=</span> context.getBeanDefinition(name).getResourceDescription();</span><br><span class="line">            map.computeIfAbsent(resourceDescription, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(name);</span><br><span class="line"><span class="comment">//            System.out.println(name + &quot; 来源： &quot; + resourceDescription);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.forEach((k, v) -&gt; System.out.println(<span class="string">&quot;来源 &quot;</span>+k + <span class="string">&quot;= &quot;</span> +<span class="string">&quot;名称 :&quot;</span>+ v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">来源 <span class="keyword">class</span> <span class="title class_">path</span> resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]= 名称 :[jdbcConnectionDetailsHikariBeanPostProcessor, dataSource]</span><br></pre></td></tr></table></figure><p>名叫 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;dataSource&lt;/font&gt;</code>的 Bean 的来源是 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceConfiguration&lt;/font&gt;</code>,而不是 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceAutoConfiguration&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>呢?</p><p>进入 <code>DataSourceAutoConfiguration</code>源码,<img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726630855994-2654aafb-4a53-4296-a7ce-3b36889775f4.png"></p><p>内部类 <code>EmbeddedDatabaseConfiguration</code> 和 <code>PooledDataSourceConfiguration</code> 都被 <code>@Conditional</code>注解标记, </p><p>当项目支持内嵌数据源时,  <code>EmbeddedDatabaseConfiguration</code> 生效</p><p>当项目支持数据库连接池的数据源时,<code>PooledDataSourceConfiguration</code>生效</p><p>SpringBoot 默认数据库连接池是 <code>Hikari</code>,</p><p>所以<code>PooledDataSourceConfiguration</code>生效,</p><p>通过 <code>@Import</code>导入一系列 Bean  都是 <code>DataSourceConfiguration</code>的内部类,</p><p>所以 <code>DataSource</code>的 Bean 来源是 <code>DataSourceConfiguration</code>。</p><p>由于导入了 <code>mybatis-spring-boot-starter</code>，其内部依赖 <code>mybatis-spring-boot-jdbc</code>，而它又依赖了 <code>HikariCP</code>，因此最终数据库连接池 <code>Hikari</code> 生效：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726631583391-26266e2f-0a63-407f-a730-65bb3b32049e.png"></p><p>在 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;Hikari#dataSource()&lt;/font&gt;</code> 方法中，接受一个 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceProperties&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>类型的参数，这要求 Spring 容器中存在 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceProperties&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>类型的 Bean。</p><p>在最初的 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceAutoConfiguration&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>自动配置类上有个 <code>@&lt;font style=&quot;color:#DF2A3F;&quot;&gt;EnableConfigurationProperties&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>注解，它将 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceProperties&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>添加到容器中：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726631691140-5d6c6aa0-3904-4a7c-b72c-1b550695537d.png"></p><p>在 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceProperties&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>中会绑定配置文件中以 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;spring.datasource&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>为前缀的配置：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726631726158-e4a5257f-c926-4e48-8948-e8c17ee63076.png"></p><p>获取 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSourceProperties&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>类型的 Bean，并打印其 url、username 和 password：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(context.getDefaultListableBeanFactory());</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">        environment.getPropertySources().addLast(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(</span><br><span class="line">                        <span class="string">&quot;--spring.datasource.url=jdbc:mysql://localhost:3306/test&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;--spring.datasource.username=root&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;--spring.datasource.password=root&quot;</span></span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        context.setEnvironment(environment);</span><br><span class="line"></span><br><span class="line">        context.refresh();</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resourceDescription</span> <span class="operator">=</span> context.getBeanDefinition(name).getResourceDescription();</span><br><span class="line">            map.computeIfAbsent(resourceDescription, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(name);</span><br><span class="line"><span class="comment">//            System.out.println(name + &quot; 来源： &quot; + resourceDescription);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map.forEach((k, v) -&gt; System.out.println(&quot;来源 &quot;+k + &quot;= &quot; +&quot;名称 :&quot;+ v));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">DataSourceProperties</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(DataSourceProperties.class);</span><br><span class="line">        System.out.println(bean.getUrl());</span><br><span class="line">        System.out.println(bean.getUsername());</span><br><span class="line">        System.out.println(bean.getPassword());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">root</span><br><span class="line">root</span><br></pre></td></tr></table></figure><h2 id="Mybatis-自动配置"><a href="#Mybatis-自动配置" class="headerlink" title="Mybatis 自动配置"></a>Mybatis 自动配置</h2><p>进入 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;MybatisAutoConfiguration&lt;/font&gt;</code>:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726633231976-e577db94-4d8e-40d7-bf73-b0bcf74c232a.png"></p><h3 id="MybatisAutoConfiguration-的条件注解"><a href="#MybatisAutoConfiguration-的条件注解" class="headerlink" title="MybatisAutoConfiguration 的条件注解"></a>MybatisAutoConfiguration 的条件注解</h3><p> <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;MybatisAutoConfiguration&lt;/font&gt;</code> 生效的条件有两个：</p><ul><li>类路径下有<font style="color:#bcbec4;background-color:#1e1f22;">SqlSessionFactory, SqlSessionFactoryBean</font></li><li>Spring 容器中 有且仅有 一个 <code>DataSource</code>的 bean添加了 ]</li></ul><p>同时添加了 <code>MybatisProperties</code> 类型的 Bean 到 Spring 容器中，并与配置文件中以 mybatis 为前缀的信息绑定。</p><p><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;@AutoConfigureAfter&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>注解指定了当前自动配置类在 <code>DataSourceAutoConfiguration</code> 和 <code>MybatisLanguageDriverAutoConfiguration</code> 两个自动配置类解析完成之后再解析。</p><hr><p>接下来是 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;sqlSessionFactory()&lt;/font&gt;</code>方法:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726632554627-46e0dd6b-9a1e-4d11-8679-1822cf8eba1e.png"></p><p>依赖 Spring 容器的<code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;DataSource&lt;/font&gt;</code>,当容器中不存在 <code>SqlSessionFactory</code> 时，将其添加到 Spring 容器中。</p><hr><h3 id="SqlSessionTemplate-的作用"><a href="#SqlSessionTemplate-的作用" class="headerlink" title="SqlSessionTemplate 的作用"></a>SqlSessionTemplate 的作用</h3><p>然后是<font style="color:#DF2A3F;"> </font><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;sqlSessionTemplate()&lt;/font&gt; </code> 方法，它与添加 <code>SqlSessionFactory</code> 到 Spring 容器的逻辑一样：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726632654337-b421433a-d488-4078-b770-2fa0b1832440.png"></p><p><code>SqlSessionTemplate</code>也是 <code>SqlSession</code>的实现,它提供与当前线程绑定的 <code>SqlSession</code>。</p><p>多个方法调用,如果它们来自同一个线程,那么获取的 <code>SqlSession</code>对象是同一个。</p><p>这也是 <code>SqlSessionTemplate</code>与 <code>DefultSqlSession</code>的区别。</p><p>在 Mybatis 中,<code>MapperFactoryBean</code>将接口转为对象,核心是 <code>getObjext()</code>方法,方法使用的是 <code>SqlSessionTemplate</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726633003152-8183f69b-bf4c-4e57-9150-ae82fce0b114.png"></p><hr><h3 id="内部类MapperScannerRegistrarNotFoundConfiguration"><a href="#内部类MapperScannerRegistrarNotFoundConfiguration" class="headerlink" title="内部类MapperScannerRegistrarNotFoundConfiguration"></a>内部类MapperScannerRegistrarNotFoundConfiguration</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726633456617-ad9f4fea-b7fe-41b2-9455-03054579e63f.png"></p><p> <code>@ConditionalOnMissingBean</code> 判断 Spring 容器中缺失 <code>MapperFactoryBean</code> 和 <code>MapperScannerConfigurer</code> 时，该配置类生效。</p><p>生效时利用 <code>@Import</code> 导入 <code>AutoConfiguredMapperScannerRegistrar</code>：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726634430103-b8190304-473b-46bc-93e5-98c2017587c0.png"></p><p><code>AutoConfiguredMapperScannerRegistrar</code> 实现了 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;ImportBeanDefinitionRegistrar&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>接口，允许通过编程的方式加 Bean 添加到 Spring 容器中(详细请 向上查找 : <strong>41.1 补充 @Import 的@Improt 的 ImportBeanDefinitionRegistrar</strong>)，而这里是去扫描 Mapper 接口，将其转换为对象添加到 Spring 容器中。</p><p>在 main 方法所在类的包路径下创建 mapper 包,并创建 2 个带@Mapper 一个不带共计三个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mapper1</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mapper2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mapper3</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main() 方法，查看 Mapper1 和 Mapper2 是否被添加到 Spring 容器中。</p><p>结果是否定的。因为 <strong>没有设置要扫描的包路径</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> DataSourceAuto.class.getPackageName();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前包名: &quot;</span> + packageName);</span><br><span class="line">    AutoConfigurationPackages.register(context.getDefaultListableBeanFactory(),</span><br><span class="line">            packageName);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前包名: dai.dawang.a41.数据库相关的自动配置</span><br><span class="line">来源 file [D:\workspace\advanced-spring\boot\target\classes\dai\dawang\a41\数据库相关的自动配置\mapper\Mapper1.class]= 名称 :[mapper1]</span><br><span class="line">来源 file [D:\workspace\advanced-spring\boot\target\classes\dai\dawang\a41\数据库相关的自动配置\mapper\Mapper2.class]= 名称 :[mapper2]</span><br></pre></td></tr></table></figure><h4 id="MapperScan-注解与-MybatisAutoConfiguration-在功能区别"><a href="#MapperScan-注解与-MybatisAutoConfiguration-在功能区别" class="headerlink" title="@MapperScan 注解与 MybatisAutoConfiguration 在功能区别"></a>@MapperScan 注解与 MybatisAutoConfiguration 在功能区别</h4><ul><li><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;@MapeerScan&lt;/font&gt;</code> 可以指定扫描路径, 未指定时会把引导类范围内的所有接口当做 <code>Mapper</code> 接口；</li><li><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;MybatisAutoConfiguration&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>关注所有被 <code>@Mapper</code> 注解标记的类并忽略 未被标记的接口。</li></ul><h2 id="事务自动配置"><a href="#事务自动配置" class="headerlink" title="事务自动配置"></a>事务自动配置</h2><p>事务自动配置与  <code>DataSourceTransactionManagerAutoConfiguration</code>、<code>TransactionAutoConfiguration</code> 有关。</p><p><code>DataSourceTransactionManagerAutoConfiguration</code> 配置了 <code>DataSourceTransactionManager</code> 用来执行事务的提交、回滚操作。</p><p><code>TransactionAutoConfiguration</code> 在功能上对标 <code>@EnableTransactionManagement</code>，包含以下三个 Bean：</p><ul><li><code>BeanFactoryTransactionAttributeSourceAdvisor</code>：事务切面类，包含通知和切点</li><li><code>TransactionInterceptor</code>：事务通知类，由它在目标方法调用前后加入事务操作</li><li><code>AnnotationTransactionAttributeSource</code>：解析 @Transactional 及事务属性，还包含了切点功能</li></ul><p>如果自定义了 DataSourceTransactionManager 或是在引导类加了 @EnableTransactionManagement，则以自定义为准。</p><h2 id="MVC-自动配置"><a href="#MVC-自动配置" class="headerlink" title="MVC 自动配置"></a>MVC 自动配置</h2><p>MVC 自动配置用到 4 个类:</p><ul><li>配置内嵌 Tomcat 服务器工厂:ServletWebServerFactoryAutoConfiguration</li><li>配置 DispatchSerlet:DispatcherServletAutoConfiguration</li><li>配置 WebMVC 各种组件:WebMvcAutoConfiguration</li><li>配置 MVC 的错误处理: ErrorMvcAutoConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcAuto</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigServletWebServerApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>();</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> context.getBeanDefinition(name).getResourceDescription();</span><br><span class="line">            <span class="keyword">if</span> (source != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot; 来源:&quot;</span> + source);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                    <span class="comment">// 配置内嵌 Tomcat 服务器工厂</span></span><br><span class="line">                    ServletWebServerFactoryAutoConfiguration.class.getName(),</span><br><span class="line">                    <span class="comment">// 配置 DispatcherServlet</span></span><br><span class="line">                    DispatcherServletAutoConfiguration.class.getName(),</span><br><span class="line">                    <span class="comment">// 配置 WebMVC 各种组件</span></span><br><span class="line">                    WebMvcAutoConfiguration.class.getName(),</span><br><span class="line">                    <span class="comment">// 配置 MVC 的错误处理</span></span><br><span class="line">                    ErrorMvcAutoConfiguration.class.getName()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tomcatServletWebServerFactory: 来源ServletWebServerFactoryConfiguration$EmbeddedTomcat </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726654601922-55f85af4-5614-4fe1-ada8-b662a7975479.png"></p><hr><p>来源 class path resource [org&#x2F;springframework&#x2F;boot&#x2F;autoconfigure&#x2F;web&#x2F;servlet&#x2F;ServletWebServerFactoryAutoConfiguration.class]&#x3D; 名称 :[servletWebServerFactoryCustomizer, tomcatServletWebServerFactoryCustomizer]</p><p>分别表示 web 的扩展 与 tomcat 的扩展</p><hr><p>来源 class path resource [org&#x2F;springframework&#x2F;boot&#x2F;autoconfigure&#x2F;web&#x2F;servlet&#x2F;DispatcherServletAutoConfiguration$DispatcherServletConfiguration.class]&#x3D; 名称 :[dispatcherServlet]</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726654866530-9e98276e-fb90-4d8a-91ef-49f73a53b39b.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726654903537-cf0472f3-c3e7-4138-81b4-284845432f8d.png"></p><hr><p>来源 null &#x3D; 名称 :[org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration]</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1726655087738-cae4ba73-eed7-4944-afe3-a820a386a512.png"></p><h2 id="自定义自动配置类"><a href="#自定义自动配置类" class="headerlink" title="自定义自动配置类"></a>自定义自动配置类</h2><p>在 SpringBoot 自动配置自定义组件分为两步:</p><ol><li>在类路径下自定义 <code>META-INF/spring.factories</code>文件,以 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> 为 key,设置需要自动装配的自定义组件的全限定类名为 value</li><li>编写配置类,添加 <code>@EnableAutoConfiguration</code>注解</li></ol><h3 id="SpringBoot2-7-0-及其以后版本"><a href="#SpringBoot2-7-0-及其以后版本" class="headerlink" title="SpringBoot2.7.0 及其以后版本"></a>SpringBoot2.7.0 及其以后版本</h3><p>在类路径下自定义 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件,文件 每一行 表示需要自动装配的类的全限定类名,所以不要随便换行</p><h1 id="42-条件装配底层"><a href="#42-条件装配底层" class="headerlink" title="42.条件装配底层"></a>42.条件装配底层</h1><h2 id="42-1-Conditional"><a href="#42-1-Conditional" class="headerlink" title="42.1@Conditional"></a>42.1@Conditional</h2><p>在 SpringBoot 的自动配置中,经常看到 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;@Conditional&lt;/font&gt;</code>注解,该注解可以按条件加载配置类</p><p><code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;@Conditional&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>注解是通过指定的 Class 实现 <code>Condition</code>接口 进行判断</p><p>现在判断类路径下是否存在 <code>org.springframework.boot.autoconfigure.jdbc.DataSourceProperties</code> 来加载不同的配置类, 当存在 <code>DataSourceProperties</code> 时加载 <code>AutoConfiguration1</code>,反之加载 <code>AutoConfiguration2</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dai.dawang.a42条件装配底层;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dai.dawang.a41.自动配置原理.A41;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: a42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 条件装配</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a42</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line"><span class="comment">/*        context.registerBean(AutoConfiguration1.class);</span></span><br><span class="line"><span class="comment">        context.registerBean(AutoConfiguration2.class);*/</span></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//    @Import(&#123;AutoConfiguration1.class, AutoConfiguration2.class&#125;)</span></span><br><span class="line">    <span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;AutoConfiguration1.class.getName(), AutoConfiguration2.class.getName()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCondition1</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.isPresent(<span class="string">&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceProperties&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCondition2</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !ClassUtils.isPresent(<span class="string">&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceProperties&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Conditional(MyCondition1.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration1</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;bean1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@Conditional(MyCondition2.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration2</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>(<span class="string">&quot;bean2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor</span><br><span class="line">dai.dawang.a42条件装配底层.a42$Config</span><br><span class="line">dai.dawang.a42条件装配底层.a42$AutoConfiguration1</span><br><span class="line">bean1</span><br></pre></td></tr></table></figure><p>项目导入了,所以MyCondition1 返回 ture,所以 AutoConfiguration1 的@Conditional 生效,所以导入 bean1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="42-2-ConditionalOnXxx"><a href="#42-2-ConditionalOnXxx" class="headerlink" title="42.2@ConditionalOnXxx"></a>42.2@ConditionalOnXxx</h2><p> <code>@ConditionalOnXxx</code> 注解的使用，这种注解是将某个 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;@Conditional&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>的判断进行了封装，比如 <code>ConditionalOnClass</code> 就是用于判断某个 Class 是否存在。</p><p>因此针对上文中的代码可以做出修改：</p><p>自定义 <code>@ConditionalOnClass</code>注解,填入需要判断的全限定类名和判断条件</p><p>移除模拟的第三方配置上的 <code>@Conditional</code>注解,而是使用自定义的 <code>@ConditionalOnClass</code></p><p>重写 <code>Condition#matches() </code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: a42ConditionalOnXxx注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: <span class="doctag">@ConditionalOnXxx</span>注解的原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a42ConditionalOnXxx</span>注解 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line">        <span class="comment">/*        context.registerBean(AutoConfiguration1.class);</span></span><br><span class="line"><span class="comment">        context.registerBean(AutoConfiguration2.class);*/</span></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="comment">//    @Import(&#123;AutoConfiguration1.class, AutoConfiguration2.class&#125;)</span></span><br><span class="line">    <span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;AutoConfiguration1.class.getName(), AutoConfiguration2.class.getName()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ConditionalOnBean</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; annotationAttributes = metadata.getAnnotationAttributes(ConditionalOnClass.class.getName());</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationAttributes.get(<span class="string">&quot;classNames&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">present</span> <span class="operator">=</span>Boolean.FALSE;</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtil.isNotEmpty(o)) &#123;</span><br><span class="line">                List&lt;String&gt; collect = Arrays.stream((String[]) o).toList();</span><br><span class="line">                <span class="keyword">for</span> (String name : collect) &#123;</span><br><span class="line">                    present = ClassUtils.isPresent(name, <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exits</span> <span class="operator">=</span> ((<span class="type">boolean</span>) annotationAttributes.get(<span class="string">&quot;exits&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> exits ? present : !present;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建自定义注解</span></span><br><span class="line">    <span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Conditional(ConditionalOnBean.class)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">exits</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>; <span class="comment">//true表示存在, false表示不存在</span></span><br><span class="line"></span><br><span class="line">        String[] classNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(classNames = &quot;org.springframework.boot.autoconfigure.jdbc.DataSourceProperties&quot;, exits = true)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration1</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>(<span class="string">&quot;bean1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(classNames = &quot;org.springframework.boot.autoconfigure.jdbc.DataSourceProperties&quot;, exits = false)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguration2</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>(<span class="string">&quot;bean2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于引入了 <code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;mybatis-spring-boot-starte&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);"> 所以打印 bean1：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor</span><br><span class="line">dai.dawang.a42条件装配底层.a42ConditionalOnXxx注解$Config</span><br><span class="line">dai.dawang.a42条件装配底层.a42ConditionalOnXxx注解$AutoConfiguration1</span><br><span class="line">bean1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring四十九讲AOP</title>
      <link href="/2024/08/19/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2AOP/"/>
      <url>/2024/08/19/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2AOP/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="AspectJ-编译器增强"><a href="#AspectJ-编译器增强" class="headerlink" title="AspectJ 编译器增强"></a>AspectJ 编译器增强</h1><p> 创建一个 SpringBoot 项目，除了常见的依赖外，记得导入 AOP 相关的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个 Service 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个切面类，注意这个切面类没有被 Spring 管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* indi.mofan.service.MyService.foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个用于测试的主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A10Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(A10Application.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A10Application.class, args);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;service class: &#123;&#125;&quot;</span>, service.getClass());</span><br><span class="line">        service.foo();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行主启动类后，控制台会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indi.mofan.A10Application                : service class: class indi.mofan.service.MyService</span><br><span class="line">indi.mofan.aop.MyAspect                  : before()</span><br><span class="line">indi.mofan.service.MyService             : foo()</span><br></pre></td></tr></table></figure><p>如果完全按照上述步骤进行，会发现 输出结果和给出的结果不一样。</p><p>在揭晓答案前，查看 service.getClass() 打印出的信息，它打印出的是原始类的 Class 信息，而非代理类的 Class 信息。</p><p>如果要问到 Spring AOP 的实现原理是什么，一下就能想到的是使用了代理，但这里并没有使用代理，依旧实现了增强。</p><p>这是因为在 pom.xml 中还引入了一个插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectj-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">complianceLevel</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">complianceLevel</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">showWeaveInfo</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWeaveInfo</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Xlint</span>&gt;</span>ignore<span class="tag">&lt;/<span class="name">Xlint</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- use this goal to weave all your main classes --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- use this goal to weave all your test classes --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后不在使用 IDEA 自带的编译器进行编译，而是使用 Maven 编译，即：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724062395607-3a96908b-7b8c-4659-9fab-52657fd40ea3.png#averageHue=%23262e3a&clientId=uf41de5c2-5f76-4&from=paste&height=355&id=ua09004a1&originHeight=399&originWidth=654&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=41260&status=done&style=none&taskId=u3f92f612-dc0f-498f-87e4-702803c82d5&title=&width=581.3333333333334" alt="image.png"></p><p>编译之后查看生成的 target 文件夹下的 MyService.class 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        MyAspect.aspectOf().before();</span><br><span class="line">        log.info(<span class="string">&quot;foo()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在 foo() 方法中增加了一行代码：MyAspect.aspectOf().before();，也就是这行代码对 foo() 方法实现了增强。</p><p>这种方式属于编译时增强，和 Lombok 类似。</p><p>既然如此，那岂不是说使用这种方式时，没有 Spring 容器也能实现方法的增强？</p><p>确实如此。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A10Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(A10Application.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">        log.info(<span class="string">&quot;service class: &#123;&#125;&quot;</span>, service.getClass());</span><br><span class="line">        service.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indi.mofan.A10Application - service class: class indi.mofan.service.MyService</span><br><span class="line">indi.mofan.aop.MyAspect - before()</span><br><span class="line">indi.mofan.service.MyService - foo()</span><br></pre></td></tr></table></figure><p>除此之外，使用这种方式，就算 foo() 方法是静态方法，也能够成功增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A10Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyService.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">di.mofan.aop.MyAspect - before()</span><br><span class="line">indi.mofan.service.MyService - foo()</span><br></pre></td></tr></table></figure><blockquote><p>遇到的一些问题</p></blockquote><ul><li>使用 Lombok 的一些注解后无法编译通过。</li></ul><p>答：本节只是做个小测试，实际开发时一般不会这么使用，因此移除 Lombok 的注解即可。比如本节采用的日志打印方式不再使用 @Slf4j，而是使用了诸如以下的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(MyService.class);</span><br></pre></td></tr></table></figure><ul><li>完全按照一样的步骤进行，但运行后的方法依旧没有增强。</li></ul><p>答：这是由于 IDEA 在执行代码前又编译了一遍代码，覆盖了使用 Maven 编译生成字节码文件，导致增强失败。对 IDEA 进行设置，勾选 自动构建项目：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724062636288-30dacf57-0d25-46e6-aff8-c198dbb15956.png#averageHue=%23242931&clientId=uf41de5c2-5f76-4&from=paste&height=613&id=u8dc369d4&originHeight=690&originWidth=969&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=160339&status=done&style=none&taskId=u6ae02ea6-a7d8-4e86-8fac-53f5451f13a&title=&width=861.3333333333334" alt="image.png"></p><ul><li>尽量使用 JDK8，因为 aspectj-maven-plugin 可能暂不支持高版本的 JDK。</li></ul><h1 id="Agent-类加载"><a href="#Agent-类加载" class="headerlink" title="Agent 类加载"></a>Agent 类加载</h1><h2 id="使用-Agent-类加载"><a href="#使用-Agent-类加载" class="headerlink" title="使用 Agent 类加载"></a>使用 Agent 类加载</h2><p>重新创建一个 SpringBoot 项目，同样需要导入 AOP 相关的依赖。</p><p>一个 Service 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo()&quot;</span>);</span><br><span class="line">        bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bar()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个切面类，注意这个切面类没有被 Spring 管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* indi.mofan.service.MyService.*())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个用于测试的主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A11Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A11Application.class, args);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        log.info(<span class="string">&quot;service class: &#123;&#125;&quot;</span>, service.getClass());</span><br><span class="line">        service.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行主启动类后，控制台会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ndi.mofan.A11Application                : service class: class indi.mofan.service.MyService</span><br><span class="line">indi.mofan.aop.MyAspect                  : before()</span><br><span class="line">indi.mofan.service.MyService             : foo()</span><br><span class="line">indi.mofan.aop.MyAspect                  : before()</span><br><span class="line">indi.mofan.service.MyService             : bar()</span><br></pre></td></tr></table></figure><p>如果完全按照上述步骤进行，会发现输出结果和给出的结果不一样。</p><p>那是怎么达到增强的效果呢？</p><p>首先得在 resources 目录下新建 META-INF 文件夹，并在 META-INF 目录下新建 aop.xml 文件，其内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aspectj</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspects</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    切面类全限定类名    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aspect</span> <span class="attr">name</span>=<span class="string">&quot;indi.mofan.aop.MyAspect&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">weaver</span> <span class="attr">options</span>=<span class="string">&quot;-verbose -showWeaveInfo&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--      被增强方法所在类的全限定类名      --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">within</span>=<span class="string">&quot;indi.mofan.service.MyService&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    切面类全限定类名    --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">within</span>=<span class="string">&quot;indi.mofan.aop.MyAspect&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">weaver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aspects</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aspectj</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在运行 main() 方法前添加 VM options：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:D:\environment\Maven\3.6.3-repository\.m2\repository\org\aspectj\aspectjweaver\1.9.7\aspectjweaver-1.9.7.jar</span><br></pre></td></tr></table></figure><p>其中的 D:\environment\Maven\3.6.3-repository.m2 指本地 Maven 仓库地址，还需要确保本地仓库中存在 1.9.7 版本的 aspectjweaver，否则修改至对应版本。</p><p>这是控制台输出的信息就和前文的内容一样了。</p><p>从输出的内容可以看到 service.getClass() 打印出的信息也是原始类的 Class 信息，而非代理类的 Class 信息。因此不依赖 Spring 容器，直接 new 一个 MyService 实例并调用其 <code>foo()</code> 方法也能达到增强的目的。</p><p>如果查看  <code>MyService</code> 对应的 class 文件，会发现其内容并没有被修改，可以断定不是编译时增强，这里是在类加载时增强。</p><h2 id="利用-Arthas-反编译类文件"><a href="#利用-Arthas-反编译类文件" class="headerlink" title="利用 Arthas 反编译类文件"></a>利用 Arthas 反编译类文件</h2><p>可以借助阿里巴巴的 Arthas 来反编译加载的类文件，下载地址：<br><a href="https://arthas.aliyun.com/doc/download.html">下载 | arthas</a></p><p>在使用 Arthas 前，需要确保对应 Java 进程的存在，因此在上述代码中调用 <code>service.foo();</code> 方法后并没有关闭 Spring 容器。</p><p>解压下载的压缩包，进入 <code>arthas-boot.jar</code> 文件的同级目录，<br>使用终端工具执行 <code>java -jar .\arthas-boot.jar</code>：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724064064687-e8ca377f-551d-471d-92c8-4bf27d7283d5.png#averageHue=%230d0c0c&clientId=uf41de5c2-5f76-4&from=paste&height=330&id=u41dcb107&originHeight=371&originWidth=841&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=141909&status=done&style=none&taskId=ud26096a0-ce47-401b-b719-44853edb197&title=&width=747.5555555555555" alt="image.png"></p><p>运行之后会列举出存在的 Java 进程，找到需要连接的进程，之后输入目标进程对应的序号。当界面上成功显示 Arthas 的 Banner 时，证明连接成功：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724064073659-687bc754-6399-41ab-90e9-ecee88ef8ac4.png#averageHue=%230b0a0a&clientId=uf41de5c2-5f76-4&from=paste&height=324&id=u1402c431&originHeight=364&originWidth=578&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=98434&status=done&style=none&taskId=u0114de09-28ea-46fa-898a-70dde317b4b&title=&width=513.7777777777778" alt="image.png"></p><p>输入 <code>jad indi.mofan.service.MyService</code> 表示需要反编译 <code>MyService</code>：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724064093801-365da2a5-4f58-4f89-aa68-1ee2bfc4f6f2.png#averageHue=%23050504&clientId=uf41de5c2-5f76-4&from=paste&height=423&id=ue3302811&originHeight=476&originWidth=604&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=74736&status=done&style=none&taskId=u9c9979ae-918b-4851-b948-401ae61913f&title=&width=536.8888888888889" alt="image.png"></p><p>可以看到 <code>foo()</code> 和 <code>bar()</code> 方法的第一行都被增加了一行代码，也就是这行代码对这两个方法实现了增强。</p><p>不仅如此，如果使用代理实现增强，被调用的 <code>bar()</code> 方法不会被成功增强，因为调用时默认使用了 <code>this</code> 关键词，表示调用的是原类中的方法，而不是代理类中的方法（经典面试题：<code>@Transactional</code> 注解失效的场景）。</p><h1 id="JDK-代理"><a href="#JDK-代理" class="headerlink" title="JDK 代理"></a>JDK 代理</h1><h2 id="JDK-动态代理实现"><a href="#JDK-动态代理实现" class="headerlink" title="JDK 动态代理实现"></a>JDK 动态代理实现</h2><p>JDK 动态代理 只能 针对接口进行代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: JdkProxyDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">foo</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FooImpl</span> <span class="keyword">implements</span> <span class="title class_">foo</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FooImpl</span> <span class="variable">foo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FooImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">foo</span> <span class="variable">proxy</span> <span class="operator">=</span> (foo) Proxy.newProxyInstance(JdkProxyDemo.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;foo.class&#125;, (proxy1, method, args1) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">            <span class="comment">/// 目标.方法(参数) --&gt; 方法.invoke(目标, 参数)</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(foo, args1);</span><br><span class="line">            System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        proxy.foo();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line">        proxy.toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line">        proxy.hashCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line">        System.out.println(proxy.equals(proxy));    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">before</span><br><span class="line">foo</span><br><span class="line">after...</span><br><span class="line">-------</span><br><span class="line">before</span><br><span class="line">after...</span><br><span class="line">-------</span><br><span class="line">before</span><br><span class="line">after...</span><br><span class="line">-------</span><br><span class="line">before</span><br><span class="line">after...</span><br><span class="line">false</span><br></pre></td></tr></table></figure><blockquote><p>总结</p><ul><li>代理对象和目标对象是兄弟关系，都实现了相同接口，所以不能将代理对象强转成目标对象类型</li><li>代理类与目标之间没有继承关系，所以目标类可以被 <code>final</code>修饰</li></ul></blockquote><h2 id="JDK-动态代理原理"><a href="#JDK-动态代理原理" class="headerlink" title="JDK 动态代理原理"></a>JDK 动态代理原理</h2><p>jdk 代理基于接口，底层是生成一个增强的 class<br>那么我们自定义类 <code>$Proxy0</code>实现代理接口 Foo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 功能增强</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 调用目标</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">A13</span>.Target().foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">$Proxy0</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>();</span><br><span class="line">    proxy.foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是 实际的  代理内容里的 功能增强 和 调用目标  是不确定的，<br>针对这种“不确定”的实现，可以提供一个抽象类，等到用户具体使用时才实现抽象类，重写抽象方法。创建抽象类 <code>MyInvocationHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A13.InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(A13.InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        h.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">$Proxy0</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 功能增强</span></span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 调用目标</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">A13</span>.Target().foo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before...</span><br><span class="line">target foo</span><br></pre></td></tr></table></figure><h3 id="多个抽象方法的接口"><a href="#多个抽象方法的接口" class="headerlink" title="多个抽象方法的接口"></a>多个抽象方法的接口</h3><p>是不是有点眉目了，别急别急如果代理接口 Foo 里多个抽象方法，那么会出现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">boo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标类代理类都新增 boo 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">boo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target boo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A13.InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(A13.InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        h.invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">boo</span><span class="params">()</span> &#123;</span><br><span class="line">        h.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">$Proxy0</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 功能增强</span></span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 调用目标</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">A13</span>.Target().foo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.foo();</span><br><span class="line">    <span class="comment">// 调用另一个方法</span></span><br><span class="line">    proxy.boo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before...</span><br><span class="line">target foo</span><br><span class="line">before...</span><br><span class="line">target foo</span><br></pre></td></tr></table></figure><p>打印结果有点问题。当调用代理对象的 boo() 方法时，输出了 target foo，而不是 barboo) 方法应该打印的 target boo。</p><p>原因就出在实现 InvocationHandler 的 invoke() 方法时，依旧只调用了目标类的 foo() 方法，而不是 boo() 方法。</p><p>也就是说，在调用代理对象中的某个方法时，增强的应该是目标对象中对应的方法，希望在调用目标方法时能够动态编码。</p><p>那么可以在 invoke() 方法中添加两个入参，分别表示需要调用的目标方法和目标方法的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加参数之后需要修改代理类，并将实现的抽象方法的 Method 对象与参数传递给 invoke() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A13.InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(A13.InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> A13.Foo.class.getMethod(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        h.invoke(method, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">boo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> A13.Foo.class.getMethod(<span class="string">&quot;boo&quot;</span>);</span><br><span class="line">        h.invoke(method, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要修改下 main() 方法中 InvocationHandler 的实现，利用传递的 Method 对象和参数信息反射调用目标方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">$Proxy0</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="comment">// 1. 功能增强</span></span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 调用目标</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(<span class="keyword">new</span> <span class="title class_">Target</span>(), params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.foo();</span><br><span class="line">    <span class="comment">// 调用另一个方法</span></span><br><span class="line">    proxy.boo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before...</span><br><span class="line">target foo</span><br><span class="line">before...</span><br><span class="line">target boo</span><br></pre></td></tr></table></figure><h3 id="异常的抛出处理"><a href="#异常的抛出处理" class="headerlink" title="异常的抛出处理"></a>异常的抛出处理</h3><p>jdk 分 运行异常 和 检查异常<br>在代理类里，运行异常 直接抛出<br>而检查异常创建UndeclaredThrowableException 后抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h.invoke(foo, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// --snip--    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有返回值的抽象方法"><a href="#有返回值的抽象方法" class="headerlink" title="有返回值的抽象方法"></a>有返回值的抽象方法</h3><p>优化还在继续，如果抽象方法有返回值呢？比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">boo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了这个接口的目标类和代理类重写的方法都需要有具体的返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">boo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target bar&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标类很简单，直接返回，那代理类返回什么？</p><p>InvocationHandler 的 invoke() 方法是对“功能增强”和“调用目标”的抽象，因此可以使 invoke() 方法也返回一个值，返回的值即为目标方法的返回值，这样就可以使得代理类中的方法有值可返。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    Object <span class="title function_">invoke</span><span class="params">(Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A13.InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(A13.InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">foo</span> <span class="operator">=</span> A13.Foo.class.getMethod(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            h.invoke(foo, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">boo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">boo</span> <span class="operator">=</span> A13.Foo.class.getMethod(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>) h.invoke(bar, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 main() 方法，打印 boo() 方法的返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">$Proxy0</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="comment">// 1. 功能增强</span></span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 调用目标</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">new</span> <span class="title class_">Target</span>(), params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.foo();</span><br><span class="line">    <span class="comment">// 调用另一个方法</span></span><br><span class="line">    System.out.println(proxy.boo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before...</span><br><span class="line">target foo</span><br><span class="line">before...</span><br><span class="line">target boo</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h3 id="在静态代码块里创建-Method-实例"><a href="#在静态代码块里创建-Method-实例" class="headerlink" title="在静态代码块里创建 Method 实例"></a>在静态代码块里创建 Method 实例</h3><p>每调用一次代理对象中的方法都会创建一个 Method 实例，这些实例是可以复用的，因此可以将这些实例的创建移动到静态代码块中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A13.InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(A13.InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h.invoke(foo, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">boo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>) h.invoke(boo, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Method foo;</span><br><span class="line">    <span class="keyword">static</span> Method boo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            foo = A13.Foo.class.getMethod(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            bar = A13.Foo.class.getMethod(<span class="string">&quot;boo&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="invoke-增加代理对象参数"><a href="#invoke-增加代理对象参数" class="headerlink" title="invoke() 增加代理对象参数"></a>invoke() 增加代理对象参数</h3><p>在 JDK 提供的 InvocationHandler 接口的 invoke() 方法还将代理对象作为方法的参数，以便用户根据实际情况使用。继续修改自定义的 InvocationHandler 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改代理类中对 invoke() 方法的调用，第一个参数为当前类的实例，即 this：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h.invoke(<span class="built_in">this</span>, foo, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>) h.invoke(<span class="built_in">this</span>, bar, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --snip--    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main() 方法重写的 invoke() 方法也要增加 proxy 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">$Proxy0</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$Proxy0</span>(<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="comment">// 1. 功能增强</span></span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 调用目标</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">new</span> <span class="title class_">Target</span>(), params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    proxy.foo();</span><br><span class="line">    <span class="comment">// 调用另一个方法</span></span><br><span class="line">    System.out.println(proxy.boo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向-JDK-靠齐"><a href="#向-JDK-靠齐" class="headerlink" title="向 JDK 靠齐"></a>向 JDK 靠齐</h3><p>到此为止，自定义的 InvocationHandler 接口与 JDK 提供的 InvocationHandler 接口无异，注释自定义的 InvocationHandler，更换为 JDK 提供的 InvocationHandler 接口。</p><p>在 JDK 提供的 InvocationHandler 接口的注释中有一句：@see Proxy，在 Proxy 类的代码中有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Proxy</span><span class="params">(InvocationHandler h)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Proxy 类中有一个 InvocationHandler 对象的成员变量。</p><p>因此还可以使代理类 $Proxy0 继承 Proxy 来进一步减少代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">A13</span>.Foo &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6909541593982979501L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">super</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-代理类字节码生成"><a href="#JDK-代理类字节码生成" class="headerlink" title="JDK 代理类字节码生成"></a>JDK 代理类字节码生成</h2><p>  JDK 生成代理类，没有经历源码阶段、编译阶段，而是直接字节码阶段，使用了 ASM 完成<br>ASM 的学习成本较高，在此不做过多介绍，本节将采用一直“曲线求国”的方式，使用 IDEA 的 ASM Bytecode Viewer 插件将 Java 源码转换成使用 ASM 编写的代码。<br>ASM Bytecode Viewer插件建议在 java8 环境使用。</p><p>编写接口和代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6059465134835974286L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Method foo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            foo = Foo.class.getMethod(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler h) &#123;</span><br><span class="line">        <span class="built_in">super</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, foo, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译上面代码后，在 $Proxy0 文件右击，选择 Show Bytecode Viewer 浏览当前类对应的字节码信息：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724909538857-cedf5d0f-7757-42a9-9e54-fb3ea1b345cc.png#averageHue=%232f3137&clientId=uf8b3be3f-a47a-4&from=paste&height=620&id=ufa311532&originHeight=698&originWidth=338&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=96610&status=done&style=none&taskId=u6d3c5170-7b4c-4d24-98a6-feb6d5b16a2&title=&width=300.44444444444446" alt="image.png"><br>查看 ASMified ，并拷贝内容，复制到 $Proxy0Dump 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.asm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$Proxy0Dump</span> <span class="keyword">implements</span> <span class="title class_">Opcodes</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(<span class="number">0</span>);</span><br><span class="line">        FieldVisitor fieldVisitor;</span><br><span class="line">        RecordComponentVisitor recordComponentVisitor;</span><br><span class="line">        MethodVisitor methodVisitor;</span><br><span class="line">        AnnotationVisitor annotationVisitor0;</span><br><span class="line"></span><br><span class="line">        classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, <span class="string">&quot;com/example/asm/$Proxy0&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/reflect/Proxy&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;com/example/asm/Foo&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        classWriter.visitSource(<span class="string">&quot;$Proxy0.java&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            fieldVisitor = classWriter.visitField(ACC_STATIC, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;Ljava/lang/reflect/Method;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            fieldVisitor.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/reflect/InvocationHandler;)V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            methodVisitor.visitParameter(<span class="string">&quot;invocationHandler&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitCode();</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitLabel(label0);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">18</span>, label0);</span><br><span class="line">            methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitVarInsn(ALOAD, <span class="number">1</span>);</span><br><span class="line">            methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/reflect/Proxy&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/reflect/InvocationHandler;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitLabel(label1);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">19</span>, label1);</span><br><span class="line">            methodVisitor.visitInsn(RETURN);</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitLabel(label2);</span><br><span class="line">            methodVisitor.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lcom/example/asm/$Proxy0;&quot;</span>, <span class="literal">null</span>, label0, label2, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitLocalVariable(<span class="string">&quot;invocationHandler&quot;</span>, <span class="string">&quot;Ljava/lang/reflect/InvocationHandler;&quot;</span>, <span class="literal">null</span>, label0, label2, <span class="number">1</span>);</span><br><span class="line">            methodVisitor.visitMaxs(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">            methodVisitor.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            methodVisitor.visitCode();</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitTryCatchBlock(label0, label1, label2, <span class="string">&quot;java/lang/Throwable&quot;</span>);</span><br><span class="line">            methodVisitor.visitLabel(label0);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">23</span>, label0);</span><br><span class="line">            methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitFieldInsn(GETFIELD, <span class="string">&quot;com/example/asm/$Proxy0&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;Ljava/lang/reflect/InvocationHandler;&quot;</span>);</span><br><span class="line">            methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitFieldInsn(GETSTATIC, <span class="string">&quot;com/example/asm/$Proxy0&quot;</span>, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;Ljava/lang/reflect/Method;&quot;</span>);</span><br><span class="line">            methodVisitor.visitInsn(ACONST_NULL);</span><br><span class="line">            methodVisitor.visitMethodInsn(INVOKEINTERFACE, <span class="string">&quot;java/lang/reflect/InvocationHandler&quot;</span>, <span class="string">&quot;invoke&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            methodVisitor.visitInsn(POP);</span><br><span class="line">            methodVisitor.visitLabel(label1);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">26</span>, label1);</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitJumpInsn(GOTO, label3);</span><br><span class="line">            methodVisitor.visitLabel(label2);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">24</span>, label2);</span><br><span class="line">            methodVisitor.visitFrame(Opcodes.F_SAME1, <span class="number">0</span>, <span class="literal">null</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;java/lang/Throwable&quot;</span>&#125;);</span><br><span class="line">            methodVisitor.visitVarInsn(ASTORE, <span class="number">1</span>);</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitLabel(label4);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">25</span>, label4);</span><br><span class="line">            methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/lang/reflect/UndeclaredThrowableException&quot;</span>);</span><br><span class="line">            methodVisitor.visitInsn(DUP);</span><br><span class="line">            methodVisitor.visitVarInsn(ALOAD, <span class="number">1</span>);</span><br><span class="line">            methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/reflect/UndeclaredThrowableException&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/Throwable;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            methodVisitor.visitInsn(ATHROW);</span><br><span class="line">            methodVisitor.visitLabel(label3);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">27</span>, label3);</span><br><span class="line">            methodVisitor.visitFrame(Opcodes.F_SAME, <span class="number">0</span>, <span class="literal">null</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            methodVisitor.visitInsn(RETURN);</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitLabel(label5);</span><br><span class="line">            methodVisitor.visitLocalVariable(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;Ljava/lang/Throwable;&quot;</span>, <span class="literal">null</span>, label4, label3, <span class="number">1</span>);</span><br><span class="line">            methodVisitor.visitLocalVariable(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;Lcom/example/asm/$Proxy0;&quot;</span>, <span class="literal">null</span>, label0, label5, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitMaxs(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">            methodVisitor.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            methodVisitor = classWriter.visitMethod(ACC_STATIC, <span class="string">&quot;&lt;clinit&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            methodVisitor.visitCode();</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitTryCatchBlock(label0, label1, label2, <span class="string">&quot;java/lang/NoSuchMethodException&quot;</span>);</span><br><span class="line">            methodVisitor.visitLabel(label0);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">32</span>, label0);</span><br><span class="line">            methodVisitor.visitLdcInsn(Type.getType(<span class="string">&quot;Lcom/example/asm/Foo;&quot;</span>));</span><br><span class="line">            methodVisitor.visitLdcInsn(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            methodVisitor.visitInsn(ICONST_0);</span><br><span class="line">            methodVisitor.visitTypeInsn(ANEWARRAY, <span class="string">&quot;java/lang/Class&quot;</span>);</span><br><span class="line">            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/Class&quot;</span>, <span class="string">&quot;getMethod&quot;</span>, <span class="string">&quot;(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            methodVisitor.visitFieldInsn(PUTSTATIC, <span class="string">&quot;com/example/asm/$Proxy0&quot;</span>, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;Ljava/lang/reflect/Method;&quot;</span>);</span><br><span class="line">            methodVisitor.visitLabel(label1);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">35</span>, label1);</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitJumpInsn(GOTO, label3);</span><br><span class="line">            methodVisitor.visitLabel(label2);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">33</span>, label2);</span><br><span class="line">            methodVisitor.visitFrame(Opcodes.F_SAME1, <span class="number">0</span>, <span class="literal">null</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;java/lang/NoSuchMethodException&quot;</span>&#125;);</span><br><span class="line">            methodVisitor.visitVarInsn(ASTORE, <span class="number">0</span>);</span><br><span class="line">            <span class="type">Label</span> <span class="variable">label4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line">            methodVisitor.visitLabel(label4);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">34</span>, label4);</span><br><span class="line">            methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/lang/NoSuchMethodError&quot;</span>);</span><br><span class="line">            methodVisitor.visitInsn(DUP);</span><br><span class="line">            methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/NoSuchMethodException&quot;</span>, <span class="string">&quot;getMessage&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/NoSuchMethodError&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            methodVisitor.visitInsn(ATHROW);</span><br><span class="line">            methodVisitor.visitLabel(label3);</span><br><span class="line">            methodVisitor.visitLineNumber(<span class="number">36</span>, label3);</span><br><span class="line">            methodVisitor.visitFrame(Opcodes.F_SAME, <span class="number">0</span>, <span class="literal">null</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            methodVisitor.visitInsn(RETURN);</span><br><span class="line">            methodVisitor.visitLocalVariable(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;Ljava/lang/NoSuchMethodException;&quot;</span>, <span class="literal">null</span>, label4, label3, <span class="number">0</span>);</span><br><span class="line">            methodVisitor.visitMaxs(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">            methodVisitor.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        classWriter.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> classWriter.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写测试方法使用 $Proxy0Dump 生成 $Proxy0 的 class 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] dump = $Proxy0Dump.dump();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;$Proxy0.class&quot;</span>);</span><br><span class="line">        os.write(dump, <span class="number">0</span>, dump.length);</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main() 方法后，在工作目录下生成 $Proxy0.class。<br>工作目录查看方式：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724909719887-bb3a9a6b-4de7-4e59-9dc4-7701bdc85863.png#averageHue=%232d3035&clientId=uf8b3be3f-a47a-4&from=paste&height=629&id=u7fa917eb&originHeight=708&originWidth=1323&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=78605&status=done&style=none&taskId=u93e0c885-39dc-4a49-b9d9-881fd30d24c&title=&width=1176" alt="image.png"></p><p>也就是说会在 <code>D:\Code\IdeaCode\advanced-spring</code> 目录下生成 <code>$Proxy0.class</code> 文件，IDEA 反编译后的内容与手动编写的 <code>$Proxy0.java</code> 文件的内容无异。</p><p>实际使用时并不需要使用 $Proxy0Dump 生成 <code>$Proxy.class</code> 文件，而是利用 ClassLoader 直接加载类信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] dump = $Proxy0Dump.dump();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        FileOutputStream os = new FileOutputStream(&quot;$Proxy0.class&quot;);</span></span><br><span class="line"><span class="comment">//        os.write(dump, 0, dump.length);</span></span><br><span class="line"><span class="comment">//        os.close();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(name, dump, <span class="number">0</span>, dump.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; proxyClass = classLoader.loadClass(<span class="string">&quot;com.example.asm.$Proxy0&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = proxyClass.getConstructor(InvocationHandler.class);</span><br><span class="line">        <span class="type">Foo</span> <span class="variable">fooProxy</span> <span class="operator">=</span> (Foo) constructor.newInstance((InvocationHandler) (proxy, method, args1) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;模拟调用目标&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        fooProxy.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before...</span><br><span class="line">模拟调用目标</span><br></pre></td></tr></table></figure><h2 id="JDK-反射优化"><a href="#JDK-反射优化" class="headerlink" title="JDK 反射优化"></a>JDK 反射优化</h2><p>jdk 动态代理时，会使用反射调用方法：<br>Object result &#x3D; method.invoke(target, params);<br>相比正常调用，反射性能稍微低，jdk 对反射怎么优化？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.asm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestMethodProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethodProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">foo</span> <span class="operator">=</span> TestMethodProxy.class.getMethod(<span class="string">&quot;foo&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">17</span>; i++) &#123;</span><br><span class="line">            show(i, foo);</span><br><span class="line">            foo.invoke(<span class="literal">null</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法反射调用时，底层使用了 MethodAccessor 的实现类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i, Method foo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在虚拟机选择配置里添加如下，使用jdk17</span></span><br><span class="line">        <span class="comment">//     --add-opens java.base/java.lang.reflect=ALL-UNNAMED</span></span><br><span class="line">        <span class="comment">//     --add-opens java.base/jdk.internal.reflect=ALL-UNNAMED</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getMethodAccessor</span> <span class="operator">=</span> Method.class.getDeclaredMethod(<span class="string">&quot;getMethodAccessor&quot;</span>);</span><br><span class="line">        getMethodAccessor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> getMethodAccessor.invoke(foo);</span><br><span class="line">        <span class="keyword">if</span> (invoke == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;: &quot;</span> + <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// DelegatingMethodAccessorImpl 的全限定类名（不同版本的 JDK 存在差异）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">delegate</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;jdk.internal.reflect.DelegatingMethodAccessorImpl&quot;</span>).getDeclaredField(<span class="string">&quot;delegate&quot;</span>);</span><br><span class="line">        delegate.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(i + <span class="string">&quot;: &quot;</span> + delegate.get(invoke));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(i + <span class="string">&quot;: foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">已连接到地址为 &#x27;&#x27;127.0.0.1:63163&#x27;，传输: &#x27;套接字&#x27;&#x27; 的目标虚拟机</span><br><span class="line">1: null</span><br><span class="line">1: foo</span><br><span class="line">2: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">2: foo</span><br><span class="line">3: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">3: foo</span><br><span class="line">4: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">4: foo</span><br><span class="line">5: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">5: foo</span><br><span class="line">6: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">6: foo</span><br><span class="line">7: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">7: foo</span><br><span class="line">8: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">8: foo</span><br><span class="line">9: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">9: foo</span><br><span class="line">10: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">10: foo</span><br><span class="line">11: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">11: foo</span><br><span class="line">12: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">12: foo</span><br><span class="line">13: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">13: foo</span><br><span class="line">14: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">14: foo</span><br><span class="line">15: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">15: foo</span><br><span class="line">16: jdk.internal.reflect.NativeMethodAccessorImpl@5f184fc6</span><br><span class="line">16: foo</span><br><span class="line">17: jdk.internal.reflect.GeneratedMethodAccessor2@312b1dae</span><br><span class="line">17: foo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上述信息可知，第一次调用时没有使用 MethodAccessor 对象，从第二次到第十六次，使用了 NativeMethodAccessorImpl 对象，而在第十七次使用了 GeneratedMethodAccessor2 对象。</p><p>NativeMethodAccessorImpl 基于 Java 本地 API 实现，性能较低，第十七次调用换成 GeneratedMethodAccessor2 后，性能得到一定的提升。</p><p>使用 Arthas 反编译查看 GeneratedMethodAccessor2 类中的信息，<br>内容如下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724913726943-d080fd42-f0db-4d45-b80e-8d78b97fdb2e.png#averageHue=%23101010&clientId=u30760401-3536-4&from=paste&height=682&id=ua246329d&originHeight=767&originWidth=786&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=66856&status=done&style=none&taskId=u74363959-2f75-4cf0-a927-60f653bd627&title=&width=698.6666666666666" alt="image.png"><br>在反编译得到的代码中，不再是通过反射调用方法，而是直接正常调用方法，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestMethodProxy.foo((int)c);</span><br></pre></td></tr></table></figure><p>因此性能得到了提升，但这样的提升也是有一定代价的：为优化 一个 方法的反射调用，生成了一个 GeneratedMethodAccessor2 代理类。</p><h1 id="CGLib-代理"><a href="#CGLib-代理" class="headerlink" title="CGLib 代理"></a>CGLib 代理</h1><h1 id="MethodProxy-原理"><a href="#MethodProxy-原理" class="headerlink" title="MethodProxy 原理"></a>MethodProxy 原理</h1><h1 id="JDK-和-CGLib-的统一"><a href="#JDK-和-CGLib-的统一" class="headerlink" title="JDK 和 CGLib 的统一"></a>JDK 和 CGLib 的统一</h1><h2 id="advisor"><a href="#advisor" class="headerlink" title="advisor"></a>advisor</h2><p>切面有 aspect 和 advisor 两个概念，aspect 是多组通知（advice）和切点（pointcut）的组合，也是实际编码时使用的，<br>advisor 则是更细粒度的切面，仅包含一个通知和切点，<br>aspect 在生效之前会被拆解成多个 advisor。</p><p>Spring 中的切点、通知、切面的抽象如下：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724923172762-e1aeabfb-3a40-4c62-a793-53c1152811e0.png#averageHue=%23212120&clientId=u81cbd4ea-506a-4&from=paste&height=618&id=u6a12d96e&originHeight=695&originWidth=934&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=38328&status=done&style=none&taskId=uf242aaee-9e60-4d3c-99a5-f3ec8541bd3&title=&width=830.2222222222222" alt="image.png"></p><ul><li>切点：Ponintcut，其典型实现是 AspectJExpressionPonintcut</li><li>通知：Advice，其典型子类接口是 MethodInterceptor ，表示环绕通知</li><li>切面：Advisor，仅包含一个切点和通知</li></ul><h2 id="切面与代理对象的创建"><a href="#切面与代理对象的创建" class="headerlink" title="切面与代理对象的创建"></a>切面与代理对象的创建</h2><p>通过以下四步创建 切面 和 代理：</p><ol><li>备好切点</li><li>备好通知</li><li>备好切面</li><li>创建代理</li></ol><p>在 spring 中，切点通过接口 org.springframework.aop.Pointcut 表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pointcut</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据类型过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ClassFilter <span class="title function_">getClassFilter</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据方法匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MethodMatcher <span class="title function_">getMethodMatcher</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Canonical Pointcut instance that always matches.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">Pointcut</span> <span class="variable">TRUE</span> <span class="operator">=</span> TruePointcut.INSTANCE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pointcut 接口有很多实现类，比如：</p><ul><li>AnnotationMatchingPointcut：通过注解进行匹配</li><li>AspectJExpressionPointcut：通过 AspectJ 表达式进行匹配（本节的选择）</li></ul><p>在 spring 中，通知 的表示有很多接口，org.aopalliance.intercept.MethodInterceptor，这个接口实现的通知属于环绕通知。</p><p>在 Spring 中，切面的实现也有很多，在此选择 DefaultPointcutAdvisor，创建这种切面时，传递一个节点和通知。</p><p>最后创建代理对象时，无需显式实现 JDK 动态代理或 CGLib 动态代理，Spring 提供了名为 ProxyFactory 的工厂，其内部通过不同的情况选择不同的代理实现，更方便地创建代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">I1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target1</span> <span class="keyword">implements</span> <span class="title class_">I1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target1 foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target1 bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target2 foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;target2 bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 两个切面概念：</span></span><br><span class="line"><span class="comment">     *  aspect =</span></span><br><span class="line"><span class="comment">     *          通知 1 （advice） + 切点 1（pointcut）</span></span><br><span class="line"><span class="comment">     *          通知 2 （advice） + 切点 2（pointcut）</span></span><br><span class="line"><span class="comment">     *          通知 3 （advice） + 切点 3（pointcut）</span></span><br><span class="line"><span class="comment">     *          ...</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * advisor = 更细粒度的切面，包含一个通知和切点</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 备好切点（根据 AspectJ 表达式进行匹配）</span></span><br><span class="line">    <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">    pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 备好通知</span></span><br><span class="line">    <span class="type">MethodInterceptor</span> <span class="variable">advice</span> <span class="operator">=</span> invocation -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 3. 备好切面</span></span><br><span class="line">    <span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">    <span class="comment">// 4. 创建代理</span></span><br><span class="line">    <span class="type">Target1</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target1</span>();</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">    factory.setTarget(target);</span><br><span class="line">    factory.addAdvisor(advisor);</span><br><span class="line">    </span><br><span class="line">    <span class="type">I1</span> <span class="variable">proxy</span> <span class="operator">=</span> (I1) factory.getProxy();</span><br><span class="line">    System.out.println(proxy.getClass());</span><br><span class="line">    proxy.foo();</span><br><span class="line">    proxy.bar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class indi.mofan.a15.A15$Target1$$EnhancerBySpringCGLIB$$381723d1</span><br><span class="line">before...</span><br><span class="line">target1 foo</span><br><span class="line">after...</span><br><span class="line">target1 bar</span><br></pre></td></tr></table></figure><p>foo() 方法被增强，但 bar() 并没有，并且选择了 CGLib 动态代理作为代理的实现。</p><h2 id="spring-根据什么信息选择不同的代理？"><a href="#spring-根据什么信息选择不同的代理？" class="headerlink" title="spring 根据什么信息选择不同的代理？"></a>spring 根据什么信息选择不同的代理？</h2><p>ProxyFactory 的父类 ProxyConfig 中有个名为 proxyTargetClass 的布尔类型成员变量：</p><ul><li><p>当 proxyTargetClass &#x3D;&#x3D; false，并且目标对象所在类实现了接口时，将选择 JDK 动态代理；</p></li><li><p>当 proxyTargetClass &#x3D;&#x3D; false，但目标对象所在类未实现接口时，将选择 CGLib 动态代理；</p></li><li><p>当 proxyTargetClass &#x3D;&#x3D; true，总是选择 CGLib 动态代理。</p></li></ul><p>上文中的 target 对象的所在类 Targer1 实现了 I1 接口，最终为什么依旧选择了 CGLib 动态代理作为代理类的创建方式呢？<br>这是因为并没有显式这是 target 对象的实现类，Spring 认为其并未实现接口。<br>设置 factory 对象的 interfaces 信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factory.setInterfaces(target.getClass().getInterfaces());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class indi.mofan.a15.$Proxy0</span><br><span class="line">before...</span><br><span class="line">target1 foo</span><br><span class="line">after...</span><br><span class="line">target1 bar</span><br></pre></td></tr></table></figure><p>此时选择的动态代理实现方式是 JDK 动态代理。</p><p>再设置 factory 对象的 proxyTargetClass 为 true：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factory.setProxyTargetClass(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class indi.mofan.a15.A15$Target1$$EnhancerBySpringCGLIB$$34c2d9b8</span><br><span class="line">before...</span><br><span class="line">target1 foo</span><br><span class="line">after...</span><br><span class="line">target1 bar</span><br></pre></td></tr></table></figure><p>再将 proxyTargetClass 的值修改回 false，并修改目标对象的所在类为 Target2，Target2 并未实现任何接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 创建代理</span></span><br><span class="line">    <span class="type">Target2</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target2</span>();</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">    factory.setTarget(target);</span><br><span class="line">    factory.addAdvisor(advisor);</span><br><span class="line">    factory.setInterfaces(target.getClass().getInterfaces());</span><br><span class="line">    factory.setProxyTargetClass(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Target2</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target2) factory.getProxy();</span><br><span class="line">    System.out.println(proxy.getClass());</span><br><span class="line">    proxy.foo();</span><br><span class="line">    proxy.bar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class indi.mofan.a15.A15$Target2$$EnhancerBySpringCGLIB$$4bb2ac74</span><br><span class="line">before...</span><br><span class="line">target2 foo</span><br><span class="line">after...</span><br><span class="line">target2 bar</span><br></pre></td></tr></table></figure><p>ProxyFactory 是用来创建代理的核心实现，使用 AopProxyFactory 选择具体的代理实现：</p><ul><li>JdkDynamicAopProxy</li><li>ObjenesisCglibAopProxy</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724924942131-e9441261-75ce-485f-8eaf-e4b894bbfdf7.png#averageHue=%232a2a1b&clientId=u81cbd4ea-506a-4&from=paste&height=845&id=uefe22dc8&originHeight=951&originWidth=951&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=71636&status=done&style=none&taskId=u3600f97b-5fc5-4f21-8b7d-21bcd4a7dde&title=&width=845.3333333333334" alt="image.png"></p><p>AopProxyFactory 根据 proxyTargetClass 等设置选择 AopProxy 实现，AopProxy 通过 getProxy() 方法创建代理对象。<br>上述类图中的类与接口都实现了 Advised 接口，能够获得关联的切面集合与目标（实际上是从 ProxyFactory 中获取的）。</p><p>调用代理方法时，会借助 ProxyFactory 统一将通知转换为环绕通知 MethodInterceptor。</p><h1 id="切点匹配的方法"><a href="#切点匹配的方法" class="headerlink" title="切点匹配的方法"></a>切点匹配的方法</h1><p> AspectJExpressionPointcut  作为切点的实现，判断编写的 AspectJ 表达式是否与某一方法匹配可以用 matches（） 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">    <span class="type">AspectJExpressionPointcut</span> <span class="variable">pt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">    pt1.setExpression(<span class="string">&quot;execution(* bar())&quot;</span>);</span><br><span class="line">    System.out.println(pt1.matches(T1.class.getMethod(<span class="string">&quot;foo&quot;</span>), T1.class));</span><br><span class="line">    System.out.println(pt1.matches(T1.class.getMethod(<span class="string">&quot;bar&quot;</span>), T1.class));</span><br><span class="line"></span><br><span class="line">    <span class="type">AspectJExpressionPointcut</span> <span class="variable">pt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">    pt2.setExpression(<span class="string">&quot;@annotation(org.springframework.transaction.annotation.Transactional)&quot;</span>);</span><br><span class="line">    System.out.println(pt2.matches(T1.class.getMethod(<span class="string">&quot;foo&quot;</span>), T1.class));</span><br><span class="line">    System.out.println(pt2.matches(T1.class.getMethod(<span class="string">&quot;bar&quot;</span>), T1.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T1</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>@Transactional 是 Spring 中使用频率非常高的注解，那它底层是通过 AspectJExpressionPointcut 与 @annotation() 切点表达式相结合对目标方法进行匹配的吗？</p><p>答案是否定的。@Transactional 注解除了可以作用在方法上，还可以作用在类（或接口）上。</p><p>在底层 @Transactional 注解的匹配使用到了 StaticMethodMatcherPointcut，在此模拟一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">StaticMethodMatcherPointcut</span> <span class="variable">pt3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticMethodMatcherPointcut</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">            <span class="comment">// 检查方法上是否添加了 @Transactional 注解</span></span><br><span class="line">            <span class="type">MergedAnnotations</span> <span class="variable">annotations</span> <span class="operator">=</span> MergedAnnotations.from(method);</span><br><span class="line">            <span class="keyword">if</span> (annotations.isPresent(Transactional.class)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 检查类上或所实现的接口是否添加了 @Transactional 注解</span></span><br><span class="line">            annotations = MergedAnnotations.from(targetClass, MergedAnnotations.SearchStrategy.TYPE_HIERARCHY);</span><br><span class="line">            <span class="keyword">return</span> annotations.isPresent(Transactional.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    System.out.println(pt3.matches(T1.class.getMethod(<span class="string">&quot;foo&quot;</span>), T1.class));</span><br><span class="line">    System.out.println(pt3.matches(T1.class.getMethod(<span class="string">&quot;bar&quot;</span>), T1.class));</span><br><span class="line">    System.out.println(pt3.matches(T2.class.getMethod(<span class="string">&quot;foo&quot;</span>), T2.class));</span><br><span class="line">    System.out.println(pt3.matches(T3.class.getMethod(<span class="string">&quot;foo&quot;</span>), T3.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T1</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I3</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T3</span> <span class="keyword">implements</span> <span class="title class_">I3</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>无论是 AspectJExpressionPointcut 还是 StaticMethodMatcherPointcut，它们都实现了 MethodMatcher 接口，用来执行方法的匹配。</p><h1 id="从-Aspect-到-Advisor"><a href="#从-Aspect-到-Advisor" class="headerlink" title="从@Aspect 到 Advisor"></a>从@Aspect 到 Advisor</h1><p><font style="color:#DF2A3F;">@Aspect </font>是高级切面，<font style="color:#DF2A3F;">Advisor</font> 是低级切面，在运行时会将高级转为低级。</p><p>高级切面中与通知类型相关的常用注解有 5 个  </p><ul><li><font style="color:#DF2A3F;">@Befor</font> 前置通知</li><li><font style="color:#DF2A3F;">@AfterReturning</font> 后置通知</li><li><font style="color:#DF2A3F;">@AfterThrowing</font> 异常通知</li><li><font style="color:#DF2A3F;">@After</font> 最终通知</li><li><font style="color:#DF2A3F;">@Around</font> 环绕通知</li></ul><h2 id="AnnotationAwareAspectAutoProxyCreator"><a href="#AnnotationAwareAspectAutoProxyCreator" class="headerlink" title="AnnotationAwareAspectAutoProxyCreator"></a>AnnotationAwareAspectAutoProxyCreator</h2><p>准备如下类</p><p>两个目标类</p><p>一个使用<font style="color:#DF2A3F;">@Aspect </font>的高级切面</p><p>一个利用配置类实现的低级切面 <font style="color:#DF2A3F;">Advisor</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A17</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target1</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target1 foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target2</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target2 bar&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高级切面,可以有多个切面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Aspect</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Before(&quot;execution(* com.example.aop.a17.A17.Target1.foo())&quot;)</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;aspect1 before...&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@After(&quot;execution(* com.example.aop.a17.A17.Target1.foo())&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;aspect1 after...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 低级切面，由一个切点和一个通知组成</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Advisor <span class="title function_">advisor</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">            pointcut.setExpression(<span class="string">&quot;execution(* com.example.aop.a17.A17.Target1.foo())&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">MethodInterceptor</span> <span class="variable">adivce3</span> <span class="operator">=</span> invocation -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;adivce3 before&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">                System.out.println(<span class="string">&quot;adivce3 after&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">DefaultPointcutAdvisor</span> <span class="variable">defaultPointcutAdvisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>();</span><br><span class="line">            defaultPointcutAdvisor.setPointcut(pointcut);</span><br><span class="line">            defaultPointcutAdvisor.setAdvice(adivce3);</span><br><span class="line">            <span class="keyword">return</span> defaultPointcutAdvisor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写 main() 方法创建 spring 容器，并添加必要的 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(Target1.class);</span><br><span class="line">    context.registerBean(Config.class);</span><br><span class="line">    context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line">    <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(beanDefinitionName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.example.aop.a17.A17$Target1</span><br><span class="line">com.example.aop.a17.A17$Config</span><br><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor</span><br><span class="line">advisor</span><br></pre></td></tr></table></figure><p>Spring 中存在名为 <font style="color:#DF2A3F;">AnnotationAwareAspectJAutoProxyCreator</font> 的 Bean 后置处理器（虽然这个类后缀没有 <font style="color:#DF2A3F;">BeanPostProcessor</font>，但是他实现了<font style="color:#DF2A3F;">BeanPostProcessor</font>）</p><p><font style="color:#DF2A3F;">AnnotationAwareAspectJAutoProxyCreator</font> 有两个作用：</p><ul><li>找到容器中所有的切面，针对高级切面，将其转换为低级切面</li><li>根据切面信息，利用 <font style="color:#DF2A3F;">ProxyFactory</font> 创建代理对象</li></ul><p><font style="color:#DF2A3F;">AnnotationAwareAspectJAutoProxyCreator</font> 实现了<font style="color:#DF2A3F;">BeanPostProcessor</font>，可以在 Bean 的生命周期一些阶段对 Bean 扩展。可以在**<font style="background-color:#1DC0C9;"> 依赖注入之前</font>****<font style="background-color:rgba(255, 255, 255, 0);"> </font>*<em>或者  <strong><font style="background-color:#1DC0C9;">Bean 初始化之后</font></strong></em>*<font style="background-color:rgba(255, 255, 255, 0);"> </font>**<font style="background-color:rgba(255, 255, 255, 0);">对 Bean 扩展。</font></p><p><font style="color:#DF2A3F;">AnnotationAwareAspectJAutoProxyCreator</font> 有两个重要的方法：</p><ul><li><font style="color:#DF2A3F;">findEligibleAdvisors()</font>：位于父类<font style="color:#DF2A3F;">AbstractAdvisorAutoProxyCreator</font> 中，找到符合条件的切面类。低级切面直接添加，高级切面转换低级切面再添加。</li><li><font style="color:#DF2A3F;">wrapIfNecessary()</font>：位于父类 <font style="color:#DF2A3F;">AbstractAutoProxyCreator</font> 中，用于将有资格被代理的 Bean 进行包装，即创建代理对象。</li></ul><h3 id="findEligibleAdvisors"><a href="#findEligibleAdvisors" class="headerlink" title="findEligibleAdvisors()"></a>findEligibleAdvisors()</h3><p><font style="color:#DF2A3F;">findEligibleAdvisors() </font>方法接收两个参数：</p><ul><li>beanClass 配合切面使用的目标类 Class 信息</li><li>beanName 当前被代理的 Bean 名称</li></ul><p>修改 mian() 方法，向容器添加 <font style="color:#DF2A3F;">AnnotationAwareAspectJAutoProxyCreator</font> 后置处理器，测试 <font style="color:#DF2A3F;">findEligibleAdvisors() </font>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(MyAspect.class);</span><br><span class="line">    context.registerBean(Config.class);</span><br><span class="line">    context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">    context.registerBean(AnnotationAwareAspectJAutoProxyCreator.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line">    <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">        <span class="comment">//            System.out.println(beanDefinitionName);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * findEligibleAdvisors() 找到符合条件的Advisor</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *   1. 符合条件的Advisor一部分是低级的，如下列中的Config里的advisor</span></span><br><span class="line"><span class="comment">         *   2. 符合条件的Advisor一部分是高级的，如下列中的MyAspect里的<span class="doctag">@Aspect</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="type">AnnotationAwareAspectJAutoProxyCreator</span> <span class="variable">creator</span> <span class="operator">=</span> context.getBean(AnnotationAwareAspectJAutoProxyCreator.class);</span><br><span class="line">    List&lt;Advisor&gt; advisors = creator.findEligibleAdvisors(Target1.class, <span class="string">&quot;target1&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">        System.out.println(advisor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.aop.interceptor.ExposeInvocationInterceptor.ADVISOR</span><br><span class="line">InstantiationModelAwarePointcutAdvisor: expression [execution(* foo())]; advice method [public void org.springframework.aop.framework.autoproxy.A17$MyAspect.before()]; perClauseKind=SINGLETON</span><br><span class="line">InstantiationModelAwarePointcutAdvisor: expression [execution(* foo())]; advice method [public void org.springframework.aop.framework.autoproxy.A17$MyAspect.after()]; perClauseKind=SINGLETON</span><br><span class="line">org.springframework.aop.support.DefaultPointcutAdvisor: pointcut [AspectJExpressionPointcut: () execution(* org.springframework.aop.framework.autoproxy.A17.Target1.foo())]; advice [org.springframework.aop.framework.autoproxy.A17$Config$$Lambda$118/0x00000249b01134c8@264f218]</span><br></pre></td></tr></table></figure><p>打印出 4 个配合 <font style="color:#DF2A3F;">Target1</font> 使用的切面信息：</p><ul><li>第一个切面 <font style="color:#DF2A3F;">ExposeInvocationInterceptor.ADVISOR</font>是 Spring 为每个代理对象都会添加的切面；</li><li>第二个切面 <font style="color:#DF2A3F;">DefaultPointcutAdvisor</font> 是自行编写的低级切面（Config 类里的）；</li><li>第三个和第四个切面 <font style="color:#DF2A3F;">InstantiationModelAwarePointcutAdvisor</font> 是由高级切面转换得到的两个低级切面(高级切面里的每个通知 都会 转换为一个 低级切面)。</li></ul><p>若按照<font style="color:#DF2A3F;"> creator.findEligibleAdvisors(Target2.class, “target2”) </font>的方式进行调用，控制台不会打印出任何信息，因为没有任何切面能够配合 <font style="color:#DF2A3F;">Target2</font> 使用。</p><h3 id="wrapIfNecessary"><a href="#wrapIfNecessary" class="headerlink" title="wrapIfNecessary()"></a>wrapIfNecessary()</h3><p><font style="color:#DF2A3F;">wrapIfNecessary()</font> 方法内部调用了 <font style="color:#DF2A3F;">findEligibleAdvisors() </font>方法，若<font style="color:#DF2A3F;"> findEligibleAdvisors() </font>方法返回的集合不为空，则表示需要创建代理对象。</p><p>如果需要创建对象<font style="color:#DF2A3F;">，wrapIfNecessary() </font>方法返回的是代理对象，否则仍然是原对象。</p><p><font style="color:#DF2A3F;">wrapIfNecessary() </font>方法接收三个参数：</p><ul><li>bean：原始 Bean 实例</li><li>beanName：Bean 名称</li><li>cacheKey：用于元数据访问缓存 Key</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> creator.wrapIfNecessary(<span class="keyword">new</span> <span class="title class_">Target1</span>(), <span class="string">&quot;target1&quot;</span>, <span class="string">&quot;target1&quot;</span>);</span><br><span class="line">    System.out.println(o1.getClass());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> creator.wrapIfNecessary(<span class="keyword">new</span> <span class="title class_">Target2</span>(), <span class="string">&quot;target2&quot;</span>, <span class="string">&quot;target2&quot;</span>);</span><br><span class="line">    System.out.println(o2.getClass());</span><br><span class="line"></span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class org.springframework.aop.framework.autoproxy.A17$Target1$$SpringCGLIB$$0</span><br><span class="line">class org.springframework.aop.framework.autoproxy.A17$Target2</span><br></pre></td></tr></table></figure><p><font style="color:#DF2A3F;">Target1</font> 对象是被代理的，而 <font style="color:#DF2A3F;">Target2</font> 依旧是原对象。</p><p>如果将 o1 转换为 Target1，并调用 foo() 方法，foo() 方法将被增强：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    ((Target1) o1).foo();</span><br><span class="line"></span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adivce3 before</span><br><span class="line">aspect1 before...</span><br><span class="line">target1 foo</span><br><span class="line">aspect1 after...</span><br><span class="line">adivce3 after</span><br></pre></td></tr></table></figure><p>其中 adivce3 before adivce3 after 是低级切面的增强，aspect1 before…   aspect1 after… 是高级切面的增强</p><h2 id="切面的顺序控制"><a href="#切面的顺序控制" class="headerlink" title="切面的顺序控制"></a>切面的顺序控制</h2><p>根据上述打印信息，低级切面 比 高级切面 先执行，这个执行顺序是可以控制的。</p><p>对于 高级切面来说， 可以在类上使用 <font style="color:#DF2A3F;">@Order</font> 注解，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Aspect1</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aspect1 before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* foo())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aspect1 after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高级切面中，<font style="color:#DF2A3F;">@Order </font>只有放在类上才生效，放在方法上不会生效。比如高级切面中有多个前置通知，这些前置通知对应的方法上使用 @Order 注解是无法生效的。</p><p>针对低级切面，需要设置 <font style="color:#DF2A3F;">advisor</font> 的 <font style="color:#DF2A3F;">order</font> 值，而不是向高级切面那样使用 <font style="color:#DF2A3F;">@Order </font>注解，使用 <font style="color:#DF2A3F;">@Order </font>注解设置在 **advisor3() **方法上是无用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 低级切面，由一个切点和一个通知组成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Advisor <span class="title function_">advisor3</span><span class="params">(MethodInterceptor advice3)</span> &#123;</span><br><span class="line">        <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">        pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br><span class="line">        <span class="type">DefaultPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice3);</span><br><span class="line">        <span class="comment">// 设置切面执行顺序</span></span><br><span class="line">        advisor.setOrder(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置完成后，高级切面的执行优先级高于低级切面。执行 main() 方法验证执行顺序是否改变：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aspect1 before...</span><br><span class="line">adivce3 before</span><br><span class="line">target1 foo</span><br><span class="line">adivce3 after</span><br><span class="line">aspect1 after...</span><br></pre></td></tr></table></figure><h2 id="代理对象创建时机"><a href="#代理对象创建时机" class="headerlink" title="代理对象创建时机"></a>代理对象创建时机</h2><p>使用 <font style="color:#DF2A3F;">AnnotationAwareAspectJAutoProxyCreator</font> Bean 后置处理器创建代理对象的时机有以下两个选择：</p><ul><li>Bean 依赖注入之前</li><li>Bean 初始化完成之后</li></ul><p>这两个时机二选一，不会重复创建代理对象</p><h3 id="Bean-依赖注入之前"><a href="#Bean-依赖注入之前" class="headerlink" title="Bean 依赖注入之前"></a>Bean 依赖注入之前</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.aop.framework.autoproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.CommonAnnotationBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A17_1代理创建的时机</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 代理创建的时机</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A17_1</span>代理创建的时机 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        context.registerBean(Config.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        context.close();</span><br><span class="line">        <span class="comment">// 创建 -&gt; (*) 依赖注入 -&gt; 初始化 (*)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 解析 <span class="doctag">@AspectJ</span> 注解，产生代理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> AnnotationAwareAspectJAutoProxyCreator <span class="title function_">annotationAwareAspectJAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationAwareAspectJAutoProxyCreator</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 解析 <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> AutowiredAnnotationBeanPostProcessor <span class="title function_">autowiredAnnotationBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutowiredAnnotationBeanPostProcessor</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 解析 <span class="doctag">@PostConstruct</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">static</span> CommonAnnotationBeanPostProcessor <span class="title function_">commonAnnotationBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonAnnotationBeanPostProcessor</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Advisor <span class="title function_">advisor</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">            pointcut.setExpression(<span class="string">&quot;execution(* foo())&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">MethodInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, interceptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span>  Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean1()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean1 init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean2()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean1</span><span class="params">(Bean1 bean1)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean2 setBean1(bean1) class is: &quot;</span> + bean1.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bean2 init()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">已连接到地址为 &#x27;&#x27;127.0.0.1:53708&#x27;，传输: &#x27;套接字&#x27;&#x27; 的目标虚拟机</span><br><span class="line">[TRACE] 09:06:24.481 [main] o.s.a.a.a.AnnotationAwareAspectJAutoProxyCreator - Did not attempt to auto-proxy infrastructure class [org.springframework.aop.Advisor] </span><br><span class="line">Bean1()</span><br><span class="line">Bean1 init()</span><br><span class="line">AnnotationAwareAspectJAutoProxyCreator - Creating implicit proxy for bean &#x27;bean1&#x27; with 0 common interceptors and 2 specific interceptors </span><br><span class="line">Bean2()</span><br><span class="line">Bean2 setBean1(bean1) class is: class org.springframework.aop.framework.autoproxy.A17_1代理创建的时机$Bean1$$SpringCGLIB$$0</span><br><span class="line">Bean2 init()</span><br><span class="line">已与地址为 &#x27;&#x27;127.0.0.1:53708&#x27;，传输: &#x27;套接字&#x27;&#x27; 的目标虚拟机断开连接</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><p>bean1 初始化后，打印了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotationAwareAspectJAutoProxyCreator - Creating implicit proxy for bean &#x27;bean1&#x27; with 0 common interceptors and 2 specific interceptors </span><br></pre></td></tr></table></figure><p>表示 bean1 创建了隐式代理。</p><p><strong>此时代理对象在 Bean 初始化完成之后创建。</strong></p><hr><h3 id="Bean-初始化完成之后"><a href="#Bean-初始化完成之后" class="headerlink" title="Bean 初始化完成之后"></a>Bean 初始化完成之后</h3><p>现在改变 bean1，添加 setBean2() 方法，表示向 bean1 中注入 bean2，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bean1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bean1 setBean2(bean2) class is: &quot;</span> + bean2.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bean1 init()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时出现循环依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bean1()</span><br><span class="line">Bean2()</span><br><span class="line">AnnotationAwareAspectJAutoProxyCreator - Creating implicit proxy <span class="keyword">for</span> bean <span class="string">&#x27;bean1&#x27;</span> with <span class="number">0</span> common interceptors and <span class="number">2</span> specific interceptors </span><br><span class="line">Bean2 <span class="title function_">setBean1</span><span class="params">(bean1)</span> <span class="keyword">class</span> <span class="title class_">is</span>: <span class="keyword">class</span> <span class="title class_">org</span>.springframework.aop.framework.autoproxy.A17_1代理创建的时机$Bean1$$SpringCGLIB$$<span class="number">0</span></span><br><span class="line">Bean2 <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">Bean1 <span class="title function_">setBean1</span><span class="params">(bean2)</span> <span class="keyword">class</span> <span class="title class_">is</span>: <span class="keyword">class</span> <span class="title class_">org</span>.springframework.aop.framework.autoproxy.A17_1代理创建的时机$Bean2</span><br><span class="line">Bean1 <span class="title function_">init</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>首先进行 bean1 的实例化，然后进行 bean1 的依赖注入，但此时容器中并没有 bean2，因此需要进行 bean2 的实例化。</p><p>接下来进行 bean2 的依赖注入，向 bean2 中注入 bean1，注入的 bean1 应该是被增强的，即它的代理对象，因此创建 bean1 的代理对象后再完成 bean2 的依赖注入。</p><p>接着继续 bean2 的生命周期，完成 bean2 的初始化阶段，最后回到 bean1 的依赖注入阶段，向 bean1 中注入 bean2，最后完成 bean1 的初始化阶段。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>代理对象的创建时机：</p><ul><li>无循环依赖时，在 Bean 初始化阶段之后创建</li><li>有循环依赖时，在 Bean 实例化后，依赖注入之前创建，讲代理对象存于二级缓存</li></ul><p>Bean 的依赖注入阶段和初始化阶段不应该被增强，仍应被施加于原始对象。</p><h2 id="高级切面转低级切面"><a href="#高级切面转低级切面" class="headerlink" title="高级切面转低级切面"></a>高级切面转低级切面</h2><p>调用 <font style="color:#DF2A3F;">AnnotationAwareAspectJAutoProxyCreator</font> 对象的<font style="color:#DF2A3F;"> findEligibleAdvisors()</font> 方法时，</p><p>获取能配合目标 Class 使用的切面，最终返回 <font style="color:#DF2A3F;">Advisor</font> 列表。</p><p>在搜索过程中如果碰到高级切面 @Aspect 讲其转成低级切面。</p><p>现有切面类与目标类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.aop.framework.autoproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJMethodBeforeAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.SingletonAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultPointcutAdvisor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A17_2高级切面转低级切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/9/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A17_2</span>高级切面转低级切面 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Aspect</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before(&quot;execution(* foo(..))&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before1</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;before1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before(&quot;execution(* foo(..))&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before2</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;before2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;afterThrowing&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;around...before&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                joinPoint.proceed();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;around...after&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;target foo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//切面对象实例工厂，用于后续反射调用切面中的方法</span></span><br><span class="line">        <span class="type">AspectInstanceFactory</span> <span class="variable">singletonAspectInstanceFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(<span class="keyword">new</span> <span class="title class_">Aspect</span>());</span><br><span class="line">        <span class="comment">//高级切面转低级切面类</span></span><br><span class="line">        ArrayList&lt;Advisor&gt; advisorArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Method method : Aspect.class.getDeclaredMethods()) &#123;</span><br><span class="line">            <span class="comment">//这里用@Before注解来演示</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(Before.class))&#123;</span><br><span class="line">                <span class="comment">//解析切面</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">exprssion</span> <span class="operator">=</span> method.getAnnotation(Before.class).value();</span><br><span class="line">                <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">                pointcut.setExpression(exprssion);</span><br><span class="line">                <span class="comment">//通知类。前置通知对应的通知类是 AspectJMethodBeforeAdvice</span></span><br><span class="line">                <span class="type">AspectJMethodBeforeAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJMethodBeforeAdvice</span>(method, pointcut, singletonAspectInstanceFactory);</span><br><span class="line">                <span class="comment">//切面</span></span><br><span class="line">                <span class="type">DefaultPointcutAdvisor</span> <span class="variable">defaultPointcutAdvisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, advice);</span><br><span class="line">                advisorArrayList.add(defaultPointcutAdvisor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Advisor advisor : advisorArrayList) &#123;</span><br><span class="line">            System.out.println(advisor);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.aop.support.DefaultPointcutAdvisor: pointcut [AspectJExpressionPointcut: () execution(* foo(..))]; advice [org.springframework.aop.aspectj.AspectJMethodBeforeAdvice: advice method [<span class="keyword">public</span> <span class="keyword">void</span> org.springframework.aop.framework.autoproxy.A17_2高级切面转低级切面$Aspect.before2()]; aspect name <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">org.springframework.aop.support.DefaultPointcutAdvisor: pointcut [AspectJExpressionPointcut: () execution(* foo(..))]; advice [org.springframework.aop.aspectj.AspectJMethodBeforeAdvice: advice method [<span class="keyword">public</span> <span class="keyword">void</span> org.springframework.aop.framework.autoproxy.A17_2高级切面转低级切面$Aspect.before1()]; aspect name <span class="string">&#x27;&#x27;</span>]</span><br></pre></td></tr></table></figure><p>@Befor 标记的前置通知会被转换成原始的 AspectJMethodBeforAdvice 形式，该对象包含了以下信息：</p><ul><li>通知对应的方法信息</li><li>切点信息</li><li>通知对象如何创建，本例公用一个 Aspect 对象</li></ul><p>通知相关最佳与原始通知类对应关系如下：</p><table><thead><tr><th align="center">注解</th><th align="center">对应原始通知类</th></tr></thead><tbody><tr><td align="center">@Before</td><td align="center">AspectJMethodBeforeAdvice</td></tr><tr><td align="center">@AfterReturning</td><td align="center">AspectJAfterReturningAdvice</td></tr><tr><td align="center">@AfterThrowing</td><td align="center">AspectJAfterThrowingAdvice</td></tr><tr><td align="center">@After</td><td align="center">AspectJAfterAdvice</td></tr><tr><td align="center">@Around</td><td align="center">AspectJAroundAdvice</td></tr></tbody></table><h1 id="静态通知调用"><a href="#静态通知调用" class="headerlink" title="静态通知调用"></a>静态通知调用</h1><h1 id="动态通知调用"><a href="#动态通知调用" class="headerlink" title="动态通知调用"></a>动态通知调用</h1>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring四十九讲容器与Bean</title>
      <link href="/2024/08/18/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2%E5%AE%B9%E5%99%A8%E4%B8%8EBean/"/>
      <url>/2024/08/18/Spring%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AE%B2%E5%AE%B9%E5%99%A8%E4%B8%8EBean/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><meta name="referrer" content="no-referrer" /><meta name="referrer" content="no-referrer" /<p><a href="https://player.bilibili.com/player.html?bvid=BV1P44y1N7QG&p=2&page=2&autoplay=0">点击查看【bilibili】</a><br>参考视频： <a href="https://www.bilibili.com/video/BV1P44y1N7QG?p=2&vd_source=a135b499e23dccf1ea18573ee3223d8a">黑马程序员Spring视频教程，全面深度讲解spring5底层原理</a></p><p>红色字体类名称<br>蓝色字体超链接<br>黄色字体类型<br>绿色字体属性名称</p><h1 id="1-容器接口"><a href="#1-容器接口" class="headerlink" title="1.容器接口"></a>1.容器接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedSpringApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(AdvancedSpringApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在idea里查看ConfigurableApplicationContext的类图：<img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723612543115-0ff5ea2d-6cba-42a8-a6a8-88464597d629.png#averageHue=%23242529&clientId=u6318224b-4940-4&from=paste&height=173&id=uade24e37&originHeight=195&originWidth=840&originalType=binary&ratio=1.125&rotation=0&showTitle=true&size=118809&status=done&style=none&taskId=u25c7144b-dc91-4e58-9b19-2660b4edac9&title=ConfigurableApplicationContext%E7%9A%84%E7%B1%BB%E5%9B%BE&width=746.6666666666666" alt="ConfigurableApplicationContext的类图" title="ConfigurableApplicationContext的类图"><br>ConfigurableApplicationContext 接口继承了 ApplicationContext 接口，而 ApplicationContext 接口又间接地继承了 BeanFactory 接口，除此之外还继承了其他很多接口，相当于对 BeanFactory 进行了拓展。</p><h2 id="什么是-BeanFactory"><a href="#什么是-BeanFactory" class="headerlink" title="什么是 BeanFactory"></a>什么是 BeanFactory</h2><p>BeanFactory 是SpringIoC容器  ，提供一系列Bean的接口。<br>基于它也有众多子接口：</p><ul><li>它是 ApplicationContext 的父接口</li><li>它才是 Spring 的核心容器，主要的 ApplicationContext 实现 组合 了它的功能，也就是说，BeanFactory 是 ApplicationContext 中的一个成员变量。</li></ul><p>常用的 <code>context.getBean(&quot;xxx&quot;)</code> 方法，其实是调用了 BeanFactory 的 getBean() 方法。</p><h3 id="BeanFactory-能做什么？"><a href="#BeanFactory-能做什么？" class="headerlink" title="BeanFactory 能做什么？"></a>BeanFactory 能做什么？</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723611500384-574701ac-dc6a-464a-bc38-7ad84943d5ad.png#averageHue=%23272e39&clientId=u6318224b-4940-4&from=paste&height=575&id=u9ab7f90e&originHeight=647&originWidth=859&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=144905&status=done&style=none&taskId=udfdcf4d9-4e1e-42c5-a6f9-c07b769e8fb&title=&width=763.5555555555555" alt="image.png"><br>通过这些方法定义可知，BeanFactory 表面上只有 getBean() 方法，但实际上 Spring 中的控制反转、基本的依赖注入、乃至 Bean 的生命周期中的各个功能都是由它的实现类提供。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723611569847-0e3bddeb-f61e-4bf8-b155-467ea500cb1b.png#averageHue=%232a2e36&clientId=u6318224b-4940-4&from=paste&height=370&id=u7f2b1b74&originHeight=416&originWidth=974&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=62552&status=done&style=none&taskId=u3c761625-c5ac-499d-8297-c9ddc9ade05&title=&width=865.7777777777778" alt="image.png"><br>DefaultListableBeanFactory 实现了 BeanFactory 接口，它能管理 Spring 中所有的 Bean，当然也包含 Spring 容器中的那些单例对象。</p><p>DefaultListableBeanFactory 还继承了 DefaultSingletonBeanRegistry 类，这个类就是用来管理 Spring 容器中的单例对象。</p><p>在 IDEA 提供的类图中选中 DefaultSingletonBeanRegistry，然后按下 F4 进入这个类。它有一个 Map 类型的成员变量 singletonObjects：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(<span class="number">256</span>);</span><br></pre></td></tr></table></figure><p>Map的key就是Bean的名称，value是此bean，即单例对象。</p><p>而我们要对单例bean操作的话, Spring提供SmartInitializingSingleton#afterSingletonsInstantiated()方法可以在单例Bean初始化后被调用处理。</p><p>现有如下两个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Component1</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Component2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看singletonObjects里是否存在这两个bean的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedSpringApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动Spring应用程序并返回应用程序上下文</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(AdvancedSpringApplication.class, args);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">singletonObjects</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 尝试获取DefaultSingletonBeanRegistry类中名为&quot;singletonObjects&quot;的字段</span></span><br><span class="line">        <span class="comment">// 该字段是Spring容器用来存储singleton对象的Map</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            singletonObjects = DefaultSingletonBeanRegistry.class.getDeclaredField(<span class="string">&quot;singletonObjects&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置该字段可访问，以便后续可以获取其值</span></span><br><span class="line">            singletonObjects.setAccessible(Boolean.TRUE);</span><br><span class="line">            <span class="comment">// 获取Spring容器中singleton对象的Map</span></span><br><span class="line">            Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) singletonObjects.get(run.getBeanFactory());</span><br><span class="line">            <span class="comment">// 过滤并打印所有以&quot;component&quot;开头的Bean的名称和值</span></span><br><span class="line">            map.entrySet().stream().filter(e -&gt; e.getKey().startsWith(<span class="string">&quot;component&quot;</span>))</span><br><span class="line">                    .forEach(e -&gt; System.out.println(e.getKey() + <span class="string">&quot; &quot;</span> + e.getValue()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">component daidawang.advancedSpring.Component@1ee29c84</span><br><span class="line">component1 daidawang.advancedSpring.Component1@7c8326a4</span><br></pre></td></tr></table></figure><h2 id="ApplicationContext-的功能"><a href="#ApplicationContext-的功能" class="headerlink" title="ApplicationContext 的功能"></a>ApplicationContext 的功能</h2><p>回顾ConfigurableApplicationContext类的类图：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723612496966-461b5c8e-255b-45d3-9f4b-82d68c597025.png#averageHue=%23212226&clientId=u6318224b-4940-4&from=paste&height=344&id=u9390f158&originHeight=387&originWidth=1670&originalType=binary&ratio=1.125&rotation=0&showTitle=true&size=73070&status=done&style=none&taskId=uc76437cc-f05b-4832-8d36-20320fd879c&title=ConfigurableApplicationContext%E7%9A%84%E7%B1%BB%E5%9B%BE&width=1484.4444444444443" alt="ConfigurableApplicationContext的类图" title="ConfigurableApplicationContext的类图"><br>ApplicationContext 除了继承 BeanFactory 外，还继承了：</p><ul><li>MessageSource：使其具备处理国际化资源的能力</li><li>ResourcePatternResolver：使其具备使用通配符进行资源匹配的能力</li><li>EnvironmentCapable：使其具备读取 Spring 环境信息、配置文件信息的能力</li><li>ApplicationEventPublisher：使其具备发布事件的能力</li></ul><h3 id="MessageSource-的使用"><a href="#MessageSource-的使用" class="headerlink" title="MessageSource 的使用"></a>MessageSource 的使用</h3><p>主要用于提供国际化支持。<br>在 SpringBoot 项目的 resources 目录下创建 messages.properties、messages_en.properties、messages_zh_CN.properties、messages_zh_TW.properties 四个国际化文件，除 messages.properties 外，其余三个文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thanks=Thank you</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thanks=谢谢</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thanks=謝謝</span><br></pre></td></tr></table></figure><p>注意检查 File &gt; Settings &gt; Editor &gt; File Encodings 将确保 Project Encoding 、 Default Encoding 、 Properties files 设置为 UTF-8。<br>测试 MessageSource 接口中 getMessage() 方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A01Application.class, args);</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    System.out.println(context.getMessage(<span class="string">&quot;thanks&quot;</span>, <span class="literal">null</span>, Locale.ENGLISH));</span><br><span class="line">    System.out.println(context.getMessage(<span class="string">&quot;thanks&quot;</span>, <span class="literal">null</span>, Locale.SIMPLIFIED_CHINESE));</span><br><span class="line">    System.out.println(context.getMessage(<span class="string">&quot;thanks&quot;</span>, <span class="literal">null</span>, Locale.TRADITIONAL_CHINESE));</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thank you</span><br><span class="line">谢谢</span><br><span class="line">謝謝</span><br></pre></td></tr></table></figure><h3 id="ResourcePatternResolver-的使用"><a href="#ResourcePatternResolver-的使用" class="headerlink" title="ResourcePatternResolver 的使用"></a>ResourcePatternResolver 的使用</h3><p>主要用于解析带有通配符的资源路径，通常用于查找符合特定模式的所有资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A01Application.class, args);</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    Resource[] resources = context.getResources(<span class="string">&quot;classpath:application.properties&quot;</span>);</span><br><span class="line">    Assert.isTrue(resources.length &gt; <span class="number">0</span>, <span class="string">&quot;加载类路径下的 application.properties 文件失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 classpath* 可以加载 jar 里类路径下的 resource</span></span><br><span class="line">    resources = context.getResources(<span class="string">&quot;classpath*:META-INF/spring.factories&quot;</span>);</span><br><span class="line">    Assert.isTrue(resources.length &gt; <span class="number">0</span>, <span class="string">&quot;加载类路径下的 META-INF/spring.factories 文件失败&quot;</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EnvironmentCapable-的使用"><a href="#EnvironmentCapable-的使用" class="headerlink" title="EnvironmentCapable 的使用"></a>EnvironmentCapable 的使用</h3><p>用于表示访问spring应用上下文中的 Environment 对象组件。<br>Environment对象提供访问外部配置的能力，例如系统属性、环境变量或配置文件读取属性值。<br>在application.yml 里添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&#123;&quot;author.name&quot;:&quot;daidawang&quot;&#125;</span></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;daidawang&quot;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">gender:</span> <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><p>java_home 是从环境变量中读取，properties.name 则是从 application.yml 配置文件中读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A01Application.class, args);</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;java_home&quot;</span>));</span><br><span class="line">    System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;properties.name&quot;</span>));</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\software\work\jdk\jdk8\jdk</span><br><span class="line">daidawang</span><br></pre></td></tr></table></figure><h3 id="ApplicationEventPublisher-的使用"><a href="#ApplicationEventPublisher-的使用" class="headerlink" title="ApplicationEventPublisher 的使用"></a>ApplicationEventPublisher 的使用</h3><p>点击进入 [48事件 - 监听器](<a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/hu3f16agn841fm9h#oXq3A">AQWSSpring四十九讲杂项 (yuque.com)</a> “超链接title”)</p><p>点击进入 [48事件 - 发布器](<a href="https://www.yuque.com/daidawang-jlmiu/tyvtug/hu3f16agn841fm9h#zkdcQ">AQWSSpring四十九讲杂项 (yuque.com)</a> “超链接title”)</p><p>ApplicationEventPublisher调用publishEvent() 方法传入ApplicationEvent 实例参数 来完成发布事件。<br>并通过@EventListener 注解来监听事件。<br>定义事件类UserRegisteredEvent：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisteredEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6319117283222183184L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRegisteredEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Component1 作为发送事件的 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Component1</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher context;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户注册&quot;</span>);</span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> <span class="title class_">UserRegisteredEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Compinedt2作为事件监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Component2</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aaa</span><span class="params">(UserRegisteredEvent event)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, event);</span><br><span class="line">        log.info(<span class="string">&quot;发送短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 main() 方法中使用 Component1 发送事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A01Application.class, args);</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    context.getBean(Component1.class).register();</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2024</span>-08-14T14:<span class="number">28</span>:<span class="number">57.394</span>+08:<span class="number">00</span>  INFO <span class="number">21560</span> --- [advanced-spring] [           main] d.advancedSpring.bean.Component1         : 用户注册</span><br><span class="line"><span class="number">2024</span>-08-14T14:<span class="number">28</span>:<span class="number">57.394</span>+08:<span class="number">00</span>  INFO <span class="number">21560</span> --- [advanced-spring] [           main] d.advancedSpring.bean.Component2         : daidawang.advancedSpring.bean.UserRegisteredEvent[source=daidawang.advancedSpring.bean.Component1@7fab4be7]</span><br><span class="line"><span class="number">2024</span>-08-14T14:<span class="number">28</span>:<span class="number">57.395</span>+08:<span class="number">00</span>  INFO <span class="number">21560</span> --- [advanced-spring] [           main] d.advancedSpring.bean.Component2         : 发送短信</span><br></pre></td></tr></table></figure><h1 id="2-容器实现"><a href="#2-容器实现" class="headerlink" title="2.容器实现"></a>2.容器实现</h1><h2 id="BeanFactory的实现"><a href="#BeanFactory的实现" class="headerlink" title="BeanFactory的实现"></a>BeanFactory的实现</h2><p>需要使用到BeanFactory的实现类DefaultListableBeanFactory。<br>有了Bean工厂还需要定义Bean，之后把定义的Bean注册到工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;构造 Bean1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bean2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;构造 Bean2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义beanDefinition并注册到BeanFactory"><a href="#自定义beanDefinition并注册到BeanFactory" class="headerlink" title="自定义beanDefinition并注册到BeanFactory"></a>自定义beanDefinition并注册到BeanFactory</h3><p>bean工厂手动注册beanDefinition：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 DefaultListableBeanFactory 实例，用于管理 Bean 生命周期和依赖注入</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">        <span class="comment">// 使用 BeanDefinitionBuilder 创建并配置一个泛型 Bean 定义</span></span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(DdwangBeanFactory.Config.class)</span><br><span class="line">                <span class="comment">//设置其作用域为 singleton</span></span><br><span class="line">                .setScope(<span class="string">&quot;singleton&quot;</span>)</span><br><span class="line">                <span class="comment">//获取 BeanDefinition 对象</span></span><br><span class="line">                .getBeanDefinition();</span><br><span class="line">        <span class="comment">// 在 BeanFactory 中注册上述 BeanDefinition，注册名为 &quot;config&quot;</span></span><br><span class="line">    beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>, beanDefinition);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------手动注册config开始打印-------------------------&quot;</span>);</span><br><span class="line">        Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------手动注册config打印结束-------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------------手动注册config开始打印-------------------------</span><br><span class="line">config</span><br><span class="line">--------------------手动注册config打印结束-------------------------</span><br></pre></td></tr></table></figure><p>说明现在Bean工厂 <strong>有且只有一个</strong> 名为config的Bean。<br>现在明明有注解 <code>@Configuration</code> 和 <code>@Bean</code> 为什么Bean工厂里没有呢？<br>是因为现在的 DefaultListableBeanFactory 缺少了解析注解的能力。</p><h3 id="添加注解解析器"><a href="#添加注解解析器" class="headerlink" title="添加注解解析器"></a>添加注解解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册注解配置处理器，以便处理配置注解</span></span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------注册注解配置处理器开始打印------------------------&quot;</span>);</span><br><span class="line">        Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------注册注解配置处理器打印结束------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--------------------手动注册config开始打印-------------------------</span><br><span class="line">config</span><br><span class="line">--------------------手动注册config打印结束-------------------------</span><br><span class="line">---------------------注册注解配置处理器开始打印------------------------</span><br><span class="line">config</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">---------------------注册注解配置处理器打印结束------------------------</span><br></pre></td></tr></table></figure><p>根据打印出的信息，可以看到有一个名为 org.springframework.context.annotation.internalConfigurationAnnotationProcessor 的 Bean，根据其所含的 ConfigurationAnnotationProcessor 字样，可以知道这个 Bean 就是用来处理 <code>@Configuration</code> 和 <code>@Bean </code>注解的，将配置类中定义的 Bean 信息补充到 BeanFactory 中。</p><p>那为什么在 Bean 工厂中依旧没有 <code>bean1</code> 和 <code>bean2</code> 呢？</p><p>现在仅仅是将处理器添加到了 Bean 工厂，还没有使用处理器。</p><h3 id="使用注解解析器"><a href="#使用注解解析器" class="headerlink" title="使用注解解析器"></a>使用注解解析器</h3><p>使用处理器很简单，先获取到处理器，然后再使用即可。像 internalConfigurationAnnotationProcessor 这样的 Bean，都有一个共同的类型，名为 BeanFactoryPostProcessor，因此可以：<br>添加并使用BeanFactoryPostProcessor后置处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用后置处理器</span></span><br><span class="line">    <span class="comment">//根据类型获取工厂下的bean</span></span><br><span class="line">    beanFactory.getBeansOfType(BeanFactoryPostProcessor.class)</span><br><span class="line">    <span class="comment">// 获取所有 BeanFactoryPostProcessor实现的实例</span></span><br><span class="line">    .values()</span><br><span class="line">    <span class="comment">//并调用它们的 postProcessBeanFactory 方法</span></span><br><span class="line">    .forEach(p -&gt; p.postProcessBeanFactory(beanFactory));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------添加并使用BeanFactory 后置处理器开始打印------------------------&quot;</span>);</span><br><span class="line">    Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------添加并使用BeanFactory 后置处理器打印结束------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--------------------手动注册config开始打印-------------------------</span><br><span class="line">config</span><br><span class="line">--------------------手动注册config打印结束-------------------------</span><br><span class="line">---------------------注册注解配置处理器开始打印------------------------</span><br><span class="line">config</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">---------------------注册注解配置处理器打印结束------------------------</span><br><span class="line">---------------------添加并使用BeanFactory 后置处理器开始打印------------------------</span><br><span class="line">config</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">bean1</span><br><span class="line">bean2</span><br><span class="line">bean3</span><br><span class="line">bean4</span><br><span class="line">---------------------添加并使用BeanFactory 后置处理器打印结束------------------------</span><br></pre></td></tr></table></figure><h3 id="添加依赖注入功能"><a href="#添加依赖注入功能" class="headerlink" title="添加依赖注入功能"></a>添加依赖注入功能</h3><p>现在<code>bean1</code> 和 <code>bean2</code> 已经被添加到Bean工厂，<br>修改 <code>bean1</code>使之依赖于 <code>bean2</code>，查看是否成功注入到 <code>bean1</code>中：<br>bean1依赖于 bean2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;构造 Bean1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bean2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;----------------------Bean后置处理器开始打印-----------------------&quot;</span>);</span><br><span class="line">System.out.println(beanFactory.getBean(DdwangBeanFactory.Bean1.class).getBean2());</span><br><span class="line">System.out.println(<span class="string">&quot;----------------------Bean后置处理器打印结束-----------------------&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">----------------------Bean后置处理器开始打印-----------------------</span><br><span class="line">16:54:10.857 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean1 -- 构造 Bean1()</span><br><span class="line">null</span><br><span class="line">----------------------Bean后置处理器打印结束-----------------------</span><br></pre></td></tr></table></figure><p>发现目前的bean工厂无法 注入 <code>bean2</code> 到<code>bean1</code>。<br>internalAutowiredAnnotationProcessor 后置处理器用于解析 <code>@Autowired</code><br>internalCommonAnnotationProcessor 后置处理器用于解析 <code>@Resource</code><br>它们都有一个共同的类型 BeanPostProcessor，因此可以：<br>添加并使用Bean后置处理器：BeanPostProcessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// --snip--</span></span><br><span class="line">        <span class="comment">//添加并使用Bean后置处理器：BeanPostProcessor </span></span><br><span class="line">        <span class="comment">//对 Bean 的生命周期的各个阶段提供拓展，例如 @AutoWired @Resource...</span></span><br><span class="line">        beanFactory.getBeansOfType(BeanPostProcessor.class)</span><br><span class="line">                .values()</span><br><span class="line">                .forEach(beanFactory::addBeanPostProcessor);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------Bean后置处理器开始打印-----------------------&quot;</span>);</span><br><span class="line">        System.out.println(beanFactory.getBean(DdwangBeanFactory.Bean1.class).getBean2());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------Bean后置处理器打印结束-----------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----------------------Bean后置处理器开始打印-----------------------</span><br><span class="line">16:56:35.432 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean1 -- 构造 Bean1()</span><br><span class="line">16:56:35.445 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean2 -- 构造 Bean2()</span><br><span class="line">daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean2@587e5365</span><br><span class="line">----------------------Bean后置处理器打印结束-----------------------</span><br></pre></td></tr></table></figure><p>建立 BeanPostProcessor 和 BeanFactory 的关系后，bean2 被成功注入到 bean1 中了。</p><h3 id="按需加载bean改为预加载"><a href="#按需加载bean改为预加载" class="headerlink" title="按需加载bean改为预加载"></a>按需加载bean改为预加载</h3><p>当需要使用 Bean 时，Bean 才会被创建，即按需加载。</p><p>那有没有什么办法预先就初始化好单例对象呢？</p><p>添加   <code>beanFactory.preInstantiateSingletons(); </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 DefaultListableBeanFactory 实例，用于管理 Bean 生命周期和依赖注入</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">        <span class="comment">// 使用 BeanDefinitionBuilder 创建并配置一个泛型 Bean 定义</span></span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(DdwangBeanFactory.Config.class)</span><br><span class="line">                <span class="comment">//设置其作用域为 singleton</span></span><br><span class="line">                .setScope(<span class="string">&quot;singleton&quot;</span>)</span><br><span class="line">                <span class="comment">//获取 BeanDefinition 对象</span></span><br><span class="line">                .getBeanDefinition();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 BeanFactory 中注册上述 BeanDefinition，注册名为 &quot;config&quot;</span></span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;config&quot;</span>, beanDefinition);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------手动注册config开始打印-------------------------&quot;</span>);</span><br><span class="line">        Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------手动注册config打印结束-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册注解配置处理器，以便处理配置注解</span></span><br><span class="line">        AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------注册注解配置处理器开始打印------------------------&quot;</span>);</span><br><span class="line">        Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------注册注解配置处理器打印结束------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加并使用BeanFactory 后置处理器 BeanFactoryPostProcessor 补充了一些 Bean 的定义</span></span><br><span class="line">        beanFactory.getBeansOfType(BeanFactoryPostProcessor.class)</span><br><span class="line">                .values()</span><br><span class="line">                .forEach(p -&gt; p.postProcessBeanFactory(beanFactory));</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------添加并使用BeanFactory 后置处理器开始打印------------------------&quot;</span>);</span><br><span class="line">        Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------添加并使用BeanFactory 后置处理器打印结束------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加并使用Bean后置处理器：BeanPostProcessor 对 Bean 的生命周期的各个阶段提供拓展，例如 @AutoWired @Resource...</span></span><br><span class="line">        beanFactory.getBeansOfType(BeanPostProcessor.class)</span><br><span class="line">                .values() </span><br><span class="line">                .forEach(beanFactory::addBeanPostProcessor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预先初始化单例对象（完成依赖注入和初始化流程）</span></span><br><span class="line">        beanFactory.preInstantiateSingletons();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------Bean后置处理器开始打印，开启预先初始化单例-----------------------&quot;</span>);</span><br><span class="line">        System.out.println(beanFactory.getBean(DdwangBeanFactory.Bean1.class).getBean2());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------Bean后置处理器打印结束-----------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加<code>beanFactory.preInstantiateSingletons();</code>后控制台打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---------------------添加并使用BeanFactory 后置处理器打印结束------------------------</span><br><span class="line">17:03:25.096 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean1 -- 构造 Bean1()</span><br><span class="line">17:03:25.109 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean2 -- 构造 Bean2()</span><br><span class="line">17:03:25.110 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean3 -- 构造 Bean3()</span><br><span class="line">17:03:25.111 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean4 -- 构造 Bean4()</span><br><span class="line">----------------------Bean后置处理器开始打印，开启预先初始化单例-----------------------</span><br><span class="line">daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean2@4961f6af</span><br><span class="line">----------------------Bean后置处理器打印结束-----------------------</span><br></pre></td></tr></table></figure><p>发现在输出———-Bean后置处理器开始打印，开启预先初始化单例——– 之前bean就初始化了，</p><p>如何注释掉40行 <code>beanFactory.preInstantiateSingletons();</code>, </p><p>发现在输出———-Bean后置处理器开始打印，开启预先初始化单例——– 之后bean被调用才初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---------------------添加并使用BeanFactory 后置处理器打印结束------------------------</span><br><span class="line">----------------------Bean后置处理器开始打印，开启预先初始化单例-----------------------</span><br><span class="line">17:04:48.876 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean1 -- 构造 Bean1()</span><br><span class="line">17:04:48.891 [main] INFO daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean2 -- 构造 Bean2()</span><br><span class="line">daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean2@587e5365</span><br><span class="line">----------------------Bean后置处理器打印结束-----------------------</span><br></pre></td></tr></table></figure><h3 id="总结BeanFactory的实现"><a href="#总结BeanFactory的实现" class="headerlink" title="总结BeanFactory的实现"></a>总结BeanFactory的实现</h3><p>通过上面代码测试得到，<font style="color:#DF2A3F;">BeanFactory</font> 不会 ：</p><ul><li>不会主动调用 BeanFactory 后置处理器；</li><li>不会主动添加 Bean 后置处理器；</li><li>不会主动初始化单例对象；</li><li>解析 ${} 和 #{} （未写代码）<a href="#ofjcB">详见 4.7 ${}内嵌值后置处理器</a></li></ul><h2 id="后置处理器的排序"><a href="#后置处理器的排序" class="headerlink" title="后置处理器的排序"></a>后置处理器的排序</h2><p><code>@Autowired</code>根据类型注入，如果同种类型的 Bean 有多个且没有指定变量名则报错。</p><p><code>@Resource</code> 根据名称注入。</p><p>如果使用 @Autowired 的变量名称注入bean3， 又使用 @Resource(name &#x3D; “bean4”) 注入bean4 呢？ </p><p>新增如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean3 <span class="title function_">bean3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean3</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean4 <span class="title function_">bean4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean4</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean3</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;构造 Bean3()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> <span class="keyword">implements</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean4</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;构造 Bean4()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;构造 Bean1()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Bean2 <span class="title function_">getBean2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bean2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="meta">@Resource(name = &quot;bean4&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Inter bean3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Inter <span class="title function_">getInter</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bean3;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    System.out.println(beanFactory.getBean(Bean1.class).getInter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean4@707194ba</span><br></pre></td></tr></table></figure><p>根据打印的结果可知，<code>@Autowired</code> 先生效了，这是因为 <font style="color:#DF2A3F;">internalAutowiredAnnotationProcessor</font> 排在 <font style="color:#DF2A3F;">internalCommonAnnotationProcessor</font> 之前。可以查看bean处理器的先后关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    beanFactory.getBeansOfType(BeanPostProcessor.class).values().forEach(i -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt; &quot;</span> + i);</span><br><span class="line">        beanFactory.addBeanPostProcessor(i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor@385c9627</span><br><span class="line">&gt;&gt;&gt;&gt; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor@139982de</span><br></pre></td></tr></table></figure><p>通过流处理来改变它们的顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    beanFactory.getBeansOfType(BeanPostProcessor.class).values().stream()</span><br><span class="line">        .sorted(Objects.requireNonNull(beanFactory.getDependencyComparator()))</span><br><span class="line">        .forEach(i -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt; &quot;</span> + i);</span><br><span class="line">            beanFactory.addBeanPostProcessor(i);</span><br><span class="line">        &#125;);</span><br><span class="line">    System.out.println(beanFactory.getBean(Bean1.class).getInter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor@139982de</span><br><span class="line">&gt;&gt;&gt;&gt; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor@682b2fa</span><br><span class="line">daidawang.advancedSpring.bean.a02.DdwangBeanFactory$Bean4@445b295b</span><br></pre></td></tr></table></figure><p>为什么使用<font style="color:#DF2A3F;"> beanFactory.getDependencyComparator()</font> 后就改变了 <font style="color:#DF2A3F;">BeanPostProcessor</font> 的先后顺序呢？</p><p>在调用的<font style="color:#DF2A3F;"> AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</font> 方法源码中有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerAnnotationConfigProcessors</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    registerAnnotationConfigProcessors(registry, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">registerAnnotationConfigProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">    BeanDefinitionRegistry registry, <span class="meta">@Nullable</span> Object source)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    <span class="keyword">if</span> (beanFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getDependencyComparator() <span class="keyword">instanceof</span> AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            <span class="comment">// 设置比较器</span></span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getAutowireCandidateResolver() <span class="keyword">instanceof</span> ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<font style="color:#DF2A3F;">AutowiredAnnotationBeanPostProcessor</font> 源码：其oreder为<font style="background-color:rgba(255, 255, 255, 0);"> Integer.MAX_VALUE-2</font><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723631177258-d52974f4-bc08-4f6c-b838-98624c0cf641.png"></p><p>进入<font style="color:#DF2A3F;">CommonAnnotationBeanPostProcessor </font>源码：其oreder为 In<font style="background-color:rgba(255, 255, 255, 0);">teger.MAX_VALUE-3</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723631443169-938a8854-595a-47c9-9c04-75d468d82ca7.png"></p><p>值越小，优先级越大，就排在更前面。</p><p>所以<font style="color:#DF2A3F;">CommonAnnotationBeanPostProcessor</font> 的优先级高，<font style="color:#DF2A3F;">@Resource</font> 就先生效</p><h2 id="ApplicationContext的实现"><a href="#ApplicationContext的实现" class="headerlink" title="ApplicationContext的实现"></a>ApplicationContext的实现</h2><p>基础准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> Bean1 bean1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h3><p>读取类路径下的xml文件并初始化和管理bean.</p><p>基于 classpath 下的 xml 格式的配置文件来创建。</p><p>创建一个名为为b01的xml，并配置bean2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;daidawang.advancedSpring.bean.a02.DdwangApplicationContext.Bean1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;daidawang.advancedSpring.bean.a02.DdwangApplicationContext.Bean2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bean1&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bean1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testClassPathXmlApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;b01.xml&quot;</span>);</span><br><span class="line">    Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    System.out.println(context.getBean(Bean2.class).getBean1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bean1</span><br><span class="line">bean2</span><br><span class="line">daidawang.advancedSpring.bean.a02.DdwangApplicationContext$Bean1@503d687a</span><br></pre></td></tr></table></figure><h3 id="FileSystemXmlApplicationContext"><a href="#FileSystemXmlApplicationContext" class="headerlink" title="FileSystemXmlApplicationContext"></a>FileSystemXmlApplicationContext</h3><p>从磁盘路径下读取xml格式的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFileSystemXmlApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileSystemXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\workspace\\advanced-spring\\src\\main\\resources\\b01.xml&quot;</span>);</span><br><span class="line">    Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    System.out.println(context.getBean(Bean2.class).getBean1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bean1</span><br><span class="line">bean2</span><br><span class="line">daidawang.advancedSpring.bean.a02.DdwangApplicationContext$Bean1@503d687a</span><br></pre></td></tr></table></figure><h3 id="XmlBeanDefinitionReader"><a href="#XmlBeanDefinitionReader" class="headerlink" title="XmlBeanDefinitionReader"></a>XmlBeanDefinitionReader</h3><p><font style="color:#DF2A3F;">ClassPathXmlApplicationContext</font> 和 <font style="color:#DF2A3F;">FileSystemXmlApplicationContext</font> 都依赖于从 XML 文件中读取 Bean 的信息，而这都利用了 <font style="color:#DF2A3F;">XmlBeanDefinitionReader</font> 进行读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testXmlBeanDefinitionReader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;读取前&quot;</span>);</span><br><span class="line">    Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    <span class="type">XmlBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">    reader.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">&quot;src\\main\\resources\\b01.xml&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;读取后&quot;</span>);</span><br><span class="line">    Arrays.stream(beanFactory.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读取之前...</span><br><span class="line">读取之后...</span><br><span class="line">bean1</span><br><span class="line">bean2</span><br></pre></td></tr></table></figure><h3 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h3><p>基于Java配置类创建bean</p><p>先创建一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">(Bean1 bean1)</span> &#123;</span><br><span class="line">           <span class="type">Bean2</span> <span class="variable">bean2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">           bean2.setBean1(bean1);</span><br><span class="line">           <span class="keyword">return</span> bean2;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAnnotationConfigApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Config.class);</span><br><span class="line">    Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">    System.out.println(context.getBean(Bean2.class).getBean1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">ddwangApplicationContext.Config</span><br><span class="line">bean1</span><br><span class="line">bean2</span><br><span class="line">daidawang.advancedSpring.bean.a02.DdwangApplicationContext$Bean1@14555e0a</span><br></pre></td></tr></table></figure><p>与基于XML创建的<font style="color:#DF2A3F;">ApplicationContext</font>相比，<font style="color:#DF2A3F;">AnnotationConfigApplicationContext</font>使得容器多了一些后置处理器相关的Bean。</p><p>如果要在先前的两种方式中也添加上这些 后置处理器Bean，可以在 XML 进行配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;bean1&quot;</span> class=<span class="string">&quot;daidawang.advancedSpring.bean.a02.DdwangApplicationContext.Bean1&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;bean2&quot;</span> class=<span class="string">&quot;daidawang.advancedSpring.bean.a02.DdwangApplicationContext.Bean2&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;bean1&quot;</span> ref=<span class="string">&quot;bean1&quot;</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--  添加后置处理器  --&gt;</span><br><span class="line">    &lt;context:annotation-config /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="AnnotationConfigServletWebServerApplicationContext"><a href="#AnnotationConfigServletWebServerApplicationContext" class="headerlink" title="AnnotationConfigServletWebServerApplicationContext"></a>AnnotationConfigServletWebServerApplicationContext</h3><p>基于Java配置类创建bean，内嵌WebServer用于Web环境的容器。</p><p>先定义配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="comment">//配置Tomcat服务器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletWebServerFactory <span class="title function_">servletWebServerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//核心控制器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册控制器DispatcherServlet 到TomCat里</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">dispatcherServletRegistrationBean</span><span class="params">(DispatcherServlet dispatcherServlet)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(dispatcherServlet, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个简单的控制器，用于处理根路径的GET请求，并返回&quot;hello&quot;消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Controller <span class="title function_">controller</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response) -&gt; &#123;</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAnnotationConfigServletWebServerApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigServletWebServerApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>(WebConfig.class);</span><br><span class="line">    Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，在浏览器中访问 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 路径则会显示出 hello 字样：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723709717063-1feedb39-071a-4322-b6b3-6e6e85cd0d38.png"></p><ul><li>内嵌的Tomcat是如何工作的（通过AnnotationConfigServletWebServerApplicationContex自动启动内嵌的 Tomcat 服务器，并将所有配置的 Bean 注册到上下文中)</li><li>web程序的入口都是通过 “&#x2F;“ 的通配符，先由DispatcherServlet处理后分发请求到控制器</li><li>一个最基础的web程序需要 Tomcat，DispatcherServlet，和将DispatcherServlet注册到Tomcat上</li></ul><h2 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h2><p><font style="color:#DF2A3F;">BeanDefinition</font> 它封装了 Bean 基本信息，Spring 根据 <font style="color:#DF2A3F;">BeanDefinition</font>  就能创建出符合要求的 Bean。</p><p>读取 <font style="color:#DF2A3F;">BeanDefinition</font> 可以通过下列两种类完成：</p><ul><li><font style="color:#DF2A3F;">BeanDefinitionReader</font></li><li><font style="color:#DF2A3F;">ClassPathBeanDefinitionScanner</font></li></ul><h3 id="BeanDefinitionReader"><a href="#BeanDefinitionReader" class="headerlink" title="BeanDefinitionReader"></a>BeanDefinitionReader</h3><p>该接口中对 <code>loadBeanDefinitions()</code> 方法进行了多种重载，支持传入一个或多个 <font style="color:#DF2A3F;">Resource</font> 对象、资源位置来加载 <font style="color:#DF2A3F;">BeanDefinition</font>。</p><p>它有一系列相关实现，比如：</p><ul><li><font style="color:#DF2A3F;">XmlBeanDefinitionReader</font>：通过读取 XML 文件来加载；</li><li><font style="color:#DF2A3F;">PropertiesBeanDefinitionReader</font>：通过读取 properties 文件来加载，此类已经被 @Deprecated 注解标记；</li></ul><p>除此之外，还有一个 <font style="color:#DF2A3F;">AnnotatedBeanDefinitionReader</font>，尽管它并不是 <font style="color:#DF2A3F;">BeanDefinition</font> 的子类，但它们俩长得很像，根据其类注释可知：它能够通过编程的方式对 Bean 进行注册，是 <font style="color:#DF2A3F;">ClassPathBeanDefinitionScanner</font> 的替代方案，能读取通过注解定义的 Bean。</p><h3 id="ClassPathBeanDefinitionScanner"><a href="#ClassPathBeanDefinitionScanner" class="headerlink" title="ClassPathBeanDefinitionScanner"></a>ClassPathBeanDefinitionScanner</h3><p>通过扫描指定包路径下的<font style="color:#DF2A3F;"> @Component </font>及其派生注解来注册 Bean，是<font style="color:#DF2A3F;"> @ComponentScan</font> 注解的底层实现。</p><h3 id="BeanDefinitionRegistry"><a href="#BeanDefinitionRegistry" class="headerlink" title="BeanDefinitionRegistry"></a>BeanDefinitionRegistry</h3><p><font style="color:#DF2A3F;">AnnotatedBeanDefinitionReader</font> 和 <font style="color:#DF2A3F;">ClassPathBeanDefinitionScanner</font> 中都有一个 <font style="color:#DF2A3F;">BeanDefinitionRegistry</font> 类型的成员变量，</p><p>它是一个接口，提供了 <font style="color:#DF2A3F;">BeanDefinition</font> 的增加、删除和查找功能。</p><h3 id="注册与获取Bean"><a href="#注册与获取Bean" class="headerlink" title="注册与获取Bean"></a>注册与获取Bean</h3><p>将 Bean 添加到 Spring 容器里的大致流程，</p><ul><li>利用 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;BeanDefinitionReader&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>读取配置文件或注解信息，为每一个 Bean 生成一个 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;BeanDefinition&lt;/font&gt;</code></li><li>将 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;BeanDefinition&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>注册到 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;BeanDefinitionRegistry&lt;/font&gt;</code><font style="color:#DF2A3F;"> </font>中</li><li>当创建 Bean 对象时，直接从 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;BeanDefinitionRegistry&lt;/font&gt;</code> 中获取 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;BeanDefinition&lt;/font&gt;</code> ,来生成 Bean。</li><li>如果生成的 Bean 是<font style="background-color:#117CEE;">单例</font>的，Spring 会将它们保存到 <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt;SingletonBeanRegistry&lt;/font&gt;</code> 中,即三级缓存的第一级缓存，后续需要时从这里面寻找，避免重复创建。</li></ul><p>那么向 Spring 容器中添加单例 Bean 时，可以跳过注册 <font style="color:#DF2A3F;">BeanDefinition</font>，直接向 <font style="color:#DF2A3F;">SingletonBeanRegistry</font> 中添加创建完成的 Bean。既然添加的是创建完成的 Bean，所以 这个<font style="background-color:#117CEE;">单例 Bean 不会经过 Spring 的生命周期</font>。</p><p><font style="color:#DF2A3F;">SingletonBeanRegistry</font> 是一个接口，它有一个子接口名为 <font style="color:#DF2A3F;">ConfigurableListableBeanFactory</font>，而这恰好是 <font style="color:#DF2A3F;">BeanFactoryPostProcessor</font> 接口中抽象方法的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 BeanFactoryPostProcesser，注册创建完成的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;bean2&quot;</span>, Bean2.class);</span><br><span class="line">        context.registerBean(MyBeanFactoryPostProcessor.class);</span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        System.out.println(context.getBean(Bean1.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">            <span class="type">Bean1</span> <span class="variable">bean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">            bean1.setName(<span class="string">&quot;mofan&quot;</span>);</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">&quot;bean1&quot;</span>, bean1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">        <span class="meta">@Setter</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;依赖注入 bean2&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.bean2 = bean2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@PostConstruct</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;初始化...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">bean2</span><br><span class="line">testBeanFactoryPostProcessor.MyBeanFactoryPostProcessor</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">TestBeanFactoryPostProcessor.Bean1(name=mofan, bean2=null)</span><br></pre></td></tr></table></figure><p><font style="color:#DF2A3F;">BeanDefinition</font> 的名称数组中不包含 bean1，也没有输出任何与经过 Spring 生命周期相关的日志信息，容器中 bean1 里注入的 bean2 也是 null。这表明通过这种方式注册的 Bean 不会注册 <font style="color:#DF2A3F;">BeanDefinition</font>，也不会经过 Spring 生命周期。</p><p>根据前面的补充，现在可以<font style="color:#bcbec4;background-color:#1e1f22;">AnnotatedBeanDefinitionReader</font>这样注册并获取 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListableBeanFactoryTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBean 类是一个空的测试 Bean 类，用于在测试中注册和检索</span></span><br><span class="line"><span class="comment">     * 它没有任何实现，仅用作测试目的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBean</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * main 方法是测试程序的入口点</span></span><br><span class="line"><span class="comment">     * 它展示了如何在 DefaultListableBeanFactory 中注册和检索 Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数，本测试未使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 DefaultListableBeanFactory 实例</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个 AnnotatedBeanDefinitionReader 实例，用于向 BeanFactory 注册 Bean</span></span><br><span class="line">        <span class="type">AnnotatedBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">        <span class="comment">// 注册 MyBean 到 BeanFactory</span></span><br><span class="line">        reader.registerBean(MyBean.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 BeanFactory 中检索 MyBean 实例</span></span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">bean</span> <span class="operator">=</span> beanFactory.getBean(MyBean.class);</span><br><span class="line">        <span class="comment">// 输出检索到的 Bean 实例</span></span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Bean生命周期"><a href="#3-Bean生命周期" class="headerlink" title="3. Bean生命周期"></a>3. Bean生命周期</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723719030387-32d5b3be-2bf9-4b96-92cd-082639939015.png"></p><ol><li>通过 Bean 后置处理器 的方式说明 Bean 生命周期：</li></ol><ul><li>@Autowired 依赖注入</li><li>@PostConstruct 初始化</li><li>@PreDestroy 销毁</li></ul><ol start="2"><li>通过 Bean 内置处理器 的方式说明 Bean 生命周期</li></ol><ul><li>InitializingBean 初始化</li><li><font style="background-color:rgba(255, 255, 255, 0);">DisposableBean 销毁</font></li></ul><ol start="3"><li><font style="background-color:rgba(255, 255, 255, 0);">配置文件中指定初始化和销毁方法 :</font></li></ol><ul><li><font style="background-color:rgba(255, 255, 255, 0);"><bean init-method="initMethod">标签。</font></li><li><font style="background-color:rgba(255, 255, 255, 0);">&lt;destroy-method&#x3D;”destroyMethod”&gt;标签。</font></li></ul><ol start="4"><li><font style="background-color:rgba(255, 255, 255, 0);">使用@Bean注解指定初始化和销毁方法：</font></li></ol><ul><li><font style="background-color:rgba(255, 255, 255, 0);">@Bean注解的initMethod属性来指定初始化</font></li><li><font style="background-color:rgba(255, 255, 255, 0);">@Bean注解的destroyMethod属性来指定销毁方法。</font></li></ul><p>自定义一个 SpringBoot 的主启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A03Application.class, args);</span><br><span class="line">        <span class="comment">// 调用 close 方法，显示单例bean生命周期的销毁阶段</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类所在路径下再定义一个类，使其能够被自动装配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleBean</span> &#123;</span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LifeCycleBean</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 依赖注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autowire</span><span class="params">(<span class="meta">@Value(&quot;$&#123;JAVA_HOME&#125;&quot;)</span> String home)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;依赖注入: &#123;&#125;&quot;</span>, home);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 销毁</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行主启动类，查看控制台的日志信息（只列举主要信息）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 构造</span><br><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 依赖注入: D:\software\work\jdk\jdk8\jdk</span><br><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 初始化</span><br><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 销毁</span><br></pre></td></tr></table></figure><p>Spring 还提供了一些对 Bean 生命周期的各个阶段进行拓展的 <font style="color:#DF2A3F;">BeanPostProcessor</font>，比如 <font style="color:#DF2A3F;">InstantiationAwareBeanPostProcessor</font> 和 <font style="color:#DF2A3F;">DestructionAwareBeanPostProcessor</font>。</p><p>实现这两个接口，并使用<font style="color:#DF2A3F;"> @Component</font> 注解标记实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">InstantiationAwareBeanPostProcessor</span> , DestructionAwareBeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;lifeCycleBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之前执行，这里返回的对象会替换掉原本的 bean&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回 null，则不会替换原有的 bean</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;lifeCycleBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之后执行，如果返回 false 会跳过依赖注入节点&quot;</span>);</span><br><span class="line">            <span class="comment">// return false;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;lifeCycleBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 依赖注入阶段执行，如 @Autowired、@Value、@Resource&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;lifeCycleBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化执行之前，这里返回的对象会替换掉原本的 bean，如 @PostConstruct、@ConfigurationProperties&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;lifeCycleBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之后执行，这里返回的对象会替换掉原本的 bean，如代理增强&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeforeDestruction</span><span class="params">(Object o, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;lifeCycleBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 销毁执行之前，如 @PreDestroy&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再运行主启动类，查看控制台的日志信息（只列举主要信息）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d.a.bean.a03.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之前执行，这里返回的对象会替换掉原本的 bean </span><br><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 构造 </span><br><span class="line">d.a.bean.a03.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之后执行，如果返回 false 会跳过依赖注入节点 </span><br><span class="line">d.a.bean.a03.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 依赖注入阶段执行，如 @Autowired、@Value、@Resource</span><br><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 依赖注入: D:\software\work\jdk\jdk8\jdk</span><br><span class="line"> d.a.bean.a03.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化执行之前，这里返回的对象会替换掉原本的 bean，如 @PostConstruct、@ConfigurationProperties</span><br><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 初始化</span><br><span class="line">d.a.bean.a03.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之后执行，这里返回的对象会替换掉原本的 bean，如代理增强</span><br><span class="line">o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path &#x27;/&#x27;</span><br><span class="line">d.a.bean.a03.A03Application              : Started A03Application in 1.474 seconds (process running for 2.081)</span><br><span class="line">d.a.bean.a03.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 销毁执行之前，如 @PreDestroy</span><br><span class="line">d.advancedSpring.bean.a03.LifeCycleBean  : 销毁</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723731620533-224b5068-dd8b-426a-8d1c-33713c69e672.png"> </p><h3 id="什么是实例化-什么是初始化？"><a href="#什么是实例化-什么是初始化？" class="headerlink" title="什么是实例化 什么是初始化？"></a>什么是实例化 什么是初始化？</h3><ul><li>实例化指调用构造方法</li><li>初始化指调用init方法</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724921277436-87f4f838-6a74-407c-8744-8c4db7752195.png"></p><h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>为什么实现了 <font style="color:#DF2A3F;">BeanPostProcessor</font> 接口后就能够在 Bean 生命周期的各个阶段进行拓展呢？</p><p>这就是模板方法设计模式。</p><p>模板方法模式定义了一个操作中的算法骨架，而将一些步骤延迟到子类中。</p><p> 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>现有如下代码，模拟 BeanFactory 构造 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethodTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBeanFactory</span> <span class="variable">myBeanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBeanFactory</span>();</span><br><span class="line">        myBeanFactory.getBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;BeanPostProcessor&gt; processors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * getBean 方法是模板方法，它定义了创建 Bean 的算法流程。</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 创建好的 Bean 对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;构造 &quot;</span> + bean);</span><br><span class="line">            System.out.println(<span class="string">&quot;依赖注入 &quot;</span> + bean);</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化 &quot;</span> + bean);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造 java.lang.Object@49097b5d</span><br><span class="line">依赖注入 java.lang.Object@49097b5d</span><br><span class="line">初始化 java.lang.Object@49097b5d</span><br></pre></td></tr></table></figure><p>现在需要在依赖注入后新增 解析功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: 模板方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 演示了模板方法设计模式的一个简单实现。</span></span><br><span class="line"><span class="comment"> *  * 模板方法模式定义了一个操作中的算法骨架，</span></span><br><span class="line"><span class="comment"> *  * 而将一些步骤延迟到子类中。</span></span><br><span class="line"><span class="comment"> *  * 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethodTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyBeanFactory</span> <span class="variable">myBeanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBeanFactory</span>();</span><br><span class="line">        myBeanFactory.addProcessor(bean -&gt; System.out.println(<span class="string">&quot;解析 @Autowired&quot;</span>));</span><br><span class="line">        myBeanFactory.addProcessor(bean -&gt; System.out.println(<span class="string">&quot;解析 @Resource&quot;</span>));</span><br><span class="line">        myBeanFactory.getBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBeanFactory 类作为模板方法模式中的抽象类角色，</span></span><br><span class="line"><span class="comment">     * 定义了创建 Bean 的算法骨架，并允许子类提供具体的实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;BeanPostProcessor&gt; processors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * getBean 方法是模板方法，它定义了创建 Bean 的算法流程。</span></span><br><span class="line"><span class="comment">         * 具体的处理逻辑（如依赖注入）被委托给 BeanPostProcessor 接口的实现。</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 创建好的 Bean 对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;构造 &quot;</span> + bean);</span><br><span class="line">            System.out.println(<span class="string">&quot;依赖注入 &quot;</span> + bean);</span><br><span class="line">            <span class="keyword">for</span> (BeanPostProcessor processor : processors) &#123;</span><br><span class="line">                processor.inject(bean);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化 &quot;</span> + bean);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * addProcessor 方法允许向工厂中添加自定义的 BeanPostProcessor 实现。</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> beanPostProcessor 需要添加的处理器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addProcessor</span><span class="params">(BeanPostProcessor beanPostProcessor)</span> &#123;</span><br><span class="line">            processors.add(beanPostProcessor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BeanPostProcessor 接口定义了 Bean 处理器的行为，</span></span><br><span class="line"><span class="comment">     * 其中的 inject 方法由具体的实现类来完成。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(Object bean)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造 java.lang.Object@5fd0d5ae</span><br><span class="line">依赖注入 java.lang.Object@5fd0d5ae</span><br><span class="line">解析 @Autowired</span><br><span class="line">初始化 java.lang.Object@5fd0d5a</span><br></pre></td></tr></table></figure><h1 id="4-Bean后置处理器"><a href="#4-Bean后置处理器" class="headerlink" title="4. Bean后置处理器"></a>4. Bean后置处理器</h1><p>编写如下三个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Bean1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean2</span><span class="params">(Bean2 bean2)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;@Autowired 生效: &#123;&#125;&quot;</span>, bean2);</span><br><span class="line">        <span class="built_in">this</span>.bean2 = bean2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bean3 bean3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBean3</span><span class="params">(Bean3 bean3)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;@Resource 生效: &#123;&#125;&quot;</span>, bean3);</span><br><span class="line">        <span class="built_in">this</span>.bean3 = bean3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String home;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Autowired</span>写在方法上，参数类型是UserService，那么Spring容器会自动注入UserService对象</span></span><br><span class="line"><span class="comment">     * 参数是字符串类型 会注入失败，需要配合<span class="doctag">@Value</span>注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span>(&quot;$&#123;JAVA_HOME&#125;&quot;) 注解用于从配置文件中读取JAVA_HOME属性的 值注入 到home变量中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHome</span><span class="params">(<span class="meta">@Value(&quot;$&#123;JAVA_HOME&#125;&quot;)</span> String home)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;@Value 生效: &#123;&#125;&quot;</span>, home);</span><br><span class="line">        <span class="built_in">this</span>.home = home;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;@PostConstruct 生效&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;@PreDestroy 生效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#DF2A3F;">Bean2</font> 和 <font style="color:#DF2A3F;">Bean3</font> 很简单，而在 <font style="color:#DF2A3F;">Bean1</font> 中使用了多个注解以实现 Bean 注入和值注入。</p><h2 id="GenericApplicationContext容器"><a href="#GenericApplicationContext容器" class="headerlink" title="GenericApplicationContext容器"></a>GenericApplicationContext容器</h2><p><font style="color:#DF2A3F;">GenericApplicationContext</font> 是一个干净的容器，而且<font style="color:#DF2A3F;">GenericApplicationContext</font>有<font style="color:#DF2A3F;">refresh()</font>方法初始化容器。</p><ul><li><p>而<font style="color:#DF2A3F;">DefaultListableBeanFactory</font>需要手动添加Bean处理器和BeanFactory处理器。</p></li><li><p>而<font style="color:#DF2A3F;">AnnotationConfigApplicationContext</font>已经有Bean处理器，无法测试处理器具体作用。</p><p>​</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * GenericApplicationContext 是一个干净的容器，</span></span><br><span class="line"><span class="comment">         * 而且GenericApplicationContext有refresh方法初始化容器。</span></span><br><span class="line"><span class="comment">         * 而DefaultListableBeanFactory需要手动添加Bean处理器和BeanFactory处理器。</span></span><br><span class="line"><span class="comment">         * 而AnnotationConfigApplicationContext已经有Bean处理器，无法测试处理器具体作用。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 用原始方式注册三个 bean</span></span><br><span class="line">        context.registerBean(<span class="string">&quot;bean1&quot;</span>, Bean1.class);</span><br><span class="line">        context.registerBean(<span class="string">&quot;bean2&quot;</span>, Bean2.class);</span><br><span class="line">        context.registerBean(<span class="string">&quot;bean3&quot;</span>, Bean3.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化容器。执行 beanFactory 后置处理器，添加 bean 后置处理器，初始化所有单例</span></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 销毁容器</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述方法后，控制台中只打印了与 Spring 相关的日志信息，也就是说 <font style="color:#DF2A3F;">Bean1</font> 中使用的注解并没有生效。</p><h2 id="Autowired-Value后置处理器"><a href="#Autowired-Value后置处理器" class="headerlink" title="@Autowired@Value后置处理器"></a>@Autowired@Value后置处理器</h2><p>向 <font style="color:#DF2A3F;">GenericApplicationContext</font> 添加一些与 Bean 后置处理器相关的 Bean，使得 <font style="color:#DF2A3F;">Bean1</font> 中使用的注解能够生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    context.registerBean(<span class="string">&quot;bean3&quot;</span>, Bean3.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析值注入内容 </span></span><br><span class="line">    <span class="comment">// 不写出现如下错误</span></span><br><span class="line">    <span class="comment">// No qualifying bean of type &#x27;java.lang.String&#x27; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Value(&quot;$&#123;JAVA_HOME&#125;&quot;)&#125;</span></span><br><span class="line">    <span class="comment">//这里的ContextAnnotationAutowireCandidateResolver引出第四十六讲 https://www.yuque.com/daidawang-jlmiu/tyvtug/hu3f16agn841fm9h</span></span><br><span class="line">    context.getDefaultListableBeanFactory().setAutowireCandidateResolver(<span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>());</span><br><span class="line">    <span class="comment">//注册解析@Autowired @Value的处理器</span></span><br><span class="line">    context.registerBean(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Autowired 生效: daidawang.advancedSpring.bean.a04.Bean2@4386f16</span><br><span class="line">INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Value 生效: D:\software\work\jdk\jdk8\jdk</span><br></pre></td></tr></table></figure><h2 id="Resource-PostConstruct-PreDestroy处理器"><a href="#Resource-PostConstruct-PreDestroy处理器" class="headerlink" title="@Resource@PostConstruct@PreDestroy处理器"></a>@Resource@PostConstruct@PreDestroy处理器</h2><p><font style="color:#DF2A3F;">@Autowired</font> 和 <font style="color:#DF2A3F;">@Value</font> 注解成功生效，但<font style="color:#DF2A3F;"> @Resource</font>、<font style="color:#DF2A3F;">@PostConstruct</font> 和<font style="color:#DF2A3F;"> @PreDestroy</font> 依旧没有生效，因此还需要添加解析它们的 Bean 后置处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册解析@Resource @PostConstruct @PreDestroy的处理器</span></span><br><span class="line">    context.registerBean(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Resource 生效: daidawang.advancedSpring.bean.a04.Bean3@1b1473ab</span><br><span class="line">INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Autowired 生效: daidawang.advancedSpring.bean.a04.Bean2@3e92efc3</span><br><span class="line">INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Value 生效: D:\software\work\jdk\jdk8\jdk</span><br><span class="line">INFO daidawang.advancedSpring.bean.a04.Bean1 -- @PostConstruct 生效: D:\software\work\jdk\jdk8\jdk</span><br><span class="line">INFO daidawang.advancedSpring.bean.a04.Bean1 -- @PreDestroy 生效: D:\software\work\jdk\jdk8\jdk</span><br></pre></td></tr></table></figure><p>看到上面控制台打印的朋友还能回答为什么<font style="color:#DF2A3F;"> @Resource</font> 比  <font style="color:#DF2A3F;">@Autowired</font> 先执行吗？ <font style="color:rgb(230, 237, 243);">😏</font></p><h2 id="ConfigurationProperties后置处理器"><a href="#ConfigurationProperties后置处理器" class="headerlink" title="@ConfigurationProperties后置处理器"></a>@ConfigurationProperties后置处理器</h2><p>编写带有<font style="color:#DF2A3F;">@ConfigurationProperties</font> 的Bean4，获取环境变量中<font style="color:#DF2A3F;"> java.home</font> 和<font style="color:#DF2A3F;"> java.version </font>的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;java&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String home;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对先前的 main() 方法进行补充：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    </span><br><span class="line">    context.registerBean(<span class="string">&quot;bean4&quot;</span>, Bean4.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    System.out.println(context.getBean(Bean4.class));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean4(home=null, version=null)</span><br></pre></td></tr></table></figure><p>说明 <font style="color:#DF2A3F;">Bean4</font> 成功添加到容器中，但值注入失败了，显然也是因为缺少解析 <font style="color:#DF2A3F;">@ConfigurationProperties</font> 注解的后置处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    </span><br><span class="line">    context.registerBean(<span class="string">&quot;bean4&quot;</span>, Bean4.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">//注册解析@ConfigurationProperties的处理器</span></span><br><span class="line">    ConfigurationPropertiesBindingPostProcessor.register(context.getDefaultListableBeanFactory());</span><br><span class="line"></span><br><span class="line">    System.out.println(context.getBean(Bean4.class));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bean4(home=D:\software\work\jdk\jdk17, version=17.0.9)</span><br></pre></td></tr></table></figure><h2 id="后置处理器执行时机"><a href="#后置处理器执行时机" class="headerlink" title="后置处理器执行时机"></a>后置处理器执行时机</h2><p>在Bean的生命周期 里 @Autowired@Value的处理器 或者 @Resource@PostConstruct@PreDestroy处理器 @ConfigurationProperties的处理器 是什么时候执行的呢？</p><p>视频P17 的最后 <a href="https://www.bilibili.com/video/BV1P44y1N7QG/?p=17&vd_source=a135b499e23dccf1ea18573ee3223d8a">016-第四讲-常见bean后处理器3_哔哩哔哩_bilibili</a>  老师简单的提了一下但是没有写代码证明。</p><p>那么我们用已经学习到的知识去验证一下把！</p><p>如何不看下面的代码你通过 前面16讲的课程也可以独立写出来吗? 自己写写证明这些后置处理器的执行时机再来和我对一下把（我的也是自己写的不一定对）</p><ol><li>将bean1加入容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Bean1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Bean2 bean2;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建 <font style="background-color:rgba(255, 255, 255, 0);">MyBeanPostProcessor 并实现 InstantiationAwareBeanPostProcessor , DestructionAwareBeanPostProcessor</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">InstantiationAwareBeanPostProcessor</span>, DestructionAwareBeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bean1&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之前执行，这里返回的对象会替换掉原本的 bean&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回 null，则不会替换原有的 bean</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bean1&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之后执行，如果返回 false 会跳过依赖注入节点&quot;</span>);</span><br><span class="line">            <span class="comment">// return false;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bean1&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 依赖注入阶段执行，如 @Autowired、@Value、@Resource&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bean1&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化执行之前，这里返回的对象会替换掉原本的 bean，如 @PostConstruct、@ConfigurationProperties&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bean1&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之后执行，这里返回的对象会替换掉原本的 bean，如代理增强&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeforeDestruction</span><span class="params">(Object o, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bean1&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 销毁执行之前，如 @PreDestroy&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><font style="background-color:rgba(255, 255, 255, 0);">A04Application 上添加@SpringBootApplication </font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A04Application</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04Application</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context1</span> <span class="operator">=</span> SpringApplication.run(A04Application.class, args);</span><br><span class="line"></span><br><span class="line">        context1.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2024-08-16T14:24:15.290+08:00  INFO 3052 --- [advanced-spring] [           main] d.a.bean.a04.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之前执行，这里返回的对象会替换掉原本的 bean</span><br><span class="line">2024-08-16T14:24:15.292+08:00  INFO 3052 --- [advanced-spring] [           main] d.a.bean.a04.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 实例化之后执行，如果返回 false 会跳过依赖注入节点</span><br><span class="line">2024-08-16T14:24:15.293+08:00  INFO 3052 --- [advanced-spring] [           main] d.a.bean.a04.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 依赖注入阶段执行，如 @Autowired、@Value、@Resource</span><br><span class="line">2024-08-16T14:24:15.293+08:00  INFO 3052 --- [advanced-spring] [           main] d.advancedSpring.bean.a04.Bean1          : @Resource 生效: daidawang.advancedSpring.bean.a04.Bean3@3a082ff4</span><br><span class="line">2024-08-16T14:24:15.296+08:00  INFO 3052 --- [advanced-spring] [           main] d.advancedSpring.bean.a04.Bean1          : @Autowired 生效: daidawang.advancedSpring.bean.a04.Bean2@237f7970</span><br><span class="line">2024-08-16T14:24:15.297+08:00  INFO 3052 --- [advanced-spring] [           main] d.advancedSpring.bean.a04.Bean1          : @Value 生效: D:\software\work\jdk\jdk8\jdk</span><br><span class="line">2024-08-16T14:24:15.298+08:00  INFO 3052 --- [advanced-spring] [           main] d.a.bean.a04.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化执行之前，这里返回的对象会替换掉原本的 bean，如 @PostConstruct、@ConfigurationProperties</span><br><span class="line">2024-08-16T14:24:15.298+08:00  INFO 3052 --- [advanced-spring] [           main] d.advancedSpring.bean.a04.Bean1          : @PostConstruct 生效: D:\software\work\jdk\jdk8\jdk</span><br><span class="line">2024-08-16T14:24:15.298+08:00  INFO 3052 --- [advanced-spring] [           main] d.a.bean.a04.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 初始化之后执行，这里返回的对象会替换掉原本的 bean，如代理增强</span><br><span class="line">2024-08-16T14:24:15.822+08:00  INFO 3052 --- [advanced-spring] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path &#x27;/&#x27;</span><br><span class="line">2024-08-16T14:24:15.830+08:00  INFO 3052 --- [advanced-spring] [           main] d.a.bean.a04.A04Application              : Started A04Application in 2.076 seconds (process running for 3.592)</span><br><span class="line">2024-08-16T14:24:15.935+08:00  INFO 3052 --- [advanced-spring] [           main] d.a.bean.a04.MyBeanPostProcessor         : &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 销毁执行之前，如 @PreDestroy</span><br><span class="line">2024-08-16T14:24:15.935+08:00  INFO 3052 --- [advanced-spring] [           main] d.advancedSpring.bean.a04.Bean1          : @PreDestroy 生效: D:\software\work\jdk\jdk8\jdk</span><br></pre></td></tr></table></figure><h2 id="AutowiredAnnotationBeanPostProcessor"><a href="#AutowiredAnnotationBeanPostProcessor" class="headerlink" title="AutowiredAnnotationBeanPostProcessor"></a>AutowiredAnnotationBeanPost<font style="background-color:rgba(255, 255, 255, 0);">Processor</font></h2><p>通过上面的代码，知道 <font style="color:#DF2A3F;">AutowiredAnnotationBeanPost</font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">Processor</font><font style="background-color:rgba(255, 255, 255, 0);"> 是处理解析 </font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">@Autowired @Value，</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">那么他的如何运行的呢？</font></p><p><font style="background-color:rgba(255, 255, 255, 0);"></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutowiredAnnotationBeanPostProcessor</span>运行原理 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">        <span class="comment">//相比于使用BeanDefinitionBuilder创建BeanDefinition对象，</span></span><br><span class="line">        <span class="comment">//直接将成品bean2，bean3注册到容器中，</span></span><br><span class="line">        <span class="comment">//不会走创建bean的过程、依赖注入、初始化等操作</span></span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;bean2&quot;</span>,<span class="keyword">new</span> <span class="title class_">Bean2</span>());</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;bean3&quot;</span>,<span class="keyword">new</span> <span class="title class_">Bean3</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析@Value,ContextAnnotationAutowireCandidateResolver引入46讲@Value注入底层</span></span><br><span class="line">        beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">AutowiredAnnotationBeanPostProcessor</span> <span class="variable">postProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutowiredAnnotationBeanPostProcessor</span>();</span><br><span class="line">        <span class="comment">//为了自动装配带有 @Autowired 的字段需要知道容器信息，所以需要设置</span></span><br><span class="line">        postProcessor.setBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">Bean1</span> <span class="variable">bean1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">        System.out.println(bean1);</span><br><span class="line"><span class="comment">//        // 执行依赖注入，@Autowired、@Value</span></span><br><span class="line">        postProcessor.postProcessProperties(<span class="literal">null</span>,bean1,<span class="string">&quot;bean1&quot;</span>);</span><br><span class="line">        System.out.println(bean1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bean1(bean2=null, bean3=null, home=null)</span><br><span class="line">15:41:49.646 [main] INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Autowired 生效: daidawang.advancedSpring.bean.a04.Bean2@3c0a50da</span><br><span class="line">15:41:49.659 [main] INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Value 生效: $&#123;JAVA_HOME&#125;</span><br><span class="line">Bean1(bean2=daidawang.advancedSpring.bean.a04.Bean2@3c0a50da, bean3=null, home=$&#123;JAVA_HOME&#125;)</span><br></pre></td></tr></table></figure><p>发现调用<font style="color:#DF2A3F;"> AutowiredAnnotationBeanPostProcessor#postProcessProperties()</font>方法时，</p><p>Bean1 中的 bean2、成功且正常的被注入，</p><p>进入源码，我们发现<font style="color:#DF2A3F;"> findAutowiringMetadata()</font>，用于查找指定 bean对象哪些地方使用了 <font style="color:#DF2A3F;"> @Autowired、@Value </font>等与注入相关的注解，并将这些信息封装在 <font style="color:#DF2A3F;">InjectionMetadata</font> 对象中，之后调用其 <font style="color:#DF2A3F;">inject()</font> 方法利用反射完成注入。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723794597475-32de0b4b-5546-4e4e-9499-bc3ca2b80ea6.png"></p><h3 id="查找带有-Autowired的方法"><a href="#查找带有-Autowired的方法" class="headerlink" title="查找带有@Autowired的方法"></a>查找带有@Autowired的方法</h3><p>findAutowiringMetadata() 方法是一个私有方法，尝试利用反射进行调用并进行断点查看 InjectionMetadata 对象中的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AutowiredAnnotationBeanPostProcessor</span> <span class="variable">postProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutowiredAnnotationBeanPostProcessor</span>();</span><br><span class="line">    postProcessor.setBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="type">Bean1</span> <span class="variable">bean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line"><span class="comment">//        // 执行依赖注入，@Autowired、@Value</span></span><br><span class="line"><span class="comment">//        postProcessor.postProcessProperties(null, bean, &quot;bean1&quot;);</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> AutowiredAnnotationBeanPostProcessor.class.getDeclaredMethod(<span class="string">&quot;findAutowiringMetadata&quot;</span>, String.class, Class.class, PropertyValues.class);</span><br><span class="line">    method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 获取 Bean1 上加了 @Value、@Autowired 注解的成员变量、方法参数信息</span></span><br><span class="line">    <span class="type">InjectionMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> (InjectionMetadata) method.invoke(postProcessor, <span class="string">&quot;bean1&quot;</span>, Bean1.class, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 此处断点</span></span><br><span class="line">    System.out.println(bean1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723794811119-14f7f59f-afc0-4dc0-8148-f01c33469725.png"></p><p><font style="color:#DF2A3F;">InjectionMetadata</font> 中有一个名为 <font style="color:#DF2A3F;">injectedElements</font> 的集合类型成员变量，根据上图所示，<font style="color:#DF2A3F;">injectedElements</font> 存储了被相关注解标记的成员变量、方法的信息，因为 Bean1 中的 bean3 成员变量、setBean2() 和 setHome() 方法恰好被<font style="color:#DF2A3F;"> @Autowired </font>注解标记。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723794906605-ce1aca1e-5c5d-4415-8f7d-7d7b10364cb2.png"></p><h3 id="反射依赖注入"><a href="#反射依赖注入" class="headerlink" title="反射依赖注入"></a>反射依赖注入</h3><p>然后按照源码一样，调用 <font style="color:#DF2A3F;">InjectionMetadata#inject()</font> 方法进行依赖注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 Bean1 上加了 @Value、@Autowired 注解的成员变量、方法参数信息</span></span><br><span class="line">    <span class="type">InjectionMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> (InjectionMetadata) method.invoke(postProcessor, <span class="string">&quot;bean1&quot;</span>, Bean1.class, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 InjectionMetadata 来进行依赖注入，注入时按类型查找值</span></span><br><span class="line">    metadata.inject(bean1, <span class="string">&quot;bean1&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(bean1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bean1(bean2=null, bean3=null, home=null)</span><br><span class="line">15:52:37.841 [main] INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Autowired 生效: daidawang.advancedSpring.bean.a04.Bean2@5a4aa2f2</span><br><span class="line">15:52:37.853 [main] INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Value 生效: $&#123;JAVA_HOME&#125;</span><br><span class="line">Bean1(bean2=daidawang.advancedSpring.bean.a04.Bean2@5a4aa2f2, bean3=null, home=$&#123;JAVA_HOME&#125;)</span><br><span class="line">org.springframework.beans.factory.annotation.InjectionMetadata@4de5031f</span><br></pre></td></tr></table></figure><p> <font style="color:#DF2A3F;">InjectionMetadata#inject()</font> 是如何 根据不同的类型 都注入的呢</p><p>修改</p><p>Bean1，给private Bean3 bean3；上添加@Autowired 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bean3 bean3;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如何按类型查找值</span></span><br><span class="line">    <span class="comment">//成员变量bean3</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">bean3</span> <span class="operator">=</span> Bean1.class.getDeclaredField(<span class="string">&quot;bean3&quot;</span>);</span><br><span class="line">    <span class="comment">//封装成DependencyDescriptor对象</span></span><br><span class="line">    <span class="type">DependencyDescriptor</span> <span class="variable">dd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(bean3, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//去容器里找需要被注入的值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> beanFactory.doResolveDependency(dd1, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(o1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法信息</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">setBean2</span> <span class="operator">=</span> Bean1.class.getDeclaredMethod(<span class="string">&quot;setBean2&quot;</span>, Bean2.class);</span><br><span class="line">    <span class="comment">// MethodParameter 构造方法的第二个参数表示需要解析的方法中参数的索引</span></span><br><span class="line">    <span class="type">DependencyDescriptor</span> <span class="variable">dd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(<span class="keyword">new</span> <span class="title class_">MethodParameter</span>(setBean2, <span class="number">0</span>), <span class="literal">false</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> beanFactory.doResolveDependency(dd2, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(o2);</span><br><span class="line"></span><br><span class="line">    <span class="type">Method</span> <span class="variable">setHome</span> <span class="operator">=</span> Bean1.class.getDeclaredMethod(<span class="string">&quot;setHome&quot;</span>, String.class);</span><br><span class="line">    <span class="type">DependencyDescriptor</span> <span class="variable">dd3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(<span class="keyword">new</span> <span class="title class_">MethodParameter</span>(setHome, <span class="number">0</span>), <span class="literal">true</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o3</span> <span class="operator">=</span> beanFactory.doResolveDependency(dd3, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(o3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内嵌值后置处理器"><a href="#内嵌值后置处理器" class="headerlink" title="${}内嵌值后置处理器"></a>${}内嵌值后置处理器</h3><p>上面的控制台打印，我们发现 home&#x3D;${JAVA_HOME})，</p><p>还缺少${} 的后置处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析$&#123;&#125;的后置处理器</span></span><br><span class="line">    beanFactory.addEmbeddedValueResolver(<span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>()::resolvePlaceholders);</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bean1(bean2=null, bean3=null, home=null)</span><br><span class="line">Bean1(bean2=null, bean3=null, home=null)</span><br><span class="line">16:11:57.283 [main] INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Autowired 生效: daidawang.advancedSpring.bean.a04.Bean2@5ea434c8</span><br><span class="line">16:11:57.306 [main] INFO daidawang.advancedSpring.bean.a04.Bean1 -- @Value 生效: D:\software\work\jdk\jdk8\jdk</span><br><span class="line">Bean1(bean2=daidawang.advancedSpring.bean.a04.Bean2@5ea434c8, bean3=null, home=D:\software\work\jdk\jdk8\jdk)</span><br></pre></td></tr></table></figure><p>添加${} 的后置处理器后 home正常解析。</p><h1 id="5-BeanFactory后置处理器"><a href="#5-BeanFactory后置处理器" class="headerlink" title="5. BeanFactory后置处理器"></a>5. BeanFactory后置处理器</h1><p>BeanFactory后置处理器为BeanFactory提供扩展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/advanced_spring&quot;</span>);</span><br><span class="line">        dataSource.setName(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean1</span><span class="params">()</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;我被 Spring 管理啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我被 Spring 管理啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续使用 GenericApplicationContext 作为容器，向容器中注册 config：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(<span class="string">&quot;config&quot;</span>, Config.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config</span><br></pre></td></tr></table></figure><p>并没有打印出除 <font style="color:#DF2A3F;">config</font> 以外的 Bean 信息，也就是说 <font style="color:#DF2A3F;">Config</font> 类中的 <font style="color:#DF2A3F;">@ComponentScan</font> 和<font style="color:#DF2A3F;"> @Bean</font> 注解都没有生效。</p><p>根据经验，显然是因为缺少某个后置处理器,引出下文: </p><h2 id="ConfigurationClassPostProcessor"><a href="#ConfigurationClassPostProcessor" class="headerlink" title="ConfigurationClassPostProcessor"></a>ConfigurationClassPostProcessor</h2><p>ConfigurationClassPostProcessor 后置处理器： <font style="color:#DF2A3F;">@ComponentScan @Bean @Import @ImportResource</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(<span class="string">&quot;config&quot;</span>, Config.class);</span><br><span class="line">    <span class="comment">// @ComponentScan @Bean @Import @ImportResource</span></span><br><span class="line">    context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">14:28:46.521 [main] INFO daidawang.advancedSpring.bean.a05.component.Bean2 -- 我被 Spring 管理啦</span><br><span class="line">14:28:46.525 [main] INFO daidawang.advancedSpring.bean.a05.Bean1 -- 我被 Spring 管理啦</span><br><span class="line">14:28:46.660 [main] INFO com.alibaba.druid.pool.DruidDataSource -- &#123;dataSource-1,root&#125; inited</span><br><span class="line">config</span><br><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor</span><br><span class="line">bean2</span><br><span class="line">bean1</span><br><span class="line">sqlSessionFactoryBean</span><br><span class="line">dataSource</span><br><span class="line">14:28:46.716 [main] INFO com.alibaba.druid.pool.DruidDataSource -- &#123;dataSource-1&#125; closing ...</span><br><span class="line">14:28:46.717 [main] INFO com.alibaba.druid.pool.DruidDataSource -- &#123;dataSource-1&#125; closed</span><br></pre></td></tr></table></figure><h2 id="MapperScannerConfigurer"><a href="#MapperScannerConfigurer" class="headerlink" title="MapperScannerConfigurer"></a>MapperScannerConfigurer</h2><p>在使用 <font style="color:#DF2A3F;">MyBatis</font> 时，经常会使用到 <font style="color:#DF2A3F;">@Mapper</font> 注解，而这个注解的解析也需要使用到特定的 BeanFactory 后置处理器。</p><p>以下两个接口被<font style="color:#DF2A3F;"> @Mapper </font>注解标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mapper1</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mapper2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后添加解析 @Mapper 注解的后置处理器 MapperScannerConfigurer ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.GenericApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A05Application</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A05Application</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一个干净容器</span></span><br><span class="line">        <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">        context.registerBean(<span class="string">&quot;config&quot;</span>,Config.class);</span><br><span class="line">        <span class="comment">//@ComponentScan @Bean @Import @ImportResource</span></span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="comment">//@MapperScanner</span></span><br><span class="line">        context.registerBean(MapperScannerConfigurer.class</span><br><span class="line">                <span class="comment">// 设置扫描的基础包，以找到所有的Mapper接口</span></span><br><span class="line">            ,bd-&gt;&#123;bd.getPropertyValues().add(<span class="string">&quot;basePackage&quot;</span>,<span class="string">&quot;daidawang.advancedSpring.bean.a05.mapper&quot;</span>);&#125;);</span><br><span class="line"></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapper1</span><br><span class="line">mapper2</span><br></pre></td></tr></table></figure><p>添加了<font style="color:#DF2A3F;">MapperScannerConfigurer</font> 后置处理器后，mapper1 和mapper2 被注册到容器里</p><h2 id="模拟实现"><a href="#模拟实现" class="headerlink" title="模拟实现"></a>模拟实现</h2><h3 id="模拟实现-ComponentScan-组件扫描"><a href="#模拟实现-ComponentScan-组件扫描" class="headerlink" title="模拟实现@ComponentScan 组件扫描"></a>模拟实现@ComponentScan 组件扫描</h3><p>模拟 beanFactory 后置处理器 <font style="color:#DF2A3F;">ConfigurationClassPostProcessor </font> ，是如何通过<font style="color:#DF2A3F;">@ComponentScan</font> 注解 将带有 @Component 及其派生注解 的类 注册到容器。</p><p>在bean2目录下创建bean3，bean4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean3</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我被 Spring 管理啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bean4</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我被 Spring 管理啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写 <font style="color:#DF2A3F;">ComponentScanPostProcessor</font> 用于实现 <font style="color:#DF2A3F;">@Component</font> 注解的解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.AbstractBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationBeanNameGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.CachingMetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ComponentScanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义的ComponentScan 后置处理器, </span></span><br><span class="line"><span class="comment"> *                  用于在Spring应用上下文中自动注册被<span class="doctag">@Component</span>注解标记的类为Bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComponentScanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">ComponentScan</span> <span class="variable">componentScan</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(Config.class, ComponentScan.class);</span><br><span class="line">        <span class="comment">// 创建一个缓存元数据读取器工厂，用于读取类元数据</span></span><br><span class="line">        <span class="type">CachingMetadataReaderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>();</span><br><span class="line">        <span class="comment">// 创建一个命名策略生成器，用于生成Bean的名称</span></span><br><span class="line">        <span class="type">AnnotationBeanNameGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationBeanNameGenerator</span>();</span><br><span class="line">        <span class="keyword">if</span> (componentScan != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String packageName : componentScan.basePackages()) &#123;</span><br><span class="line">                System.out.println(packageName);</span><br><span class="line">                <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;classpath*:&quot;</span> + packageName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/*.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (Resource resource : <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(path)) &#123;</span><br><span class="line">                    <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> factory.getMetadataReader(resource);</span><br><span class="line">                    <span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> reader.getAnnotationMetadata();</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;类名&quot;+reader.getClassMetadata().getClassName());</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;是否加了@Component &quot;+ reader.getAnnotationMetadata().hasAnnotation(Component.class.getName()));</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;是否加了@Component的派生注解 &quot;+ reader.getAnnotationMetadata().hasMetaAnnotation(Component.class.getName()));</span></span><br><span class="line">                    <span class="keyword">if</span> (annotationMetadata.hasAnnotation(Component.class.getName())</span><br><span class="line">                            || annotationMetadata.hasMetaAnnotation(Component.class.getName())) &#123;</span><br><span class="line">                        <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(</span><br><span class="line">                                                                    reader.getClassMetadata().getClassName())</span><br><span class="line">                                                                .getBeanDefinition();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (configurableListableBeanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory beanFactory) &#123;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(beanDefinition, beanFactory);</span><br><span class="line">                            beanFactory.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(<span class="string">&quot;config&quot;</span>, Config.class);</span><br><span class="line">    context.registerBean(ComponentScanPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String name : context.getBeanDefinitionNames()) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">daidawang.advancedSpring.bean.a05.component</span><br><span class="line">16:48:18.613 [main] INFO daidawang.advancedSpring.bean.a05.component.Bean2 -- 我被 Spring 管理啦</span><br><span class="line">16:48:18.615 [main] INFO daidawang.advancedSpring.bean.a05.component.Bean3 -- 我被 Spring 管理啦</span><br><span class="line">config</span><br><span class="line">daidawang.advancedSpring.bean.a05.ComponentScanPostProcessor</span><br><span class="line">bean2</span><br><span class="line">bean3</span><br></pre></td></tr></table></figure><p>总结 </p><ol><li>实现 <font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">BeanFactoryPostProcessor</font><font style="background-color:rgba(255, 255, 255, 0);">，并重写其方法</font></li><li><font style="background-color:rgba(255, 255, 255, 0);">获取</font><font style="color:#DF2A3F;">@ComponentScan </font>的值，并将值转为类路径</li><li>根据类路径获取路径下所有的<font style="color:#DF2A3F;">Resource</font>对象</li><li>根据<font style="color:#DF2A3F;">Resource</font>对象获取<font style="color:#DF2A3F;">MetadataReader</font>对象进而获取<font style="color:#DF2A3F;">AnnotationMetadata</font>对象</li><li><font style="color:#DF2A3F;">AnnotationMetadata</font> 判断 是否带有 <font style="color:#DF2A3F;">@Component </font>或 <font style="color:#DF2A3F;">其派生注解</font> 的类</li><li>通过<font style="color:#DF2A3F;">MetadataReader</font>获取带有<font style="color:#DF2A3F;">@Component</font> 或 <font style="color:#DF2A3F;">其派生注解</font> 的类 的类路径 创建 <font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">BeanDefinition</font><font style="background-color:rgba(255, 255, 255, 0);">对象</font></li><li><font style="background-color:rgba(255, 255, 255, 0);">通过</font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">AnnotationBeanNameGenerator</font><font style="background-color:rgba(255, 255, 255, 0);"> 创建</font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">BeanName</font></li><li><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">DefaultListableBeanFactory</font><font style="background-color:rgba(255, 255, 255, 0);"> 注册</font><font style="color:#bcbec4;background-color:rgba(255, 255, 255, 0);"> </font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">BeanDefinition</font><font style="background-color:rgba(255, 255, 255, 0);"> 到容器</font></li></ol><h3 id="模拟实现注入-Bean"><a href="#模拟实现注入-Bean" class="headerlink" title="模拟实现注入@Bean"></a>模拟实现注入@Bean</h3><p>Config 类中再增加一个方法作为干扰项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;daidawang.advancedSpring.bean.a05.component&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">bean2</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自行编写一个 BeanFactoryPostProcessor 的实现类用于解析 @Bean 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.AbstractBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.MethodMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.CachingMetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DDWBeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DDWBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">CachingMetadataReaderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>();</span><br><span class="line">        <span class="comment">//读取资源元数据创建一个CachingMetadataReaderFactory实例</span></span><br><span class="line">        <span class="comment">//通过CachingMetadataReaderFactory读取资源比 反射 快</span></span><br><span class="line">        <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> factory.getMetadataReader(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;daidawang/advancedSpring/bean/a05/Config.class&quot;</span>));</span><br><span class="line">        <span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> reader.getAnnotationMetadata();</span><br><span class="line">        <span class="keyword">for</span> (MethodMetadata annotatedMethod : annotationMetadata.getAnnotatedMethods(Bean.class.getName())) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(annotatedMethod.getMethodName());</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">BeanDefinitionBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">            builder.setFactoryMethodOnBean(annotatedMethod.getMethodName(), <span class="string">&quot;config&quot;</span>);</span><br><span class="line">            <span class="comment">// 工厂方法、构造方法的注入模式使用构造器模式</span></span><br><span class="line">            builder.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">initMethod</span> <span class="operator">=</span> (String) annotatedMethod.getAnnotationAttributes(Bean.class.getName()).get(<span class="string">&quot;init&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(initMethod)) &#123;</span><br><span class="line">                builder.setInitMethodName(initMethod);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> builder.getBeanDefinition();</span><br><span class="line">            registry.registerBeanDefinition(annotatedMethod.getMethodName(), beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在构造 <font style="color:#DF2A3F;">BeanDefinition</font> 时调用了 <font style="color:#DF2A3F;">setAutowireMode()</font> 方法设置注入模式，这是因为在自定义的 <font style="color:#DF2A3F;">Config</font> 类中有一特殊的被 <font style="color:#DF2A3F;">@Bean</font> 标记的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收一个 DataSource 类型的参数，需要将容器中这个类型的 Bean 进行注入，设置的 <font style="color:#DF2A3F;">AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR</font> 注入模式则能完成这个功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">18:10:51.353 [main] INFO daidawang.advancedSpring.bean.a05.Bean1 -- 我被 Spring 管理啦</span><br><span class="line">config</span><br><span class="line">daidawang.advancedSpring.bean.a05.DDWBeanPostProcessor</span><br><span class="line">bean1</span><br><span class="line">sqlSessionFactoryBean</span><br><span class="line">dataSource</span><br><span class="line">18:10:51.453 [main] INFO com.alibaba.druid.pool.DruidDataSource -- &#123;dataSource-0&#125; closing ...</span><br></pre></td></tr></table></figure><h3 id="模拟实现注入-Mapper"><a href="#模拟实现注入-Mapper" class="headerlink" title="模拟实现注入@Mapper"></a>模拟实现注入@Mapper</h3><p>@Mapper 注解写在接口上， 而根据前面内容得知，@Mapper 被解析后在 Spring 容器中也存在与被标记的接口相关的 Bean。</p><p>难道 Spring 能管理接口？</p><p>那肯定是不行的，Spring 只能管理对象这是毋庸置疑的。那这些接口是怎么变成对象被 Spring 管理的呢？</p><p>这依赖于 <font style="color:#DF2A3F;">MapperFactoryBean</font> 将接口转换为对象。</p><p>在 Config 添加注册 mapper1MapperFactoryBean 和 mapper2MapperFactoryBean 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperFactoryBean&lt;Mapper1&gt; <span class="title function_">mapper1MapperFactoryBean</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span>&#123;</span><br><span class="line">MapperFactoryBean&lt;Mapper1&gt; mapperFactoryBean = <span class="keyword">new</span> <span class="title class_">MapperFactoryBean</span>&lt;&gt;(Mapper1.class);</span><br><span class="line">mapperFactoryBean.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line"><span class="keyword">return</span> mapperFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperFactoryBean&lt;Mapper2&gt; <span class="title function_">mapper2MapperFactoryBean</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span>&#123;</span><br><span class="line">MapperFactoryBean&lt;Mapper2&gt; mapperFactoryBean = <span class="keyword">new</span> <span class="title class_">MapperFactoryBean</span>&lt;&gt;(Mapper2.class);</span><br><span class="line">mapperFactoryBean.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line"><span class="keyword">return</span> mapperFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="background-color:#000000;"></font></p><p>再运行 main() 方法可以看到容器中存在名为 mapper1MapperFactoryBean 和 mapper2MapperFactoryBean 的 Bean。</p><p>这种方式虽然可以完成 Mapper 接口的注册，但每次只能单个注册，不能批量注册。</p><p>移除 Config 类中的 mapper1() 和 mapper2() 方法，自行编写 <font style="color:#DF2A3F;">BeanDefinitionRegistryPostProcessor</font> 接口的实现类完成<font style="color:#DF2A3F;"> @Mapper </font>注解的解析：</p><p>按照  模拟实现组件扫描<font style="background-color:rgba(255, 255, 255, 0);"> </font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">ComponentSacnPostProcessor</font><font style="background-color:rgba(255, 255, 255, 0);"> 的方式，我先在</font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">A05Application</font><font style="background-color:rgba(255, 255, 255, 0);"> 类上添加了 </font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">@MapperScan(“daidawang.advancedSpring.bean.a05.mapper”)</font></p><p>然后开始编写MapperPostProcessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">CachingMetadataReaderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>();</span><br><span class="line">        <span class="type">AnnotationBeanNameGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationBeanNameGenerator</span>();</span><br><span class="line">        <span class="type">MapperScan</span> <span class="variable">annotation</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(A05Application.class, MapperScan.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">            String[] value = annotation.value();</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> value[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;classpath*:&quot;</span> + packageName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/*.class&quot;</span>;</span><br><span class="line">            <span class="comment">//扫描mapper包下的资源</span></span><br><span class="line">            <span class="keyword">for</span> (Resource resource : <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(path)) &#123;</span><br><span class="line">                <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> factory.getMetadataReader(resource);</span><br><span class="line">                <span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> reader.getAnnotationMetadata();</span><br><span class="line">                    <span class="comment">//判断是否有@Mapper注解并且是接口</span></span><br><span class="line">                <span class="keyword">if</span> (annotationMetadata.hasAnnotation(Mapper.class.getName()) &amp;&amp; annotationMetadata.isInterface()) &#123;</span><br><span class="line">                    <span class="comment">//创建BeanDefinition</span></span><br><span class="line">                    <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(reader.getClassMetadata().getClassName()).getBeanDefinition();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(beanDefinition, registry);</span><br><span class="line">                    <span class="comment">//注册BeanDefinition</span></span><br><span class="line">                    registry.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        BeanDefinitionRegistryPostProcessor.<span class="built_in">super</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    context.registerBean(MapperPostProcessor.class);</span><br><span class="line">    context.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String name : contBean</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [daidawang.advancedSpring.bean.a05.mapper.Mapper1]: Specified class is an interface</span><br></pre></td></tr></table></figure><p>抛出 Mapper1 是一个接口的异常，正如前文提到的 Spring 无法管理接口，上文是通过创建MapperFactoryBean<Mapper1> MapperFactoryBean<Mapper2> 来实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperFactoryBean&lt;Mapper1&gt; <span class="title function_">mapper1MapperFactoryBean</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span>&#123;</span><br><span class="line">    MapperFactoryBean&lt;Mapper1&gt; mapperFactoryBean = <span class="keyword">new</span> <span class="title class_">MapperFactoryBean</span>&lt;&gt;(Mapper1.class);</span><br><span class="line">    mapperFactoryBean.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">    <span class="keyword">return</span> mapperFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperFactoryBean&lt;Mapper2&gt; <span class="title function_">mapper2MapperFactoryBean</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span>&#123;</span><br><span class="line">    MapperFactoryBean&lt;Mapper2&gt; mapperFactoryBean = <span class="keyword">new</span> <span class="title class_">MapperFactoryBean</span>&lt;&gt;(Mapper2.class);</span><br><span class="line">    mapperFactoryBean.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">    <span class="keyword">return</span> mapperFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以当创建 <font style="color:#DF2A3F;">BeanDefinitionean</font> 对象的时候，也需要创建 <font style="color:#DF2A3F;">MapperFactoryBean</font> 类型的<font style="color:#DF2A3F;">BeanDefinitionean .</font></p><p><font style="color:#DF2A3F;"></font></p><p>而<font style="color:#DF2A3F;"> BeanDefinitionBuilder.genericBeanDefinition(reader.getClassMetadata().getClassName()) </font>这样就创建了<font style="color:#DF2A3F;"> Mappper</font> 类型的<font style="color:#DF2A3F;"> BeanDefinitionean ，</font></p><p>为了创建<font style="color:#DF2A3F;">MapperFactoryBean</font> 型的<font style="color:#DF2A3F;">BeanDefinitionean</font> 做出如下修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// --snip--</span></span><br><span class="line">                 <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                            .genericBeanDefinition(MapperFactoryBean.class)</span><br><span class="line">                            .getBeanDefinition();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(beanDefinition, registry);</span><br><span class="line">                    <span class="comment">//注册BeanDefinition</span></span><br><span class="line">                    registry.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;mapperFactoryBean&#x27;: Property &#x27;sqlSessionFactory&#x27; or &#x27;sqlSessionTemplate&#x27; are required</span><br></pre></td></tr></table></figure><p>好了已经创建了 MapperFactoryBean 类性的  <font style="color:#DF2A3F;">BeanDefinitionean</font> 对象，</p><p>但是由于没有给定参数SqlSessionFactory 而抛出异常 。</p><p>添加<font style="color:#bcbec4;background-color:#1e1f22;">.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE)</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// --snip--</span></span><br><span class="line">            <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                .genericBeanDefinition(MapperFactoryBean.class)</span><br><span class="line">                .setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE)</span><br><span class="line">                .getBeanDefinition();</span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(beanDefinition, registry);</span><br><span class="line">            <span class="comment">//注册BeanDefinition</span></span><br><span class="line">            registry.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;mapperFactoryBean&#x27;: Property &#x27;mapperInterface&#x27; is required</span><br></pre></td></tr></table></figure><p>由于MapperFactoryBean 的构造是 Mapper 类的类路径     </p><p>MapperFactoryBean<Mapper2> mapperFactoryBean &#x3D; new MapperFactoryBean&lt;&gt;(Mapper2.class);</p><p>所以添加 <font style="color:#bcbec4;background-color:#1e1f22;">.addConstructorArgValue(annotationMetadata.getClassName())</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// --snip--</span></span><br><span class="line">            <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                .genericBeanDefinition(MapperFactoryBean.class)</span><br><span class="line">                .addConstructorArgValue(annotationMetadata.getClassName())</span><br><span class="line">                .setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE)</span><br><span class="line">                .getBeanDefinition();</span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(beanDefinition, registry);</span><br><span class="line">            <span class="comment">//注册BeanDefinition</span></span><br><span class="line">            registry.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">08:03:41.154 [main] INFO daidawang.advancedSpring.bean.a05.Bean1 -- 我被 Spring 管理啦</span><br><span class="line">config</span><br><span class="line">daidawang.advancedSpring.bean.a05.DDWBeanPostProcessor</span><br><span class="line">daidawang.advancedSpring.bean.a05.MapperPostProcessor</span><br><span class="line">bean1</span><br><span class="line">sqlSessionFactoryBean</span><br><span class="line">dataSource</span><br><span class="line">mapperFactoryBean</span><br><span class="line">08:03:41.342 [main] INFO com.alibaba.druid.pool.DruidDataSource -- &#123;dataSource-0&#125; closing ...</span><br></pre></td></tr></table></figure><p>观察控制台发现 只打印了 <font style="color:#DF2A3F;">mapperFactoryBean</font> ，没有打印 <font style="color:#DF2A3F;">Mapper1</font> 与  <font style="color:#DF2A3F;">Mapper2</font></p><p>这是因为 通过<font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">AnnotationBeanNameGenerator</font><font style="background-color:rgba(255, 255, 255, 0);"> 创建 beanName 的时候，</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">默认是 </font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">beanDefinition</font><font style="background-color:rgba(255, 255, 255, 0);"> 的名字，而 </font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">beanDefinition</font><font style="background-color:rgba(255, 255, 255, 0);"> 已经被改为了 </font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);">MapperFactoryBean.class</font></p><p><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);"> </font><font style="background-color:rgba(255, 255, 255, 0);">在注册 Mapper1 时往容器添加了 </font><font style="color:#DF2A3F;">mapperFactoryBean</font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);"> ，</font><font style="background-color:rgba(255, 255, 255, 0);">在注册 Mapper2 时 又添加了相同名字的 </font><font style="color:#DF2A3F;">mapperFactoryBean</font><font style="color:#DF2A3F;background-color:rgba(255, 255, 255, 0);"> ，</font><font style="background-color:rgba(255, 255, 255, 0);">导致 Mapper1 Mapper2 在容器里共用了同一个也名字</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">我们可以借用源码的思路用二级缓存来解决</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationBeanNameGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.ClassMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.CachingMetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.VarHandle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MapperPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义的MapperScan 后置处理器,</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">CachingMetadataReaderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>();</span><br><span class="line">        <span class="type">AnnotationBeanNameGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationBeanNameGenerator</span>();</span><br><span class="line">        <span class="type">MapperScan</span> <span class="variable">annotation</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(A05Application.class, MapperScan.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">            String[] value = annotation.value();</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> value[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;classpath*:&quot;</span> + packageName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/*.class&quot;</span>;</span><br><span class="line"><span class="comment">//扫描mapper包下的资源</span></span><br><span class="line">            <span class="keyword">for</span> (Resource resource : <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(path)) &#123;</span><br><span class="line">                <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> factory.getMetadataReader(resource);</span><br><span class="line">                <span class="type">ClassMetadata</span> <span class="variable">classMetadata</span> <span class="operator">=</span> reader.getClassMetadata();</span><br><span class="line">                <span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> reader.getAnnotationMetadata();</span><br><span class="line">                  <span class="comment">//判断是否有@Mapper注解并且是接口</span></span><br><span class="line">                <span class="keyword">if</span> (annotationMetadata.hasAnnotation(Mapper.class.getName()) &amp;&amp; annotationMetadata.isInterface()) &#123;</span><br><span class="line">                    <span class="comment">//创建BeanDefinition</span></span><br><span class="line">                    <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                            .genericBeanDefinition(MapperFactoryBean.class)</span><br><span class="line">                            <span class="comment">//在构造 MapperFactoryBean 实例时传递一个构造函数参数，即被扫描类的全限定名</span></span><br><span class="line">                            <span class="comment">//MapperFactoryBean 类有一个构造函数接受一个 Class 参数，代表了要创建的 Mapper 接口。</span></span><br><span class="line">                            .addConstructorArgValue(annotationMetadata.getClassName())</span><br><span class="line">                            <span class="comment">//设置了 MapperFactoryBean 的自动装配模式为 AUTOWIRE_BY_TYPE。这意味着 Spring 会根据类型自动注入 MapperFactoryBean 需要的依赖。</span></span><br><span class="line">                            <span class="comment">//MapperFactoryBean 需要一个 SqlSessionFactory 或 SqlSessionTemplate 来执行 SQL 查询</span></span><br><span class="line">                            .setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE)</span><br><span class="line">                            .getBeanDefinition();</span><br><span class="line"></span><br><span class="line">                    <span class="type">AbstractBeanDefinition</span> <span class="variable">definition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                            .genericBeanDefinition(annotationMetadata.getClassName())</span><br><span class="line">                            .getBeanDefinition();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generator.generateBeanName(definition, registry);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//注册BeanDefinition</span></span><br><span class="line">                    registry.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        BeanDefinitionRegistryPostProcessor.<span class="built_in">super</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">08:19:25.224 [main] INFO daidawang.advancedSpring.bean.a05.Bean1 -- 我被 Spring 管理啦</span><br><span class="line">config</span><br><span class="line">daidawang.advancedSpring.bean.a05.DDWBeanPostProcessor</span><br><span class="line">daidawang.advancedSpring.bean.a05.MapperPostProcessor</span><br><span class="line">bean1</span><br><span class="line">sqlSessionFactoryBean</span><br><span class="line">dataSource</span><br><span class="line">mapper1</span><br><span class="line">mapper2</span><br><span class="line">08:19:25.393 [main] INFO com.alibaba.druid.pool.DruidDataSource -- &#123;dataSource-0&#125; closing ...</span><br></pre></td></tr></table></figure><p>成功自定义 Mapper 后置处理器， 当然我这里是通过 @MapperScan 注解来完成的，也可以和老师一样手动拼写类路径。</p><h1 id="46-Value-注入底层"><a href="#46-Value-注入底层" class="headerlink" title="46 . @Value 注入底层"></a>46 . @Value 注入底层</h1><h2 id="46-1-解析-Value"><a href="#46-1-解析-Value" class="headerlink" title="46.1 解析@Value"></a>46.1 解析@Value</h2><p>在第四讲<a href="#vX2fC">黑马四十九讲容器与Bean</a>** 3.2@Autowired@Value后置处理器 **中给工厂设置了 <code> &lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;ContextAnnotationAutowireCandidateResolver&lt;/font&gt;</code>类,来深入了解一下吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;JAVA_HOME&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String home;</span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 JAVA_HOME 由系统环境变量填充,18 为整型。</p><p>解析 <code>@Value</code>需要两步:</p><ol><li>获取 <code>@Value</code>注解中的值</li><li>解析属性值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A46</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个新的AnnotationConfigApplicationContext，从给定的组件类中派生bean定义，并自动刷新上下文。</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> componentClasses 一个或多个组件类，例如<span class="doctag">@Configuration</span>类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A46.class);        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getDefaultListableBeanFactory();</span><br><span class="line">        <span class="type">ContextAnnotationAutowireCandidateResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>();</span><br><span class="line">        beanFactory.setAutowireCandidateResolver(resolver);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">home</span> <span class="operator">=</span> Bean1.class.getDeclaredField(<span class="string">&quot;home&quot;</span>);</span><br><span class="line">        text1(home, resolver, context);</span><br><span class="line">        <span class="comment">// text2(Bean1.class.getDeclaredField(&quot;age&quot;), resolver, context);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">text1</span><span class="params">(Field field, ContextAnnotationAutowireCandidateResolver resolver, AnnotationConfigApplicationContext context)</span> &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dependencyDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(field, Boolean.FALSE);</span><br><span class="line">        <span class="comment">//获取@Value的内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resolver.getSuggestedValue(dependencyDescriptor).toString();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//解析$&#123;&#125;</span></span><br><span class="line">        value= context.getEnvironment().resolvePlaceholders(value);</span><br><span class="line"></span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;JAVA_HOME&#125;</span><br><span class="line">D:\software\work\jdk\jdk8\jdk</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">text2</span><span class="params">(Field field, ContextAnnotationAutowireCandidateResolver resolver, AnnotationConfigApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="type">DependencyDescriptor</span> <span class="variable">dependencyDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(field, Boolean.FALSE);</span><br><span class="line">    <span class="comment">//获取@Value的内容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resolver.getSuggestedValue(dependencyDescriptor).toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;@Value 的 value 属性值: &quot;</span> + value);</span><br><span class="line">    <span class="comment">//解析$&#123;&#125;</span></span><br><span class="line">    value= context.getEnvironment().resolvePlaceholders(value);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;解析得到的值: &quot;</span> + value);</span><br><span class="line">    System.out.println(<span class="string">&quot;解析得到的值的类型: &quot;</span> + value.getClass());</span><br><span class="line">    <span class="comment">//此处 Spring中有两套转换接口,TypeConverter是底层的只做类型转换不做数据绑定的,而PropertyEditor是做数据绑定的（23讲未完成）</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">age</span> <span class="operator">=</span> context.getBeanFactory().getTypeConverter().convertIfNecessary(value, dependencyDescriptor.getDependencyType());</span><br><span class="line">    System.out.println(<span class="string">&quot;转换后的类型: &quot;</span> + age.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span> 的 value 属性值: <span class="number">18</span></span><br><span class="line">解析得到的值: <span class="number">18</span></span><br><span class="line">解析得到的值的类型: <span class="keyword">class</span> <span class="title class_">java</span>.lang.String</span><br><span class="line">转换后的类型: <span class="keyword">class</span> <span class="title class_">java</span>.lang.Integer</span><br></pre></td></tr></table></figure><h2 id="46-2-EL表达式的解析"><a href="#46-2-EL表达式的解析" class="headerlink" title="46.2 EL表达式的解析"></a>46.2 EL表达式的解析</h2><p><code>@Value</code> 里面还可以写 EL表达式: <code>@Value(&quot;#&#123;@bean3&#125;&quot;)</code>,表示根据名称找到 bean3 的 bean 同 <code>@Autowired</code></p><p>EL 表达式全称:SpringEL ,简称:SpEL, 用于 <code>#&#123;&#125;</code> 之间</p><p>新建如下几个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;@bean3&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Bean3 bean3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;bean3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean3</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean4</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;&#x27;hello, &#x27; + &#x27;$&#123;JAVA_HOME&#125;&#x27;&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果继续使用 test2() 方法解析 Bean2 中的 @Value 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// --snip--</span></span><br><span class="line">   text2(Bean2.class.getDeclaredField(<span class="string">&quot;bean3&quot;</span>), resolver, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会出现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Value 的 value 属性值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值的类型: class java.lang.String</span><br><span class="line">Failed to convert value of type &#x27;java.lang.String&#x27; to required type &#x27;dai.dawang.sundy.a46Value注解的原理.A46$Bean3&#x27;; Cannot convert value of type &#x27;java.lang.String&#x27; to required type &#x27;dai.dawang.sundy.a46Value注解的原理.A46$Bean3&#x27;: no matching editors or conversion strategy found</span><br></pre></td></tr></table></figure><p>是最后一步类型转换出错, 无法将 <code>String</code>转换为 <code>A46$Bean3</code>。</p><p>为了解析成功,需要在转换前解析 EL 表达式 <code>#&#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    <span class="comment">//text2(Bean2.class.getDeclaredField(&quot;bean3&quot;), resolver, context);</span></span><br><span class="line">    test3(context, resolver, Bean2.class.getDeclaredField(<span class="string">&quot;bean3&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    text3(Bean4.class.getDeclaredField(<span class="string">&quot;value&quot;</span>), resolver, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取<span class="doctag">@Value</span>中EL表达式的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resolver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">text3</span><span class="params">(Field field, ContextAnnotationAutowireCandidateResolver resolver, AnnotationConfigApplicationContext context)</span> &#123;</span><br><span class="line">        <span class="type">DependencyDescriptor</span> <span class="variable">dependencyDescriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyDescriptor</span>(field, Boolean.FALSE);</span><br><span class="line">        <span class="comment">//获取@Value的内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resolver.getSuggestedValue(dependencyDescriptor).toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;@Value 的 value 属性值: &quot;</span> + value);</span><br><span class="line">        <span class="comment">//解析$&#123;&#125;</span></span><br><span class="line">        value= context.getEnvironment().resolvePlaceholders(value);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析得到的值: &quot;</span> + value);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析得到的值的类型: &quot;</span> + value.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">        <span class="comment">//解析#&#123;&#125;,解析EL表达式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean3</span> <span class="operator">=</span> beanFactory.getBeanExpressionResolver().evaluate(value, <span class="keyword">new</span> <span class="title class_">BeanExpressionContext</span>(beanFactory, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型转换</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> beanFactory.getTypeConverter().convertIfNecessary(bean3,dependencyDescriptor.getDependencyType() );</span><br><span class="line">        System.out.println(<span class="string">&quot;转换后的类型: &quot;</span> + result.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Value 的 value 属性值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值: #&#123;@bean3&#125;</span><br><span class="line">解析得到的值的类型: class java.lang.String</span><br><span class="line">转换后的类型: class dai.dawang.sundy.a46Value注解的原理.A46$Bean3</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">@Value 的 value 属性值: #&#123;&#x27;hello, &#x27; + &#x27;$&#123;JAVA_HOME&#125;&#x27;&#125;</span><br><span class="line">解析得到的值: #&#123;&#x27;hello, &#x27; + &#x27;D:\software\work\jdk\jdk8\jdk&#x27;&#125;</span><br><span class="line">解析得到的值的类型: class java.lang.String</span><br><span class="line">转换后的类型: class java.lang.String</span><br></pre></td></tr></table></figure><h1 id="6-Aware-接口"><a href="#6-Aware-接口" class="headerlink" title="6. Aware 接口"></a>6. Aware 接口</h1><p>允许 Bean 在<font style="background-color:#1DC0C9;">初始化过程</font>中获取 Spring 容器中的某些组件或信息.</p><h2 id="Aware-接口"><a href="#Aware-接口" class="headerlink" title="Aware 接口"></a>Aware 接口</h2><p>Aware 接口用于注入一些与容器相关的信息，比如：</p><ul><li>BeanNameAware 注入 Bean 的名字</li><li>BeanFactoryAware 注入 BeanFactory 容器</li><li>ApplicationContextAware 注入 ApplicationContext 容器</li><li>EmbeddedValueResolverAware 解析 ${}</li><li><font style="background-color:rgba(255, 255, 255, 0);">Ini</font>tializingBean ：初始化方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mofan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/8 16:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, ApplicationContextAware &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 Bean: &quot;</span> + <span class="built_in">this</span> + <span class="string">&quot;名字叫: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 Bean: &quot;</span> + <span class="built_in">this</span> + <span class="string">&quot;容器是: &quot;</span> + applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(<span class="string">&quot;myBean&quot;</span>, MyBean.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前bean daidawang.advancedSpring.bean.a06.MyBean@481a15ff 名字叫：daidawang.advancedSpring.bean.a06.MyBean</span><br><span class="line">当前bean daidawang.advancedSpring.bean.a06.MyBean@481a15ff 容器对象是：org.springframework.context.support.GenericApplicationContext@6615435c, started on Sun Aug 18 17:31:44 CST 2024</span><br></pre></td></tr></table></figure><h2 id="InitialzingBean"><a href="#InitialzingBean" class="headerlink" title="InitialzingBean"></a>InitialzingBean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, ApplicationContextAware, InitializingBean &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 Bean: &quot;</span> + <span class="built_in">this</span> + <span class="string">&quot; 初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前bean daidawang.advancedSpring.bean.a06.MyBean@481a15ff 名字叫：daidawang.advancedSpring.bean.a06.MyBean</span><br><span class="line">当前bean daidawang.advancedSpring.bean.a06.MyBean@481a15ff 容器对象是：org.springframework.context.support.GenericApplicationContext@6615435c, started on Sun Aug 18 17:31:44 CST 2024</span><br><span class="line">当前bean daidawang.advancedSpring.bean.a06.MyBean@481a15ff 初始化</span><br></pre></td></tr></table></figure><p>当同时实现 <font style="color:#DF2A3F;">Aware</font> 接口和 <font style="color:#DF2A3F;">InitializingBean</font> 接口时，会先执行 <font style="color:#DF2A3F;">Aware</font> 接口。</p><p><font style="color:#DF2A3F;">BeanFactoryAware</font> 、<font style="color:#DF2A3F;">ApplicationContextAware</font> 和 <font style="color:#DF2A3F;">EmbeddedValueResolverAware</font> 三个接口的功能可以使用 <font style="color:#DF2A3F;">@Autowired</font> 注解实现，<font style="color:#DF2A3F;">InitializingBean</font> 接口的功能也可以使用<font style="color:#DF2A3F;"> @PostConstruct</font> 注解实现，为什么还要使用接口呢？</p><p><font style="color:#DF2A3F;">@Autowired</font> 和<font style="color:#DF2A3F;"> @PostConstruct </font>注解的解析需要使用 Bean 后置处理器，属于拓展功能，而这些接口属于内置功能，不加任何拓展 Spring 就能识别。在某些情况下，拓展功能会失效，而内容功能不会失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, ApplicationContextAware, InitializingBean &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContextWithAutowired</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 Bean: &quot;</span> + <span class="built_in">this</span> + <span class="string">&quot; 使用 @Autowired 注解，容器是: &quot;</span> + applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 Bean: &quot;</span> + <span class="built_in">this</span> + <span class="string">&quot; 使用 @PostConstruct 注解初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再运行 main() 方法会发现使用的注解没有被成功解析，原因很简单，<font style="color:#DF2A3F;">GenericApplicationContext</font> 是一个干净的容器，其内部没有用于解析这些注解的后置处理器。如果想要这些注解生效，则需要像前文一样添加必要的后置处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.registerBean(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">context.registerBean(CommonAnnotationBeanPostProcessor.class);</span><br></pre></td></tr></table></figure><h2 id="Autowired-的失效情况"><a href="#Autowired-的失效情况" class="headerlink" title="@Autowired 的失效情况"></a>@Autowired 的失效情况</h2><p>在某些情况下，尽管容器中存在必要的后置处理器，但 @Autowired 和 @PostConstruct 注解也会失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig1</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;注入 ApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(<span class="string">&quot;myConfig1&quot;</span>, MyConfig1.class);</span><br><span class="line">    context.registerBean(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">    context.registerBean(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">    <span class="comment">// 解析配置类中的注解</span></span><br><span class="line">    context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>:<span class="number">16</span>:<span class="number">39.141</span> [main] ERROR daidawang.advancedSpring.bean.a06.Config2 -- 注入 ApplicationContext</span><br><span class="line"><span class="number">18</span>:<span class="number">16</span>:<span class="number">43.666</span> [main] ERROR daidawang.advancedSpring.bean.a06.Config2 -- 初始化</span><br></pre></td></tr></table></figure><p><font style="color:#DF2A3F;">@Autowired </font>和<font style="color:#DF2A3F;"> @PostConstruct </font>注解成功被解析。</p><p>如果再对 Config1 进行一点小小的修改呢？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig1</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BeanFactoryPostProcessor <span class="title function_">processor1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> processor -&gt; log.info(<span class="string">&quot;执行 processor1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Config1 中添加了一个被 @Bean 注解标记的 processor1() 方法，用于向容器中添加 <font style="color:#DF2A3F;">BeanFactoryPostProcessor</font>。</p><p>如果再运行 main() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>:<span class="number">16</span>:<span class="number">43.693</span> [main] INFO daidawang.advancedSpring.bean.a06.Config2 -- 执行 processor1</span><br></pre></td></tr></table></figure><p>processor1() 方法成功生效，但 <font style="color:#DF2A3F;">@Autowired</font> 和 <font style="color:#DF2A3F;">@PostConstruct</font> 注解的解析失败了。</p><p>对于<font style="color:#DF2A3F;"> context.refresh();</font> 方法来说，它主要按照以下顺序干了三件事：</p><ol><li>执行 BeanFactory 后置处理器；</li><li>添加 Bean 后置处理器；</li><li>创建和初始化单例对象。</li></ol><p>比如当 Java 配置类不包括 <font style="color:#DF2A3F;">BeanFactoryPostProcessor</font> 时：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1728362668474-3883ea45-4432-4c59-8bbf-3d3726a39861.png"></p><p><font style="color:#DF2A3F;">BeanFactoryPostProcessor</font> 会在 Java 配置类初始化之前执行。</p><p>当 Java 配置类中定义了<font style="color:#DF2A3F;">BeanFactoryPostProcessor</font> 时，如果要创建配置类中的 <font style="color:#DF2A3F;">BeanFactoryPostProcessor</font> 就必须<font style="background-color:#1DC0C9;"> 提前 </font>创建和初始化 Java 配置类。</p><p>在创建和初始化 Java 配置类时，由于 <font style="color:#DF2A3F;">BeanPostProcessor</font> 还未准备好，无法解析配置类中的<font style="color:#DF2A3F;"> @Autowired </font>等注解，导致<font style="color:#DF2A3F;"> @Autowired </font>等注解失效：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1728362681900-900f2c86-4465-42ca-9693-4c7640aab8ad.png"></p><p>要解决这个问题也很简单，使用相关接口的功能实现注入和初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig2</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, ApplicationContextAware &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;注入 ApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BeanFactoryPostProcessor <span class="title function_">processor2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> processor -&gt; log.info(<span class="string">&quot;执行 processor2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line">    context.registerBean(<span class="string">&quot;myConfig2&quot;</span>, MyConfig2.class);</span><br><span class="line">    context.registerBean(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">    context.registerBean(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析配置类中的注解</span></span><br><span class="line">    context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    context.refresh();</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>:<span class="number">16</span>:<span class="number">39.141</span> [main] ERROR daidawang.advancedSpring.bean.a06.Config2 -- 注入 ApplicationContext</span><br><span class="line"><span class="number">18</span>:<span class="number">16</span>:<span class="number">43.666</span> [main] ERROR daidawang.advancedSpring.bean.a06.Config2 -- 初始化</span><br><span class="line"><span class="number">18</span>:<span class="number">16</span>:<span class="number">43.693</span> [main] INFO daidawang.advancedSpring.bean.a06.Config2 -- 执行 processor2</span><br></pre></td></tr></table></figure><h2 id="总结-Aware"><a href="#总结-Aware" class="headerlink" title="总结 Aware"></a>总结 Aware</h2><ol><li><font style="color:#DF2A3F;">Aware</font> 接口提供了一种 内置 的注入手段，可以注入 BeanFactory、ApplicationContext；</li><li><font style="color:#DF2A3F;">InitializingBean</font> 接口提供了一种 内置 的初始化手段；</li><li>内置的注入和初始化不受拓展功能的影响，总会被执行，因此 Spring 框架内部的类总是使用这些接口。</li></ol><h1 id="7-初始化与销毁"><a href="#7-初始化与销毁" class="headerlink" title="7. 初始化与销毁"></a>7. 初始化与销毁</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>spring 支持 3 种初始化方式</p><ol><li><font style="background-color:rgba(255, 255, 255, 0);">@PostConstruct ，后置处理器，执行顺序第一</font></li><li><font style="background-color:rgba(255, 255, 255, 0);">实现InitializingBean ，内置处理器，执行顺序第二</font></li><li><font style="background-color:rgba(255, 255, 255, 0);">@Bean(initMethod &#x3D; “initMethod”)，BeanDefinition 指定的，执行顺序第三</font></li></ol><p><font style="background-color:rgba(255, 255, 255, 0);">创建 Bean1</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Bean1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试初始化顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PostConstruct初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initMethod初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A07Application</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 初始化与销毁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A07Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A07Application.class, args);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PostConstruct初始化</span><br><span class="line">InitializingBean初始化</span><br><span class="line">initMethod初始化</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><p>spring 支持 3 种销毁方式</p><ol><li><font style="background-color:rgba(255, 255, 255, 0);">@</font>PreDestroy <font style="background-color:rgba(255, 255, 255, 0);">，后置处理器，执行顺序第一</font></li><li><font style="background-color:rgba(255, 255, 255, 0);">实现 DisposableBean ，内置处理器，执行顺序第二</font></li><li>@Bean(destroyMethod &#x3D; “destroyMethod”)，BeanDefinition 指定的，执行顺序第三</li></ol><p>创建 Bean2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Bean2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试销毁顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean2</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deprecated</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PreDestroy销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroyMethod销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A07Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(A07Application.class, args);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Bean1 <span class="title function_">bean1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;destroyMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Bean2 <span class="title function_">Bean2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bean2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@PreDestroy销毁</span><br><span class="line">destroy销毁</span><br><span class="line">destroyMethod销毁</span><br></pre></td></tr></table></figure><h2 id="Aware-与内外置处理器顺序"><a href="#Aware-与内外置处理器顺序" class="headerlink" title="Aware 与内外置处理器顺序"></a>Aware 与内外置处理器顺序</h2><p>添加 Aware 接口到 Bean1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a07初始化与销毁;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.EmbeddedValueResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EmbeddedValueResolverAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringValueResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Bean1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试初始化顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean1</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, BeanNameAware, ApplicationContextAware, BeanFactoryAware, EmbeddedValueResolverAware &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PostConstruct初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initMethod初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanNameAware执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextAware执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanFactoryAware执行&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EmbeddedValueResolverAware执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BeanNameAware执行</span><br><span class="line">BeanFactoryAware执行</span><br><span class="line">EmbeddedValueResolverAware执行</span><br><span class="line">ApplicationContextAware执行</span><br><span class="line">PostConstruct初始化</span><br><span class="line">InitializingBean初始化</span><br><span class="line">initMethod初始化</span><br></pre></td></tr></table></figure><p>这些初始化方式的执行顺序：</p><ol><li>BeanNameAware：这是最早执行的 Aware 接口之一，因为它在 Bean 的实例化之后立即调用。</li><li>ApplicationContextAware：在BeanNameAware之后执行，在Bean的实例化之后，但在依赖注入之前。</li><li>BeanFactoryAware：同样在依赖注入之前执行。</li><li>EmbeddedValueResolverAware：在依赖注入之前执行，用于解析 ${} 表达式中的占位符。</li><li>依赖注入：Spring 容器会进行依赖注入，即注入 @Autowired 标注的字段或方法。</li><li>@PostConstruct：在依赖注入之后执行。</li><li>InitializingBean.afterPropertiesSet()：在依赖注入完成之后执行，通常在 @PostConstruct 之后。</li><li>@Bean(initMethod &#x3D; “initMethod”)：在 afterPropertiesSet() 方法之后执行</li></ol><h1 id="8-Scope"><a href="#8-Scope" class="headerlink" title="8. Scope"></a>8. Scope</h1><p>一个 bean 没有指定@Scope注解，默认是单例的。</p><h2 id="Scope-类型"><a href="#Scope-类型" class="headerlink" title="Scope 类型"></a>Scope 类型</h2><ul><li>singleton 单例，ApplicationContest 创建而创建，ApplicationContest 销毁而销毁</li><li>prototype 多例， 使用时创建，手动销毁</li><li>request  存在于 request 域中，生命周期同request 域</li><li>sesion 会话域，会话开始 bean 创建，会话结束 bean 销毁</li><li>application 应用程序域，应用程序开始 bean 创建，Spring 没有实现 销毁，WebServerContext</li></ul><p>验证request 、sesion、application 做出如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanForApplication beanForApplication;</span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanForRequest beanForRequest;</span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanForSession beanForSession;</span><br><span class="line"><span class="comment">//Error creating bean with name &#x27;beanForRequest&#x27;: Scope &#x27;request&#x27; is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(HttpServletRequest request, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">// 设置 session 过期时间为 10 秒</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// ServletContext sc = request.getServletContext();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;ul&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;li&gt;request scope: &quot;</span> +  beanForRequest + <span class="string">&quot;&lt;/li&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;li&gt;session scope: &quot;</span> +  beanForSession + <span class="string">&quot;&lt;/li&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;li&gt;application scope: &quot;</span> +  beanForApplication + <span class="string">&quot;&lt;/li&gt;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/ul&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不添加@Lazy 注解会抛出注释的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;application&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanForApplication</span> &#123;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;销毁BeanForApplication&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;request&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanForRequest</span> &#123;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;销毁BeanForRequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;session&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanForSession</span> &#123;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;销毁BeanForSession&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: A08Application</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A08Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动Spring应用</span></span><br><span class="line">        SpringApplication.run(A08Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/advanced_spring&quot;</span>);</span><br><span class="line">        dataSource.setName(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后访问 </p><p><a href="http://localhost:8080/test">http://localhost:8080/test</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723987286486-b610eb56-715d-4ec8-9aaa-50e1f11f035c.png"></p><p>每次刷新页面，重新请求 request scope 都会改变。同时控制台打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 3212 --- [nio-8080-exec-2] d.a.bean.a08Scope.BeanForRequest      : 销毁BeanForRequest</span><br></pre></td></tr></table></figure><p>同一个浏览器无论发送多少次请求，都属于一个会话（ session 域），所以 BeanForSession 不会改变。</p><p>同一个 web 程序也不会改变.。</p><p>在打开一个新浏览器访问</p><p>会发现 会话（ session 域）有所改变</p><p>而 web 程序仍然不会改变：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723987471117-29cb88a1-d668-4b60-bee3-19915fbd8046.png"></p><h2 id="在-Singleton-中使用其他类型的注意事项"><a href="#在-Singleton-中使用其他类型的注意事项" class="headerlink" title="在 Singleton 中使用其他类型的注意事项"></a>在 Singleton 中使用其他类型的注意事项</h2><p>一个单例的 bean 注入其他 scope 类型的 bean 会出现问题，</p><p>例如在单例 bean 里引用 多例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> F1 f1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F1</span> &#123;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁F1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;daidawang.advancedSpring.bean.a09Scope&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A09Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A09Application.class);        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> context.getBean(E.class);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF1());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF1());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF1());</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次调用获取多例 F</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F1@58ea606c</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F1@58ea606c</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F1@58ea606c</span><br></pre></td></tr></table></figure><h2 id="scope-失效解决"><a href="#scope-失效解决" class="headerlink" title="scope 失效解决"></a>scope 失效解决</h2><p>却发现 F 是同一个，明明在 F 类上指定了多例@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</p><p>这是因为对于单例对象来讲，依赖注入仅发生一次，后续再没有用到多例 F，E 用的始终是第一次依赖注入 F</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724036840197-052c61d3-8c6b-44ba-b7b6-fec17abfc899.png"></p><p>下面是解决方法，理念上殊途同归：都是延迟其他 scope bean 的获取，而不是在单例 bean 里直接获取其他 scope bean 对象</p><h3 id="Lazy-注解解决失效"><a href="#Lazy-注解解决失效" class="headerlink" title="@Lazy 注解解决失效"></a>@Lazy 注解解决失效</h3><p>用代理去获取多例</p><p>解决</p><p>通过 <font style="background-color:#1DC0C9;">懒加载</font><font style="background-color:rgba(255, 255, 255, 0);"> @Lazy ，代理对象虽然还是同一个，但是每次使用代理对象的任意方法时</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">由代理创建新 F 对象</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1724036877728-4655d540-c1a0-4078-90d3-6744381d4856.png"></p><p>在 E 类里添加<font style="background-color:rgba(255, 255, 255, 0);">@Lazy</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setF</span><span class="params">(F f)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.f = f;</span><br><span class="line">        log.info(<span class="string">&quot;setF(F f) &#123;&#125;&quot;</span>, f.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F1@543295b0</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F1@74e28667</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F1@663c9e7a</span><br></pre></td></tr></table></figure><h3 id="指定-proxyMode-类型解决"><a href="#指定-proxyMode-类型解决" class="headerlink" title="指定 proxyMode 类型解决"></a>指定 proxyMode 类型解决</h3><p>用代理去获取多例</p><p>创建 F2 并指定 <font style="background-color:#D22D8D;">proxyMode</font> 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: F2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 指定proxyMode属性解决作用域失效问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F2</span> &#123;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁F1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;daidawang.advancedSpring.bean.a09Scope&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A09Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A09Application.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> context.getBean(E.class);</span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF2());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF2());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF2());</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F2@c05fddc</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F2@5a5a729f</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F2@4b520ea8</span><br></pre></td></tr></table></figure><h3 id="ObjectFactory-获取多例对象"><a href="#ObjectFactory-获取多例对象" class="headerlink" title="ObjectFactory 获取多例对象"></a>ObjectFactory 获取多例对象</h3><p>用工厂去获取多例</p><p>创建 F3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: F3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过ObjectProxy解决作用域失效问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F3</span> &#123;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁F3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> F1 f1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> F2 f2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;F3&gt; objectFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> F3 <span class="title function_">getF3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> objectFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;daidawang.advancedSpring.bean.a09Scope&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A09Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A09Application.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> context.getBean(E.class);</span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF2());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF2());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF2());</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF3());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF3());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF3());</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F3@4201c465</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F3@2de56eb2</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F3@5745ca0e</span><br></pre></td></tr></table></figure><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a><font style="background-color:rgba(255, 255, 255, 0);">ApplicationContext</font></h3><p>用容器去获取多例</p><p>创建 F4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> daidawang.advancedSpring.bean.a09Scope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: F4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通过ApplicationContext解决</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/8/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F4</span> &#123;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁F4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--- snip</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> F3 <span class="title function_">getF3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> objectFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> F4 <span class="title function_">getF4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(F4.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;daidawang.advancedSpring.bean.a09Scope&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A09Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(A09Application.class);</span><br><span class="line">        context.registerBean(ConfigurationClassPostProcessor.class);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> context.getBean(E.class);</span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF1());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF2());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF2());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF2());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF3());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF3());</span></span><br><span class="line"><span class="comment">//        log.info(&quot;&#123;&#125;&quot;, e.getF3());</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF4());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF4());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, e.getF4());</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F4@43f02ef2</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F4@338fc1d8</span><br><span class="line">A09Application -- daidawang.advancedSpring.bean.a09Scope.F4@4722ef0c</span><br></pre></td></tr></table></figure><h1 id="9-补充"><a href="#9-补充" class="headerlink" title="9. 补充"></a>9. 补充</h1><p>比反射快的方式: 读取资源元数据创建一个CachingMetadataReaderFactory实例</p><p><font style="color:#DF2A3F;">context.refresh();</font> 方法来说，它主要按照以下顺序干了三件事：</p><ol><li>执行 BeanFactory 后置处理器；</li><li>添加 Bean 后置处理器；</li><li>创建和初始化单例对象。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端Vue的学习</title>
      <link href="/2024/08/12/%E5%89%8D%E7%AB%AFVue3%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/08/12/%E5%89%8D%E7%AB%AFVue3%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式面试</title>
      <link href="/2024/08/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2024/08/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="分布式理论"><a href="#分布式理论" class="headerlink" title="分布式理论"></a>分布式理论</h1><p>你知道分布式理论有哪些？</p><ul><li><p>CAP 任何分布式系统无法同时满足Consistency（一致性）、Availability（可用性）、Participant tolerance（分区容错）这3个基本需求。最多只能满足其中两项，由于分区容错是必须的，因此一般是AP或者CP。</p></li><li><p>BASE  BASE理论是对CAP的一种解决思路，包含三个思想：</p><p><strong>Basically Available</strong> <strong>（基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</p><p><strong>Soft State（软状态）：</strong>在一定时间内，允许出现中间状态，比如临时的不一致状态。</p><p><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</p></li></ul><h2 id="1-说下你理解的CAP"><a href="#1-说下你理解的CAP" class="headerlink" title="1 说下你理解的CAP"></a>1 说下你理解的CAP</h2><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202410171423750.png" alt="image-20241017142332627"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723439421074-0ef66a33-071e-4c51-b6cb-348d1b67a1be.png?x-oss-process=image/format,webp#averageHue=%23f0efef&from=url&id=na8yt&originHeight=278&originWidth=772&originalType=binary&ratio=1.125&rotation=0&showTitle=false&status=done&style=none&title="><br>下图有两个节点服务A和服务B，服务A与服务B分别各有一个应用和数据库。</p><ol><li>张三访问服务A，李四同时访问服务B</li><li>张三吧服务A数据从V0改为V1</li><li>服务A节点监测到数据变化执行M操作告诉了服务B</li><li>李四读取到的就是最新数据（正确数据）</li></ol><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>一致性指所有节点同一时间数据完全一致</p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>从客户端看，一致性注意指 高并发访问时更新过的数据如何获取的问题，<br>即张三李四同时访问如何获取最新正确的数据</p><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>从服务端看，是更新如何分布到整个系统，以保证数据最终一致，<br>即服务器A和服务器B如何通信保持数据一致</p><blockquote><p>对于一致性，一致的程度不同可分为 强、弱、最终一致 三类</p></blockquote><h5 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h5><p>对于关系型数据库，要求更新过的数据被后续访问都能看到，即强一致性。<br>张三更新数据后李四读取到的是最新数据。</p><h5 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h5><p>容忍后续部分或者全部访问不到，则是弱一致<br>张三更新后李四-读取到的是老数据。</p><h5 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h5><p>经过一段时间后要求访问到更新后的数据<br>张三更新后李四一段时间后读取到最新数据。</p><h4 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h4><p>指服务一直可用，而且是正常响应时间。无论上面时间都可以正常获取数据值。<br>好的可用性指系统很好为用户服务，不出现用户操作失败或者超时等用户体验不好的情况。</p><h4 id="分区容错性"><a href="#分区容错性" class="headerlink" title="分区容错性"></a>分区容错性</h4><p>遇到某节点或者网络分区故障时，仍然对外提供满足一致性或可用性的服务。<br>不满足分区容错性的服务就是一个服务出错，整个集群就无法提供服务。 </p><h4 id="如何取舍"><a href="#如何取舍" class="headerlink" title="如何取舍"></a>如何取舍</h4><ul><li>牺牲分区容错性：这个不能牺牲，一旦出现网络问题整个服务集群不可用</li><li>牺牲数据一致性：张三看到库存100买了一件后，但是李四看到依然是100</li><li>牺牲可用性：张三看到库存100买了一件后，李四需要阻塞等待。</li></ul><ol><li>满足CA，满足一致性和可用性，舍弃分区容错性。意味着系统不是分布式的。</li><li>满足CP，满足一致性和容错性，舍弃可用性，系统允许有段时间的访问生效问题。</li><li>满足AP，满足可用性和容错性，舍弃一致性，系统在并发访问时出现数据不一致问题。</li></ol><h2 id="2-BASE理论"><a href="#2-BASE理论" class="headerlink" title="2 BASE理论"></a>2 BASE理论</h2><p>BASE理论是对CAP的一种解决思路，包含三个思想：</p><blockquote><p>BASE全称：Basically Available（基本可用），Soft state（软状态），Eventually consistent（最终一致性）</p></blockquote><p>CAP不可能同时满足，分区容错对于分布式是必须的。<br>Base理论是对CAP一致性和可用性权衡的结果，核心思想是: 即使无法做到 强一致性 ，每个系统根据业务特点采用适当的方式达到 最终一致性。</p><h3 id="基本可用"><a href="#基本可用" class="headerlink" title="基本可用"></a>基本可用</h3><blockquote><p>假设系统出现不可预知的故障，相对正常系统而言：</p></blockquote><ul><li>响应时间上损失：正常情况0.5秒响应，基本可用的请求1秒左右回结果。</li><li>功能上的损失： 大促期间未来保护购物系统的稳定，可以关闭一些不重要的功能或者部分消费者引导到降级页面。</li></ul><h3 id="软状态"><a href="#软状态" class="headerlink" title="软状态"></a>软状态</h3><p>允许系统数据存在中间状态，并认为该状态不影响系统整体可用性，即系统多个不同节点的数据副本存在数据延迟。</p><h3 id="最终一致性-1"><a href="#最终一致性-1" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>在没用其他更新操作的情况下，数据最终一定达到一致的状态，因此所有客户端对系统的数据访问最终都能够获取最新的值。<br>上面说软状态，不可能一直是软状态，必须有时间限制。到了期限后，应当保证所有副本保持数据一致性。</p><h2 id="3-Seata"><a href="#3-Seata" class="headerlink" title="3 Seata"></a>3 Seata</h2><p>Seata事务管理中有三个重要角色:</p><ul><li>TC 事务协调者: 维护全局和分支事务的状态, 协调全局事务提交或回滚</li><li>TM事务管理器 : 定义全局事务的范围、开始全局事务、提交或回滚事务</li><li>RM资源管理器 : 管理分支事务处理的资源,与TC交谈以注册分支事务和报告分支事务的状态</li></ul><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202410171429896.png" alt="image-20241017142901809"></p><p>Seata基于上述架构提供四种不同的分布式事务解决方案:</p><ul><li>XA模式: 强一致性分阶段事务模式, 牺牲可用性, 无业务侵入</li><li>TCC模式: 最终一致的分阶段事务模式, 有业务侵入</li><li>AT模式: 最终一致的分阶段事务模式,无业务侵入, 也是默认模式</li><li>SAGA模式: 长事务模式,有业务侵入</li></ul><p>无论哪种模式都离不开TC事务协调者</p><h3 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1.引入依赖"></a>3.1.引入依赖</h3><p>首先，在order-service中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-配置TC地址"><a href="#3-2-配置TC地址" class="headerlink" title="3.2.配置TC地址"></a>3.2.配置TC地址</h3><p>在order-service中的application.yml中，配置TC服务信息，通过注册中心nacos，结合服务名称获取TC地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 注册中心类型 nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># seata服务名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br></pre></td></tr></table></figure><p>微服务如何根据这些配置寻找TC的地址呢？</p><p>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：</p><ul><li>namespace：命名空间</li><li>group：分组</li><li>application：服务名</li><li>cluster：集群名</li></ul><p>以上四个信息，在刚才的yaml文件中都能找到：</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202410171501920.png" alt="image-20241017150150841"></p><p>namespace为空，就是默认的public</p><p>结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SH，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了。</p><h3 id="3-3XA模式"><a href="#3-3XA模式" class="headerlink" title="3.3XA模式"></a>3.3XA模式</h3><p>XA是一种规范,实现原理是基于两阶段提交</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p>分布式锁的实现方式有哪些？<br>对于单机系统，可用synchronizad或者ReentrantLock这些常规方式加锁，<br>但是对于集群系统本地锁无法解决问题，通常回引入第三方组件解决如<br>数据库、Redis、Zookeeper等。</p><h2 id="数据库悲观锁（最少使用）"><a href="#数据库悲观锁（最少使用）" class="headerlink" title="数据库悲观锁（最少使用）"></a>数据库悲观锁（最少使用）</h2><blockquote><p>利用 select _ where _ for update  排他锁</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_account <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> t_account <span class="keyword">SET</span> username <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>注意锁的级别，MySQL InnoDB默认行级锁，而行级锁基于 索引 ，<br>如果一条SQL走不到索引就不会使用行级锁，而是走表锁。</p><h2 id="数据库乐观锁（较多使用）"><a href="#数据库乐观锁（较多使用）" class="headerlink" title="数据库乐观锁（较多使用）"></a>数据库乐观锁（较多使用）</h2><p>乐观锁原理是CAS思想（交换并比较），是不具有互斥性<br>不会产生锁等待而消耗资源，操作过程中认为 不存在并发冲突<br>只有 <code>update version</code> 失败后才会察觉到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">  t_account</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  username <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  REVISION <span class="operator">=</span> REVISION <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> REVISION <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>如果不使用版本号的形式而是使用 标识符的形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">  t_account</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  username <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  REVISION <span class="operator">=</span> unlock</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> REVISION <span class="operator">=</span> lock;</span><br></pre></td></tr></table></figure><p>标识符的形式会出现<code>ABA问题</code></p><blockquote><p>ABA问题：<br>在多个线程对同一变量进行多次修改的情况下，具体步骤如下：</p><ol><li>线程1读取变量值为A。</li><li>线程2读取变量值为A，然后将其修改为B。</li><li>线程2再次将变量从B修改回A。</li><li>此时，线程1执行CAS操作，期望值为A，新值为C。由于当前值也是A，因此CAS操作成功。</li></ol><p>虽然CAS操作成功了，但实际上变量已经被线程2修改过一次。<br>这就可能导致一些不希望发生的副作用，比如在某些情况下，这会导致某个状态被“隐藏”或者“丢失”。<br>同时也无法区分是第几次修改数据。<br>jdk支持AtomicStampedReference(原子有邮戳的参考)或者AtomicMarkableReference(原子有标记的参考) 来解决ABA问题，<br>当然也可用版本号的方式解决。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">  t_account</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  username <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  REVISION <span class="operator">=</span> REVISION <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> REVISION <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> stck <span class="operator">&gt;=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h2><p>Redis分布式锁 加锁就是在redis中，给key键设置一个值，为避免死锁，给定一个过期时间。</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key random_value NX PX 5000</span><br></pre></td></tr></table></figure><p><code>random_value</code>是客户端生成唯一的字符串。<br><code>PX 5000</code>设置键的过期时间为5000毫秒.<br><code>NX</code>代表只有键不存在时，才对键进行设置操作。有值的话就添加失败。</p><blockquote><p>命令通过检查键是否存在于数据库，<br>如果键不存在，Redis 会创建键并设置其值；如果键已存在，则不做任何操作。<br>由于 Redis 的单线程特性，所有的命令都是顺序执行的，这就保证了 SETNX 命令的原子性。</p></blockquote><h3 id="锁超时-问题"><a href="#锁超时-问题" class="headerlink" title="锁超时 问题"></a>锁超时 问题</h3><p>客户端A加锁同时设置超时时间是3秒，3秒后程序逻辑还没执行完毕，但是锁已经释放，<br>客户端B这时也来尝试加锁，那么客户端B也会加锁成功。<br> <img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723457166315-21aee16d-6b71-472f-9fb8-bf2a6aa4ba72.png#averageHue=%23faf6f5&clientId=u23334638-f09e-4&from=paste&height=192&id=jpRwj&originHeight=216&originWidth=729&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=61026&status=done&style=none&taskId=u69672f6a-b3cf-48c0-abaf-1d61cf6df16&title=&width=648" alt="image.png"><br>为了解决此问题，可在创建锁的同时创建<strong>守护线程，</strong>定义一个定时任务每隔一段时间为未释放的锁增加过期时间，当业务执行完释放锁后，再关闭守护线程。<br>这种锁续期的思想可以解决锁超时问题。</p><h3 id="锁误删除"><a href="#锁误删除" class="headerlink" title="锁误删除"></a>锁误删除</h3><p>客户端A加锁同时设置超时时间3秒，结果3秒之后程序逻辑还没执行完成，锁已经释放。<br>客户端B此时来加锁，B加上锁后，客户端A代码执行完成开始执行释放锁，结果释放客户端B的锁。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723457513282-7ee4ff2d-1980-44f3-bc4d-9239a7f61805.png#averageHue=%23f5f3ed&clientId=u23334638-f09e-4&from=paste&height=194&id=qwcUG&originHeight=218&originWidth=699&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=72259&status=done&style=none&taskId=u69a6db24-76bf-4973-85da-98ebd37a141&title=&width=621.3333333333334" alt="image.png"><br>为了保证解锁的_原子性_，用LUA脚本完成，<br>先判断当前锁的字符串是否与传入的值相等，是的话才删除key。<br>删除key的时候通过<code>random_value</code>来判断是否为同一个客户端</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- redis删除锁时判断锁的值是否和传入的值一致</span></span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="RedLock"><a href="#RedLock" class="headerlink" title="RedLock"></a>RedLock</h3><p>redlock是一种基于多节点redis实现分布式锁的算法，可以解决redis单点故障问题。<br>解决的问题：<br>在Redis主从架构下，主从同步 是异步的，<br>在Master节点加锁成功后指令没同步到Slave节点时，Master挂了，Slave提升新的Master，<br>新Master上没用锁的数据，<br>导致其他客户端仍然可以加锁成功的问题。<br>如何解决：<br>同时向一组节点发送加锁信息，半数响应成功则认为加锁成功，<br>每个锁都有生存时间（TTL），防止客户端崩溃导致锁不会释放。<br>客户端完成任务后向所有节点发送释放锁请求。</p><p>使用场景</p><ul><li>必须保证分布式锁高可用</li><li>锁定时间长</li></ul><h2 id="zookeeper分布式锁"><a href="#zookeeper分布式锁" class="headerlink" title="zookeeper分布式锁"></a>zookeeper分布式锁</h2><p>当某个线程要对方法加锁时，在Zookeeper创建一个与当前方法对应的夫节点，<br>每个要获取当前方法的锁的线程都会在夫节点下创建一个 临时有序节点 ，<br>因为临时有序节点序号是<strong>递增</strong>的，所以后续要获取锁的线程在zookeeper里的序号也是<strong>递增</strong>的。<br>根据这个特点，可以规定最小节点获取锁。</p><p>在并发下，每个线程都会在对应方法节点下创建属于自己的临时节点，且每个节点都是临时有序的。</p><blockquote><p>临时节点避免 锁超时问题<br>有序节点，最小的节点自动获取执行权限，002的节点会自动监听001，当001执行结束后002会自动执行，003同理。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723459781579-ece6f823-e2ce-4b35-b559-df3e3a373035.png#averageHue=%23b9b4b1&clientId=u23334638-f09e-4&from=paste&height=479&id=y9IW8&originHeight=539&originWidth=891&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=291990&status=done&style=none&taskId=ueee3daea-86e1-4e37-97f4-75a5d5de969&title=&width=792" alt="image.png"></p><h1 id="生成唯一主键"><a href="#生成唯一主键" class="headerlink" title="生成唯一主键"></a>生成唯一主键</h1><p>对数据和消息的唯一标识。</p><h2 id="唯一主键的要求"><a href="#唯一主键的要求" class="headerlink" title="唯一主键的要求"></a>唯一主键的要求</h2><h3 id="全局唯一"><a href="#全局唯一" class="headerlink" title="全局唯一"></a>全局唯一</h3><p>不能出现重复的ID号，即唯一。</p><h3 id="趋势递增"><a href="#趋势递增" class="headerlink" title="趋势递增"></a>趋势递增</h3><p>在MYSQL的InnoDB引擎中使用的是聚集索引，由于多数RDBMS使用BTree数据结构，<br>在主键上尽量有序保证写入性能。</p><h3 id="单调递增"><a href="#单调递增" class="headerlink" title="单调递增"></a>单调递增</h3><p>下一个ID一定大于上一个ID，例如事务版本号，增量消息等需求。</p><h3 id="信息安全"><a href="#信息安全" class="headerlink" title="信息安全"></a>信息安全</h3><p>如果ID是连续的，信息被泄露。(订单号)</p><h3 id="含时间戳"><a href="#含时间戳" class="headerlink" title="含时间戳"></a>含时间戳</h3><p>开发中了解分布式ID的生成时间。</p><h2 id="生成方案"><a href="#生成方案" class="headerlink" title="生成方案"></a>生成方案</h2><h3 id="数据库自增序列"><a href="#数据库自增序列" class="headerlink" title="数据库自增序列"></a>数据库自增序列</h3><p>实现简单，不适用于分库场景，不适用于特高并发场景。</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>生成简单，不连贯。</p><h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723471031837-4b71076c-f589-420f-9b06-746e37a1100c.png#averageHue=%23f8f7f7&clientId=u08511f79-a38a-4&from=paste&height=204&id=AOByO&originHeight=230&originWidth=730&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=51566&status=done&style=none&taskId=u5095725a-e48f-460b-8195-f058d6a9b64&title=&width=648.8888888888889" alt="image.png"><br>不依赖数据库等第三方系统，以服务的方式部署，稳定性高，生成ID的性能也非常高。<br>可自定义分配bit位，非常灵活。</p><h3 id="雪花算法生成的ID可能产生的问题"><a href="#雪花算法生成的ID可能产生的问题" class="headerlink" title="雪花算法生成的ID可能产生的问题"></a>雪花算法生成的ID可能产生的问题</h3><p>依赖机器时钟，如果机器时钟回拨会导致重复ID的出现。</p><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p>分布式事务指操作多个数据库的事务，为了保证分布式系统中数据一致性<br>分布式事务类型：</p><ul><li>二阶段提交2PC</li><li>三阶段提交3PC</li><li>TCC协议</li></ul><h2 id="什么是2PC"><a href="#什么是2PC" class="headerlink" title="什么是2PC"></a>什么是2PC</h2><p>参与者将操作成败通知协助者，再由协调者根据所有参与者的反馈情报决定 参与者是否提交或中止。<br>二阶段： </p><ol><li>请求阶段（表决阶段）</li><li>提交&#x2F;回滚阶段（执行阶段）</li></ol><h3 id="请求阶段"><a href="#请求阶段" class="headerlink" title="请求阶段"></a>请求阶段</h3><p>事务协调者通知每个参与者准备提交或取消事务，<br>进入请求阶段： 参与者写redo和undo日志，但是不提交事务，<br>同时告知协调者自己的状态 ,是本地事务执行成功或者是失败</p><h3 id="提交阶段"><a href="#提交阶段" class="headerlink" title="提交阶段"></a>提交阶段</h3><p>基于请求阶段的投票决定 提交或取消<br>当且仅当所有参与者同意提交事务，协调者才通知所有的参与者提交事务，<br>否则协<strong>调者通</strong>知所有参与者取消事务</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723518983056-95ca301a-0933-4a09-ac99-e61b4fb7d0b5.png#averageHue=%23f7eddf&clientId=ua697ea11-c1fb-4&from=paste&height=198&id=c5TQy&originHeight=223&originWidth=593&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=81460&status=done&style=none&taskId=u6db48f54-cb6b-4e41-a2f7-5ed2a9c0b52&title=&width=527.1111111111111" alt="image.png"></p><h3 id="两阶段提交的缺点"><a href="#两阶段提交的缺点" class="headerlink" title="两阶段提交的缺点"></a>两阶段提交的缺点</h3><h4 id="同步阻塞问题"><a href="#同步阻塞问题" class="headerlink" title="同步阻塞问题"></a>同步阻塞问题</h4><p>执行过程中，所有参与节点都是事务阻塞型的</p><h4 id="单点故障"><a href="#单点故障" class="headerlink" title="单点故障"></a>单点故障</h4><p>由于协调者的重要性，一旦协调者挂掉参与者就会一直阻塞。</p><h4 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h4><p>在提交阶段（阶段二），协调者向参与者发送commit（提交）请求后，<br>发生了局部网络异常导致一部分参与者接收到了 提交请求，一部分没有提交，因而出现数据不一致问题。</p><h2 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h2><p>三阶段提交协议在协调者和参与者中引入超时机制，<br>询问CanCommit，锁资源PreCommit，真正提交DoCommit</p><h3 id="请求阶段-CanCommit"><a href="#请求阶段-CanCommit" class="headerlink" title="请求阶段 CanCommit"></a>请求阶段 CanCommit</h3><p>协调者向参与者发送<code>canCommit</code>请求，参与者可以提交响应yes，否则响应no，这一阶段叫SQL校验。</p><h3 id="预提交阶段PreCommit"><a href="#预提交阶段PreCommit" class="headerlink" title="预提交阶段PreCommit"></a>预提交阶段PreCommit</h3><p>协调者根据参与者<code>canCommit</code>阶段的响应决定是否继续事务<code>preCommit</code>操作，根据响应有下面两种可能：</p><h4 id="反馈成功"><a href="#反馈成功" class="headerlink" title="反馈成功"></a>反馈成功</h4><p>参与者都响应yes，执行事务预执行：</p><ul><li>协调者向参与者发送<code>preCommit</code>请求，进入prepared阶段。</li><li>参与者接收到<code>preCommit</code>请求后将undo和redo信息记录到事务日志</li><li>每个参与者成功后响应 <code>ACK</code>并开始等待</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723530178433-15407add-5077-4be7-8da5-95bb32708412.png#averageHue=%23555a66&clientId=udf273db1-d15c-4&from=paste&height=425&id=Ci2tg&originHeight=478&originWidth=841&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=225507&status=done&style=none&taskId=u6e9f5128-f616-40db-8401-d20b716c9ec&title=&width=747.5555555555555" alt="image.png"></p><h4 id="反馈失败"><a href="#反馈失败" class="headerlink" title="反馈失败"></a>反馈失败</h4><pre><code> 就要中断事务，协调者向参与者发送 `abort`请求，</code></pre><p> 参与者接收到或超时未接收到都会 执行事务中断。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723530370640-9254474b-d436-4bf9-805b-e647883182d9.png#averageHue=%23545966&clientId=udf273db1-d15c-4&from=paste&height=415&id=Qf9Pr&originHeight=467&originWidth=829&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=191855&status=done&style=none&taskId=u1f9d3e18-0ddf-49aa-813c-3ed5bc88893&title=&width=736.8888888888889" alt="image.png"></p><h3 id="提交阶段DoCommit"><a href="#提交阶段DoCommit" class="headerlink" title="提交阶段DoCommit"></a>提交阶段DoCommit</h3><p>协调者根据参与者<code>preCommit</code>阶段响应决定是否可以继续事务的doCommit 操作，<br>根据响应情况分为以下2种</p><h4 id="反馈成功-1"><a href="#反馈成功-1" class="headerlink" title="反馈成功"></a>反馈成功</h4><p>所有的参数者都反映 <code>ACK</code>响应，执行事务提交<br>向所有参与者发送 <code>doCommit</code>请求，参与者提交成功后响应<code>haveCommitted</code> 的响应<br>协调者收到后完成任务。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723532209533-30199d51-9ec7-4897-a2dd-927f0bcb4aec.png#averageHue=%23545864&clientId=udf273db1-d15c-4&from=paste&height=725&id=FWIoh&originHeight=816&originWidth=805&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=324740&status=done&style=none&taskId=u98097cf5-f116-4dd4-ac39-3fd9d85af02&title=&width=715.5555555555555" alt="image.png"></p><h4 id="反馈失败-1"><a href="#反馈失败-1" class="headerlink" title="反馈失败"></a>反馈失败</h4><p>有参数者都反映 <code>no</code>响应，执行事务取消提交<br>向所有参与者发送 <code>abort</code>请求，参与者取消事务后响应<code>ack</code> 的响应<br>协调者收到后中断事务。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723532956499-0c46aa78-6000-4f4f-aa92-3756ce1083e8.png#averageHue=%23535864&clientId=udf273db1-d15c-4&from=paste&height=718&id=XehXC&originHeight=808&originWidth=806&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=297081&status=done&style=none&taskId=u78fa1366-a195-4d29-9389-ef22d5839ab&title=&width=716.4444444444445" alt="image.png"></p><h2 id="2PC和3PC的区别"><a href="#2PC和3PC的区别" class="headerlink" title="2PC和3PC的区别"></a>2PC和3PC的区别</h2><p>3PC 的改进之处：</p><ul><li>减少阻塞时间：在 CanCommit 阶段，参与者不需要锁定资源，只有在预提交阶段才会锁定资源。</li><li>解决单点故障问题：即使协调者在 PreCommit 阶段发生故障，参与者也可以根据预提交的结果决定是否提交事务。</li></ul><h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><p>Seata事务管理中有三个重要角色:</p><ul><li>TC 事务协调者: 维护全局和分支事务的状态, 协调全局事务提交或回滚</li><li>TM事务管理器 : 定义全局事务的范围、开始全局事务、提交或回滚事务</li><li>RM资源管理器 : 管理分支事务处理的资源,与TC交谈以注册分支事务和报告分支事务的状态</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729149419868-94cc7aac-e2b3-4472-8b1f-230b2a6ea0a8.png"></p><p>Seata基于上述架构提供四种不同的分布式事务解决方案:</p><ul><li>XA模式: 强一致性分阶段事务模式, 牺牲可用性, 无业务侵入</li><li>TCC模式: 最终一致的分阶段事务模式, 有业务侵入</li><li>AT模式: 最终一致的分阶段事务模式,无业务侵入, 也是默认模式</li><li>SAGA模式: 长事务模式,有业务侵入</li></ul><p>无论哪种模式都离不开TC事务协调者</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>首先，在order-service中引入依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--seata--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;!--版本较低，1.3.0，因此排除--&gt; </span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;!--seata starter 采用1.4.2版本--&gt;</span><br><span class="line">    &lt;version&gt;$&#123;seata.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置TC地址"><a href="#配置TC地址" class="headerlink" title="配置TC地址"></a>配置TC地址</h3><p>在order-service中的application.yml中，配置TC服务信息，通过注册中心nacos，结合服务名称获取TC地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">seata:</span><br><span class="line">  registry: # TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span><br><span class="line">    type: nacos # 注册中心类型 nacos</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: 127.0.0.1:8848 # nacos地址</span><br><span class="line">      namespace: &quot;&quot; # namespace，默认为空</span><br><span class="line">      group: DEFAULT_GROUP # 分组，默认是DEFAULT_GROUP</span><br><span class="line">      application: seata-tc-server # seata服务名称</span><br><span class="line">      username: nacos</span><br><span class="line">      password: nacos</span><br><span class="line">  tx-service-group: seata-demo # 事务组名称</span><br><span class="line">  service:</span><br><span class="line">    vgroup-mapping: # 事务组与cluster的映射关系</span><br><span class="line">      seata-demo: SH</span><br></pre></td></tr></table></figure><p>微服务如何根据这些配置寻找TC的地址呢？</p><p>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：</p><ul><li>namespace：命名空间</li><li>group：分组</li><li>application：服务名</li><li>cluster：集群名</li></ul><p>以上四个信息，在刚才的yaml文件中都能找到：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729149419971-e9343f24-6d69-43d7-8536-723127bd5a54.png"></p><p>namespace为空，就是默认的public</p><p>结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SH，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了。</p><h2 id="XA模式"><a href="#XA模式" class="headerlink" title="XA模式"></a>XA模式</h2><p>XA是一种规范,实现原理是基于两阶段提交。</p><p>Seata 对原始的 XA 模式做了封装和改造:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729150169632-b1ea6755-9e2a-49ed-910d-a2464f00ba00.png"></p><p>资源管理器 一阶段工作:</p><ol><li>注册分支事务到 协调者</li><li>执行分支业务 sql 但不提交</li><li>报告状态到 协调者</li></ol><p>协调者 二阶段工作:</p><ul><li>如果 都成功, 通知所有提交</li><li>如果 有失败.通知所有回滚</li></ul><p>资源管理器 二阶段:</p><p>接收 协调者指令, 提交或回滚事务</p><h3 id="实现-XA-模式"><a href="#实现-XA-模式" class="headerlink" title="实现 XA 模式"></a>实现 XA 模式</h3><p>修改 <code>application.yml</code>文件,开启 XA 模式:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">data-source-proxy-mode</span>: <span class="string">XA</span></span><br></pre></td></tr></table></figure><p>给发起全局事务的入口方法添加 <code>@GlobalTransactional</code> 注解</p><p>当库存不足导致的事务回滚时:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729155888756-d7a06a2f-a61a-463f-b743-d5b9f5c9a496.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729155910926-939761ae-7dfd-4a37-bd10-aa92251f9cde.png"></p><h2 id="AT-模式"><a href="#AT-模式" class="headerlink" title="AT 模式"></a>AT 模式</h2><p>AT 同样是分阶段提交事务模型, 弥补了 XA 模式资源锁定周期过长的缺陷</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729156027758-f1875dfb-2188-490d-b8b5-781a8c247fd7.png">阶段一RM的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时RM的工作：</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时RM的工作：</p><ul><li>根据undo-log恢复数据到更新前</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729155998551-b2374a92-df49-4e2c-82ab-3934d9ef2f55.png"></p><h3 id="AT-与-XA-的区别"><a href="#AT-与-XA-的区别" class="headerlink" title="AT 与 XA 的区别"></a>AT 与 XA 的区别</h3><ul><li>XA 一阶段不提交事务, 锁定资源 ; AT 模式一阶段直接提交, 不锁定资源</li><li>XA 依赖数据库机制实现回滚 ;  AT 模式利用 <font style="color:#DF2A3F;">快照</font> 实现数据回滚</li><li>XA 强一致性 ; AT 最终一致</li></ul><h3 id="AT-的多线程脏写问题-隔离性"><a href="#AT-的多线程脏写问题-隔离性" class="headerlink" title="AT 的多线程脏写问题(隔离性)"></a>AT 的多线程脏写问题(隔离性)</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729169831722-1cb09f05-4018-4e8b-8208-ddb6748545fe.png"></p><p>由于事务 1 在一阶段直接提交了事务, 在二阶段使用了快照回滚, 导致事务 2 一阶段的提交生效</p><p>解决思路就是引入<font style="color:#DF2A3F;">全局锁</font> . </p><p>假设有一个简单的银行转账场景，涉及两个账户 A 和 B：</p><p>事务 T1：</p><p>从账户 A 转账 100 元到账户 B。</p><p>获取全局锁，确保没有其他事务同时操作账户 A 和 B。</p><p>执行 SQL 语句，更新账户 A 和 B 的余额。</p><p>提交事务，释放全局锁。</p><p>事务 T2：</p><p>从账户 B 转账 50 元到账户 A。</p><p>尝试获取全局锁，但发现全局锁已被事务 T1 持有，因此等待。</p><p>事务 T1 提交后，事务 T2 获取全局锁，执行 SQL 语句，更新账户 A 和 B 的余额。</p><p>提交事务，释放全局锁。</p><p>通过全局锁机制，Seata 确保了在高并发环境下事务的正确性和一致性。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729170874675-74078206-0cc5-40f2-a996-51acf4a304dc.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729171418298-dba2abca-fe45-44da-a08b-e2b2089335d6.png"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p><ul><li>一阶段完成 提交事务, 释放数据库资源, 性能好</li><li>利用全局锁实现读写隔离</li><li>没有代码侵入, 框架完成回滚提交</li></ul><p>缺点</p><ul><li>两阶段是软状态, 最终一致</li><li>快照功能影响性能, 但被 XA 模式好</li></ul><h2 id="TCC-模式"><a href="#TCC-模式" class="headerlink" title="TCC 模式"></a>TCC 模式</h2><ol><li>Try: 资源检测和预留</li><li>Confirm: 业务, try 成功则 Confirm 一定成功</li><li>Cancel: 释放预留资源</li></ol><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>假设 A 余额 100,需要扣除 30</p><ul><li>Try 阶段, 检测余额是否充足</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729407533658-fc17568a-6c14-4aae-9705-3b6240b23073.png"></p><p><font style="background-color:rgba(255, 255, 255, 0);">此时，总金额 &#x3D; 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</font></p><ul><li>Confirm: 扣减冻结金额</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729407606038-23cc6827-effb-4445-a61f-edac940e7d1c.png"></p><p><font style="background-color:rgba(255, 255, 255, 0);">此时，总金额 &#x3D; 冻结金额 + 可用金额 &#x3D; 0 + 70 &#x3D; 70元</font></p><ul><li>Canncel: 如果要回滚, 则释放冻结金额</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729407667491-cd5d84c0-c1f9-4d91-ab19-bbb192b5789e.png"></p><h3 id="TCC-模型"><a href="#TCC-模型" class="headerlink" title="TCC 模型"></a><font style="background-color:rgba(255, 255, 255, 0);">TCC 模型</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729407707593-b3479dbe-3e41-4280-b25c-a2774ef87d5c.png"></p><h3 id="TCC-优缺点"><a href="#TCC-优缺点" class="headerlink" title="TCC 优缺点"></a>TCC 优缺点</h3><ul><li>一阶段直接提交事务, 释放资源</li><li>无需生成快照, 无需全局锁</li><li>不依赖数据库事务, 而是补偿操作, 可以用于非事务性数据库</li></ul><p>缺点</p><ul><li>有代码侵入</li><li>软状态, 事务是最终一致</li><li>做好幂等</li></ul><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>TCC要求每个分支事务实现三个操作：预处理Try，确认Confirm，撤销Cancel</p><ul><li>Try操作业务检查及资源预留</li><li>Confirm做业务确认操作</li><li>Cancel实现于Try相反的操作（回滚操作）</li></ul><ol><li>发起所有分支事务的try操作</li><li>任何一个分支事务try执行失败，发起Cancel操作</li><li>try操作全部成功，执行所有分支事务的Confirm做业务确认操作</li></ol><h3 id="预处理Try"><a href="#预处理Try" class="headerlink" title="预处理Try"></a>预处理Try</h3><p>此阶段完成：</p><ul><li>完成所有业务检查（一致性）</li><li>预留必须业务资源（准隔离性）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723534093911-bc6a7736-d599-4cd4-b826-7dbc3397f214.png#averageHue=%23535865&clientId=udf273db1-d15c-4&from=paste&height=419&id=u49e3c8ee&originHeight=471&originWidth=554&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=124471&status=done&style=none&taskId=u1248eecd-4426-477f-bffa-6033089ef3a&title=&width=492.44444444444446">假设库存为100，购买数量为2，检查和更新库存的同时，冻结用户购买数量的库存，同时创建订单且订单状态为待确认。</p><h3 id="确认阶段"><a href="#确认阶段" class="headerlink" title="确认阶段"></a>确认阶段</h3><p>根据try阶段是否正常执行，从而确认执行 确认操作Confirm 或者 取消操作CancelConfirm 和Cancel满足幂等性，如果执行失败会不断重试直到执行完成。</p><h4 id="Confirm-确认"><a href="#Confirm-确认" class="headerlink" title="Confirm 确认"></a>Confirm 确认</h4><p>当try阶段全部正常执行，就执行确认操作 <img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723534479054-4bf32592-1f7d-431b-81f7-077f6f74591a.png#averageHue=%23555a67&clientId=udf273db1-d15c-4&from=paste&height=298&id=uc57c9555&originHeight=335&originWidth=759&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=134318&status=done&style=none&taskId=ub893d002-eab9-45f4-94e4-a074d51ef98&title=&width=674.6666666666666">这里使用的资源是try阶段预留的业务资源，在TCC事务机制认为：try能正常预留资源则Confirm一定能正确提交。</p><h4 id="Cancel撤销"><a href="#Cancel撤销" class="headerlink" title="Cancel撤销"></a>Cancel撤销</h4><p>当try阶段执行失败，就执行撤销操作 <img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1723534599490-35407176-6a52-45e9-a52b-6573a5194e63.png#averageHue=%23555a66&clientId=udf273db1-d15c-4&from=paste&height=295&id=ufe5585c9&originHeight=332&originWidth=773&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=137541&status=done&style=none&taskId=uf7a1340d-d08e-4538-8047-17fd1b7239d&title=&width=687.1111111111111">Cancel释放try阶段预留的业务资源，会把冻结的库存释放，并更新订单状态为取消。</p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p><ul><li>性能提升：具体业务实现控制资源锁的粒度变小，不会锁整个资源</li><li>数据最终一致性： 基于 Confirm 和Cancel的幂等性，保证事务最终完成或者取消，保证数据的最终一致性</li><li>可靠性： 解决了协调者单点故障问题，</li></ul><p>引入 超时机制（try阶段完成后参与者设置超时时间，时间内没用收到 Confirm 和Cancel 也会自动执行。故障转移 当协调者故障可以有备用协调者管理事务。</p><p>假设协调者在发送 Confirm 请求后发生故障，参与者没有收到任何响应。在这种情况下，参与者将执行以下操作：</p><p>参与者检测到超时：参与者检查其内部状态，发现它处于 Try 状态。根据预先设定的策略，参与者自动执行本地 Commit。备用协调者接管：如果有备用协调者，它可以通过查询参与者的状态来确定事务的下一步动作。备用协调者可以发送 Confirm 或 Cancel 请求给参与者，以确保事务的一致性。</p><p>缺点：业务耦合，开发成本。</p><h3 id="TCC常见异常"><a href="#TCC常见异常" class="headerlink" title="TCC常见异常"></a>TCC常见异常</h3><h4 id="幂等处理"><a href="#幂等处理" class="headerlink" title="幂等处理"></a>幂等处理</h4><p>网络抖动可能会 重复调用同一个分布式事务种的一个分布式事务二阶段接口。导致资源重复使用或者释放。所以分支事务的二阶段接口 确认&#x2F;回滚 需要保证幂等性。</p><p><strong>应对策略</strong>引入幂等字段进行防重放攻击，新增一张事务状态控制表，表中有 </p><ol><li>主事务id</li><li>分支事务id</li><li>分支事务状态 （INIT初始化，CONFIRMED已提交，ROLLBACKED已回滚）</li></ol><p>参与者的try方法，分支事务状态会写入INIT，二阶段的Confirm 和Cancel 将状态更新为CONFIRMED已提交，ROLLBACKED已回滚。</p><p>当重复调用二阶段接口，参与者会先获取事务状态控制表的对应记录，如果状态已经改为CONFIRMED已提交，ROLLBACKED已回滚 则无需再次执行，直接返回幂等成功。</p><h4 id="空回滚"><a href="#空回滚" class="headerlink" title="空回滚"></a>空回滚</h4><p>某服务器没有调用try方法情况下，就调用了二阶段的Cancel方法。</p><p>当某分支事务的 try 阻塞时, 可以导致全局事务超时 而触发二阶段 cancel 操作</p><p>即 在未执行 try 操作时先执行了 cancel 操作, 就是空回滚</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729415906997-4d1797e6-aa66-44a9-b658-31e1bb742a6e.png"></p><p>执行 cancel 操作时, 先判断 try 是否已经执行, 未执行则不执行 cancel</p><p>通过事务状态控制表来解决：</p><ol><li>在 Try 操作成功执行后，参与者服务端记录一个事务状态。</li><li>在 Cancel 操作中，先检查是否存在 Try 操作的记录。</li><li>如果存在，则执行 Cancel 操作；如果不存在，则认为是空回滚，不做任何操作</li></ol><h4 id="资源悬挂"><a href="#资源悬挂" class="headerlink" title="资源悬挂"></a>资源悬挂</h4><p>如果协调者在发送 Confirm 或 Cancel 请求后发生故障，参与者可能无法得知下一步的操作。参与者会处于悬挂状态，不知道应该执行 Confirm 还是 Cancel</p><p>解决：</p><ul><li>实现超时机制来解决，参与者在 Try 阶段设置一个超时时间，如果在超时时间内没有收到 Confirm 或 Cancel 请求，则根据预设规则自动执行 Confirm 或 Cancel。</li><li>故障转移：使用备用协调者来接管事务管理。备用协调者可以通过查询参与者的状态来决定下一步的操作。</li></ul><h4 id="业务悬挂"><a href="#业务悬挂" class="headerlink" title="业务悬挂"></a>业务悬挂</h4><p>对于已经空回滚的业务, 之前被阻塞的 try 操作恢复, 继续执行 try, 就不可能 Confirm 或 cancel,</p><p>事务一直处于中间状态, 这就是 <font style="color:#DF2A3F;">业务悬挂</font></p><p>执行 try 时, 需要判断 cancel 是否已经执行了,如果已经执行, 应当阻止空回滚后的 try 操作, 避免悬挂</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1729652239698-8fab8a78-4658-4aff-9a51-b2b151e9788a.png"></p><h3 id="实现-TCC-模式"><a href="#实现-TCC-模式" class="headerlink" title="实现 TCC 模式"></a>实现 TCC 模式</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>创建表</p><p><code>unsigned</code> 修饰的列只能存储非负数（即 0 和正数）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_tbl` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb3 <span class="keyword">COLLATE</span> utf8mb3_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">int</span> unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 ROW_FORMAT<span class="operator">=</span>COMPACT</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_freeze_tbl` (</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `freeze_money` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;冻结金额&#x27;</span>,</span><br><span class="line">  `state` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务状态，0:try，1:confirm，2:cancel&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`xid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span>COMPACT;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>xid：是全局事务id   </li><li>freeze_money：用来记录用户冻结金额</li><li>state：用来记录事务状态</li></ul><p>那此时，我们的业务开怎么做呢？</p><ul><li>Try业务：<ul><li>记录冻结金额和事务状态到account_freeze表</li><li>扣减account表可用金额</li></ul></li><li>Confirm业务<ul><li>根据xid删除account_freeze表的冻结记录</li></ul></li><li>Cancel业务<ul><li>修改account_freeze表，冻结金额为0，state为2</li><li>修改account表，恢复可用金额</li></ul></li><li>如何判断是否空回滚？<ul><li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚</li></ul></li><li>如何避免业务悬挂？<ul><li>try业务中，根据xid查询account_freeze ，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li></ul></li></ul><h4 id="声明-TCC"><a href="#声明-TCC" class="headerlink" title="声明 TCC"></a>声明 TCC</h4><p><code>@LocalTCC</code> 写在类上, 表示 TCC</p><p><code>@TwoPhaseBusinessAction</code>写在方法上, 表示该方法是 try 方法, </p><ul><li>属性 name 值表示 try 阶段方法名称</li><li>属性 commitMethod 值表示 confirm 阶段方法名称</li><li>属性 rollbackMethod 值表示 cancel 阶段方法名称</li></ul><p><code>@BusinessActionContextParameter</code>写在方法参数前, 将该参数声明为三个阶段的公共参数</p><ul><li>属性 paramName 值表示公共参数名称</li></ul><p><font style="background-color:rgba(255, 255, 255, 0);">TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">我们在account-service项目中的</font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;cn.itcast.account.service&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">包中新建一个接口，声明TCC三个接口：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Account</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TCC类  <span class="doctag">@LocalTCC</span> 声明当前为TCC事务类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 呆大王</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2024/10/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span>  <span class="title class_">AccountTCCService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Account&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;deduct&quot;, commitMethod = &quot;confirm&quot;, rollbackMethod = &quot;cancel&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span>String userId,</span></span><br><span class="line"><span class="params">                <span class="meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span><span class="type">int</span> money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTCCServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;AccountMapper, Account&gt; <span class="keyword">implements</span> <span class="title class_">AccountTCCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountFreezeMapper accountFreezeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(String userId, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">//获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> RootContext.getXID();</span><br><span class="line">        <span class="comment">//判断freeze中是否有该记录, 如果有, 说明CANCEL执行了, 不需要处理</span></span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">old</span> <span class="operator">=</span> accountFreezeMapper.selectById(xid);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isNotEmpty(old))&#123;</span><br><span class="line">            <span class="comment">//证明try没执行, 需要空回滚</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扣减余额</span></span><br><span class="line">        accountMapper.deduct(userId, money);</span><br><span class="line">        <span class="comment">//记录冻结金额, 事务状态</span></span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">accountFreeze</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountFreeze</span>();</span><br><span class="line">        accountFreeze.setUserId(userId);</span><br><span class="line">        accountFreeze.setFreezeMoney(money);</span><br><span class="line">        accountFreeze.setState(AccountFreeze.State.TRY);</span><br><span class="line">        accountFreeze.setXid(xid);</span><br><span class="line">        accountFreezeMapper.insert(accountFreeze);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">//获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();<span class="comment">//从上下文中拿到事务id</span></span><br><span class="line">        <span class="comment">//根据id删除冻结记录</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> accountFreezeMapper.deleteById(xid);</span><br><span class="line">        <span class="comment">//无需幂等, 因为是删除逻辑, 不存在重复删除</span></span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">1</span>;<span class="comment">//判断是否删除成功</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">//空回滚判断, 根据xid判断</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();</span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">accountFreeze</span> <span class="operator">=</span> accountFreezeMapper.selectById(xid);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(accountFreeze))&#123;</span><br><span class="line">            <span class="comment">//证明try没执行, 需要空回滚</span></span><br><span class="line">            accountFreeze = <span class="keyword">new</span> <span class="title class_">AccountFreeze</span>();</span><br><span class="line">            accountFreeze.setXid(xid);</span><br><span class="line">            accountFreeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">            accountFreeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">            accountFreeze.setUserId(ctx.getActionContext(<span class="string">&quot;userId&quot;</span>).toString());</span><br><span class="line">            <span class="keyword">return</span> accountFreezeMapper.insert(accountFreeze) == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//幂等判断</span></span><br><span class="line">        <span class="keyword">if</span> (accountFreeze.getState() == AccountFreeze.State.CANCEL)&#123;</span><br><span class="line">            <span class="comment">//已经处理过了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//恢复可用金额</span></span><br><span class="line">        accountMapper.refund(</span><br><span class="line">            ctx.getActionContext(<span class="string">&quot;userId&quot;</span>).toString(),</span><br><span class="line">            (Integer) ctx.getActionContext(<span class="string">&quot;money&quot;</span>));</span><br><span class="line">        <span class="comment">//将冻结金额清零, 状态改为CANCEL</span></span><br><span class="line"></span><br><span class="line">        accountFreeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">        accountFreeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> accountFreezeMapper.updateById(accountFreeze);</span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1730020763869-f62b7d32-57e6-429f-8a23-d146337cf0dc.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1730020793550-ddddbb55-a2c0-4b6e-9087-c0a9ca19e52d.png"></p><h2 id="SAGA-模式"><a href="#SAGA-模式" class="headerlink" title="SAGA 模式"></a>SAGA 模式</h2><p>是 seata 的长事务解决方案</p><ul><li>一阶段: 直接提交本地事务</li><li>二阶段: 成功则什么都不做, 失败则通过编写补偿业务来回滚</li></ul><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p><ul><li>事务参与者可以基于事件驱动实现异步调用, 吞吐高</li><li>一阶段直接提交事务, 无锁, 性能好</li><li>不用编写 TCC 的三个阶段, 实现简单</li></ul><p>缺点</p><ul><li>软状态持续时间不稳定, 时效性差</li><li>没有锁, 没有事务隔离, 会有脏写</li></ul><h2 id="四种模式的对比"><a href="#四种模式的对比" class="headerlink" title="四种模式的对比"></a>四种模式的对比</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/23216672/1730022244670-12c3a3a9-ad83-4470-b395-2100babddd3b.png"></p><h2 id="seata-的高可用"><a href="#seata-的高可用" class="headerlink" title="seata 的高可用"></a>seata 的高可用</h2><p>见仓库的根目录下</p><h1 id="缓存一致性问题"><a href="#缓存一致性问题" class="headerlink" title="缓存一致性问题"></a>缓存一致性问题</h1><h2 id="先更新数据库，再删除缓存"><a href="#先更新数据库，再删除缓存" class="headerlink" title="先更新数据库，再删除缓存"></a>先更新数据库，再删除缓存</h2><p>a线程将数据库数据由5改为4， 再删除缓存前，b线程从缓存拿到数据5并执行。</p><p>优点：<br>如果缓存删除失败，数据库中的数据是最新的，可以保证数据的一致性。<br>缺点及问题：</p><ul><li>如果在更新数据库之后、删除缓存之前，其他线程读取缓存中的旧数据，会导致缓存中的数据与数据库中的数据不一致。</li><li>如果删除缓存失败，旧的数据将保留在缓存中，直到缓存过期</li></ul><p>解决方案：</p><ul><li>延时双删：在更新数据库之后，先删除缓存，然后等待一段时间（例如几秒）后再删除一次缓存。这段时间内，如果有读取操作，缓存中找不到数据时会从数据库中读取最新的数据并重新加载到缓存中。</li><li>使用 CAS（Compare and Swap）操作：在缓存中使用 CAS 操作来保证缓存更新的原子性，确保缓存更新和删除操作要么全部成功要么全部失败。</li><li>使用发布&#x2F;订阅机制：当数据更新时，发布一个事件，订阅者（缓存系统）接收到事件后删除对应的缓存条目</li></ul><h2 id="先删除缓存，再更新数据"><a href="#先删除缓存，再更新数据" class="headerlink" title="先删除缓存，再更新数据"></a>先删除缓存，再更新数据</h2><p>a线程将缓存数据5删除， 再更新数据库前，<br>b线程从缓存拿不到数据 就 到数据库 读取数据5 并写入缓存<br>a线程然后修改数据库由5改4，<br>出现 数据库4 但是缓存是5的情况。</p><p>优点：</p><ul><li>如果缓存删除成功，可以避免缓存和数据库之间的不一致性。</li></ul><p>缺点及问题：</p><ul><li>如果在删除缓存之后、更新数据库之前，其他线程尝试读取缓存中的数据，会因为缓存中没有数据而直接读取数据库中的旧数据，导致短暂的不一致性。</li><li>缓存已经被删除，可能会导致缓存穿透问题。</li></ul><p>解决方案：</p><ul><li>延时双删：与第一种方案类似，但在更新数据库之后再删除缓存，等待一段时间后再次删除缓存。</li><li>使用锁：在删除缓存前获取锁，确保在更新数据库期间缓存不会被其他线程访问。</li><li>使用消息队列：当数据更新时，将更新操作放入消息队列，由消费者异步处理更新数据库和删除缓存的操作，确保操作的顺序性和一致性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的创建</title>
      <link href="/2024/08/06/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2024/08/06/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>请参考<a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.880.my_history.page.click">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩_bilibili</a></p><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p><code>node -v</code>  # 查看node版本 </p><p><code>npm -v</code>  #查看npm版本</p><h2 id="安装第三方工具"><a href="#安装第三方工具" class="headerlink" title="安装第三方工具"></a>安装第三方工具</h2><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code> #安装淘宝的cnpm 管理器</p><p><code>npm config get prefix</code> 查看自己的npm安装地址</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081907812.png" alt="image-20240808190759735"></p><p><img src="https://myossddw.oss-cn-hangzhou.aliyuncs.com/blog/202408081749716.png"></p><p>安装后启动发现目录下没有cnpm.cmd文件</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081908168.png" alt="image-20240808190819126"></p><p>导致即使配置好环境变量也无法启动</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081908526.png" alt="image-20240808190832467"></p><h3 id="改用yarn"><a href="#改用yarn" class="headerlink" title="改用yarn"></a>改用yarn</h3><p> <code>npm install -g yarn</code>  #安装yarn</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081941558.png" alt="image-20240808194147523"></p><p><code>yarn add hexo-cli </code>   #使用yarn 安装 hexo-cli</p><p>安装成功后查看 yarn的默认安装路径  <code>yarn global dir</code></p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081942557.png" alt="image-20240808194204521"></p><p>此目录下的.bin文件里有hexo.cmd</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081942743.png" alt="image-20240808194215704"></p><p>配置全局变量指向此路径</p><p>完成后 输入 <code>hexo -v</code>  查看版本</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081942709.png" alt="image-20240808194228664"></p><p>使用hexo</p><p><code>hexo init blog</code>  新建文件夹blog</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081943475.png" alt="image-20240808194301428"></p><p><code>cd blog</code>   #进入新建的文件夹</p><h2 id="创建第一篇博客"><a href="#创建第一篇博客" class="headerlink" title="创建第一篇博客"></a>创建第一篇博客</h2><p><code>hexo n &quot;我的第一篇博客&quot;</code>    #创建 一篇名称为 “我的第一篇博客”的博客</p><p><code>hexo clean</code>  # 清理</p><p><code>hexo g </code> # 执行</p><p><code>hexo r</code>  # 运行</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081943071.png" alt="image-20240808194315024"></p><p>如图浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a>  访问</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081943113.png" alt="image-20240808194331047"></p><p>如果出现 No layout：index.html 请注意你的 站点配置文件的theme名跟下载的theme文件夹名字是否一致</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081944227.png" alt="image-20240808194402189"></p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081945103.png" alt="image-20240808194510057"></p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081945478.png" alt="image-20240808194519441"></p><h2 id="推送到github"><a href="#推送到github" class="headerlink" title="推送到github"></a>推送到github</h2><p>在github上新建库， 同时指定库名称 必须是 #{your.username}.github.io</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081945064.png" alt="image-20240808194530025"></p><p>进入之前创建的blog文件夹下，找到 _config.tml文件</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081945368.png" alt="image-20240808194543315"></p><p>修改为,repo的路径就是刚刚创建的git库路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  type: <span class="string">&quot;git&quot;</span></span><br><span class="line">  repo: https:<span class="comment">//github.com/daidawang/daidawang.github.io.git</span></span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存后</p><p><code>yarn add hexo-deployer-git</code> #安装hexo的git插件</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081946672.png" alt="image-20240808194605639"></p><p><code> hexo -d</code> 推送远程，弹出登录验证，我选择了机器码的验证，</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081946365.png" alt="image-20240808194617320"></p><p>输入机器码后，验证成功</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081946028.png" alt="image-20240808194625981"></p><p>仓库里有内部</p><p>在git里设置页面好如下配置</p><p><img src="https://daidawangblogbucket.oss-cn-beijing.aliyuncs.com/blog/202408081946460.png" alt="image-20240808194636416"></p><p>访问地址<a href="https://daidawang.github.io/">https://daidawang.github.io/</a></p><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>进入algolia  <a href="https://dashboard.algolia.com/">https://dashboard.algolia.com/</a>  官网</p><p>登录后，选择第三个上传方式，新建一个 .json文件 并上次</p><p>选择 暂时跳过</p><h2 id="配置图床"><a href="#配置图床" class="headerlink" title="配置图床"></a>配置图床</h2><p>Markdown 文件中的图片都是引用的，图片是放在本地的，那怎么在博客中引用图片呢？</p><p>这里需要使用到图床，而我选择的是国内的<mark class="hl-label blue">阿里OSS</mark>。</p><p>然后可以参考这篇教程：<a href="https://developer.aliyun.com/article/1465963">手把手教你搭建阿里云图床(PicGo+Typora+阿里云OSS)，新手小白一看就会-阿里云开发者社区 (aliyun.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
